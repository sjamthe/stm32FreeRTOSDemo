ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTaskIsTaskSuspended:
  23              	.LFB14:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  25              		.loc 1 1657 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  31              		.loc 1 1665 0
  32 0000 50B1     		cbz	r0, .L8
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1668 0
  34 0002 4169     		ldr	r1, [r0, #20]
  35 0004 0C4A     		ldr	r2, .L9
  36 0006 9142     		cmp	r1, r2
  37 0008 0FD1     		bne	.L5
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  38              		.loc 1 1671 0
  39 000a 836A     		ldr	r3, [r0, #40]
  40 000c 0B4A     		ldr	r2, .L9+4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 31


  41 000e 9342     		cmp	r3, r2
  42 0010 0DD0     		beq	.L6
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  43              		.loc 1 1675 0
  44 0012 73B1     		cbz	r3, .L7
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  45              		.loc 1 1658 0
  46 0014 0020     		movs	r0, #0
  47              	.LVL1:
  48 0016 7047     		bx	lr
  49              	.LVL2:
  50              	.L8:
  51              	.LBB92:
  52              	.LBB93:
  53              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 32


  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 33


  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 34


 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 35


 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  54              		.loc 2 237 0
  55              		.syntax unified
  56              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
  57 0018 4FF05003 			mov r3, #80												
  58 001c 83F31188 		msr basepri, r3											
  59 0020 BFF36F8F 		isb														
  60 0024 BFF34F8F 		dsb														
  61              	
  62              	@ 0 "" 2
  63              	.LVL3:
  64              		.thumb
  65              		.syntax unified
  66              	.L3:
  67 0028 FEE7     		b	.L3
  68              	.L5:
  69              	.LBE93:
  70              	.LBE92:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  71              		.loc 1 1658 0
  72 002a 0020     		movs	r0, #0
  73              	.LVL4:
  74 002c 7047     		bx	lr
  75              	.LVL5:
  76              	.L6:
  77 002e 0020     		movs	r0, #0
  78              	.LVL6:
  79 0030 7047     		bx	lr
  80              	.LVL7:
  81              	.L7:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 36


1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  82              		.loc 1 1677 0
  83 0032 0120     		movs	r0, #1
  84              	.LVL8:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  85              		.loc 1 1695 0
  86 0034 7047     		bx	lr
  87              	.L10:
  88 0036 00BF     		.align	2
  89              	.L9:
  90 0038 00000000 		.word	.LANCHOR0
  91 003c 00000000 		.word	.LANCHOR1
  92              		.cfi_endproc
  93              	.LFE14:
  95              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  96              		.align	1
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu softvfp
 102              	prvResetNextTaskUnblockTime:
 103              	.LFB39:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 37


1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 38


1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 39


1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 40


1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 41


1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 42


1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 43


2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 44


2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 45


2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 46


2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 47


2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 48


2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 49


2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 50


2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 51


2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 52


2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 53


2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 54


2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 55


2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 56


2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 57


2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 58


2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 59


2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 60


3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 61


3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 62


3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 63


3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 64


3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 65


3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 66


3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 67


3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 68


3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 69


3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 70


3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 104              		.loc 1 3636 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 109              		.loc 1 3639 0
 110 0000 084B     		ldr	r3, .L15
 111 0002 1B68     		ldr	r3, [r3]
 112 0004 1B68     		ldr	r3, [r3]
 113 0006 3BB1     		cbz	r3, .L14
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 71


3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 114              		.loc 1 3653 0
 115 0008 064B     		ldr	r3, .L15
 116 000a 1B68     		ldr	r3, [r3]
 117 000c DB68     		ldr	r3, [r3, #12]
 118 000e DB68     		ldr	r3, [r3, #12]
 119              	.LVL9:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 120              		.loc 1 3654 0
 121 0010 5A68     		ldr	r2, [r3, #4]
 122 0012 054B     		ldr	r3, .L15+4
 123              	.LVL10:
 124 0014 1A60     		str	r2, [r3]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 125              		.loc 1 3656 0
 126 0016 7047     		bx	lr
 127              	.L14:
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 128              		.loc 1 3645 0
 129 0018 034B     		ldr	r3, .L15+4
 130 001a 4FF0FF32 		mov	r2, #-1
 131 001e 1A60     		str	r2, [r3]
 132 0020 7047     		bx	lr
 133              	.L16:
 134 0022 00BF     		.align	2
 135              	.L15:
 136 0024 00000000 		.word	.LANCHOR2
 137 0028 00000000 		.word	.LANCHOR3
 138              		.cfi_endproc
 139              	.LFE39:
 141              		.section	.text.prvDeleteTCB,"ax",%progbits
 142              		.align	1
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu softvfp
 148              	prvDeleteTCB:
 149              	.LFB38:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 150              		.loc 1 3582 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              	.LVL11:
 155 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 72


 156              	.LCFI0:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
 160 0002 0446     		mov	r4, r0
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 161              		.loc 1 3600 0
 162 0004 006B     		ldr	r0, [r0, #48]
 163              	.LVL12:
 164 0006 FFF7FEFF 		bl	vPortFree
 165              	.LVL13:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 166              		.loc 1 3601 0
 167 000a 2046     		mov	r0, r4
 168 000c FFF7FEFF 		bl	vPortFree
 169              	.LVL14:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 170              		.loc 1 3630 0
 171 0010 10BD     		pop	{r4, pc}
 172              		.cfi_endproc
 173              	.LFE38:
 175              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 182              	prvInitialiseNewTask:
 183              	.LFB6:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 184              		.loc 1 775 0
 185              		.cfi_startproc
 186              		@ args = 16, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL15:
 189 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 190              	.LCFI1:
 191              		.cfi_def_cfa_offset 32
 192              		.cfi_offset 4, -32
 193              		.cfi_offset 5, -28
 194              		.cfi_offset 6, -24
 195              		.cfi_offset 7, -20
 196              		.cfi_offset 8, -16
 197              		.cfi_offset 9, -12
 198              		.cfi_offset 10, -8
 199              		.cfi_offset 14, -4
 200 0004 8046     		mov	r8, r0
 201 0006 9946     		mov	r9, r3
 202 0008 089D     		ldr	r5, [sp, #32]
 203 000a 099F     		ldr	r7, [sp, #36]
 204 000c 0A9C     		ldr	r4, [sp, #40]
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 205              		.loc 1 807 0
 206 000e 266B     		ldr	r6, [r4, #48]
 207 0010 02F18042 		add	r2, r2, #1073741824
 208              	.LVL16:
 209 0014 013A     		subs	r2, r2, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 73


 210              	.LVL17:
 211 0016 06EB8206 		add	r6, r6, r2, lsl #2
 212              	.LVL18:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213              		.loc 1 808 0
 214 001a 26F00706 		bic	r6, r6, #7
 215              	.LVL19:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 216              		.loc 1 827 0
 217 001e 0023     		movs	r3, #0
 218              	.LVL20:
 219              	.L20:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 220              		.loc 1 827 0 is_stmt 0 discriminator 1
 221 0020 0F2B     		cmp	r3, #15
 222 0022 07D8     		bhi	.L21
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 223              		.loc 1 829 0 is_stmt 1
 224 0024 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 225 0026 E218     		adds	r2, r4, r3
 226 0028 82F83400 		strb	r0, [r2, #52]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 227              		.loc 1 834 0
 228 002c CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 229 002e 0AB1     		cbz	r2, .L21
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 230              		.loc 1 827 0 discriminator 2
 231 0030 0133     		adds	r3, r3, #1
 232              	.LVL21:
 233 0032 F5E7     		b	.L20
 234              	.L21:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235              		.loc 1 846 0
 236 0034 0023     		movs	r3, #0
 237              	.LVL22:
 238 0036 84F84330 		strb	r3, [r4, #67]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 239              		.loc 1 850 0
 240 003a 062D     		cmp	r5, #6
 241 003c 00D9     		bls	.L23
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 242              		.loc 1 852 0
 243 003e 0625     		movs	r5, #6
 244              	.L23:
 245              	.LVL23:
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 246              		.loc 1 859 0
 247 0040 E562     		str	r5, [r4, #44]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 248              		.loc 1 862 0
 249 0042 6564     		str	r5, [r4, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 250              		.loc 1 863 0
 251 0044 4FF0000A 		mov	r10, #0
 252 0048 C4F848A0 		str	r10, [r4, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 253              		.loc 1 867 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 74


 254 004c 201D     		adds	r0, r4, #4
 255 004e FFF7FEFF 		bl	vListInitialiseItem
 256              	.LVL24:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 257              		.loc 1 868 0
 258 0052 04F11800 		add	r0, r4, #24
 259 0056 FFF7FEFF 		bl	vListInitialiseItem
 260              	.LVL25:
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 261              		.loc 1 872 0
 262 005a 2461     		str	r4, [r4, #16]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 263              		.loc 1 875 0
 264 005c C5F10705 		rsb	r5, r5, #7
 265              	.LVL26:
 266 0060 A561     		str	r5, [r4, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 267              		.loc 1 876 0
 268 0062 6462     		str	r4, [r4, #36]
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 269              		.loc 1 918 0
 270 0064 C4F84CA0 		str	r10, [r4, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 271              		.loc 1 919 0
 272 0068 84F850A0 		strb	r10, [r4, #80]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 273              		.loc 1 946 0
 274 006c 4A46     		mov	r2, r9
 275 006e 4146     		mov	r1, r8
 276 0070 3046     		mov	r0, r6
 277 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 278              	.LVL27:
 279 0076 2060     		str	r0, [r4]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 280              		.loc 1 950 0
 281 0078 07B1     		cbz	r7, .L19
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 282              		.loc 1 954 0
 283 007a 3C60     		str	r4, [r7]
 284              	.L19:
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 285              		.loc 1 960 0
 286 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 287              		.cfi_endproc
 288              	.LFE6:
 290              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 291              		.align	1
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu softvfp
 297              	prvInitialiseTaskLists:
 298              	.LFB36:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 299              		.loc 1 3334 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 75


 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303 0000 38B5     		push	{r3, r4, r5, lr}
 304              	.LCFI2:
 305              		.cfi_def_cfa_offset 16
 306              		.cfi_offset 3, -16
 307              		.cfi_offset 4, -12
 308              		.cfi_offset 5, -8
 309              		.cfi_offset 14, -4
 310              	.LVL28:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 311              		.loc 1 3337 0
 312 0002 0024     		movs	r4, #0
 313 0004 07E0     		b	.L28
 314              	.LVL29:
 315              	.L29:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 316              		.loc 1 3339 0 discriminator 3
 317 0006 04EB8402 		add	r2, r4, r4, lsl #2
 318 000a 9300     		lsls	r3, r2, #2
 319 000c 0E48     		ldr	r0, .L31
 320 000e 1844     		add	r0, r0, r3
 321 0010 FFF7FEFF 		bl	vListInitialise
 322              	.LVL30:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 323              		.loc 1 3337 0 discriminator 3
 324 0014 0134     		adds	r4, r4, #1
 325              	.LVL31:
 326              	.L28:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 327              		.loc 1 3337 0 is_stmt 0 discriminator 1
 328 0016 062C     		cmp	r4, #6
 329 0018 F5D9     		bls	.L29
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 330              		.loc 1 3342 0 is_stmt 1
 331 001a 0C4D     		ldr	r5, .L31+4
 332 001c 2846     		mov	r0, r5
 333 001e FFF7FEFF 		bl	vListInitialise
 334              	.LVL32:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 335              		.loc 1 3343 0
 336 0022 0B4C     		ldr	r4, .L31+8
 337              	.LVL33:
 338 0024 2046     		mov	r0, r4
 339 0026 FFF7FEFF 		bl	vListInitialise
 340              	.LVL34:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341              		.loc 1 3344 0
 342 002a 0A48     		ldr	r0, .L31+12
 343 002c FFF7FEFF 		bl	vListInitialise
 344              	.LVL35:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 345              		.loc 1 3348 0
 346 0030 0948     		ldr	r0, .L31+16
 347 0032 FFF7FEFF 		bl	vListInitialise
 348              	.LVL36:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 349              		.loc 1 3354 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 76


 350 0036 0948     		ldr	r0, .L31+20
 351 0038 FFF7FEFF 		bl	vListInitialise
 352              	.LVL37:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 353              		.loc 1 3360 0
 354 003c 084B     		ldr	r3, .L31+24
 355 003e 1D60     		str	r5, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 356              		.loc 1 3361 0
 357 0040 084B     		ldr	r3, .L31+28
 358 0042 1C60     		str	r4, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 359              		.loc 1 3362 0
 360 0044 38BD     		pop	{r3, r4, r5, pc}
 361              	.L32:
 362 0046 00BF     		.align	2
 363              	.L31:
 364 0048 00000000 		.word	.LANCHOR4
 365 004c 00000000 		.word	.LANCHOR5
 366 0050 00000000 		.word	.LANCHOR6
 367 0054 00000000 		.word	.LANCHOR1
 368 0058 00000000 		.word	.LANCHOR7
 369 005c 00000000 		.word	.LANCHOR0
 370 0060 00000000 		.word	.LANCHOR2
 371 0064 00000000 		.word	.LANCHOR8
 372              		.cfi_endproc
 373              	.LFE36:
 375              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 376              		.align	1
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu softvfp
 382              	prvAddNewTaskToReadyList:
 383              	.LFB7:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 384              		.loc 1 964 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL38:
 389 0000 10B5     		push	{r4, lr}
 390              	.LCFI3:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 4, -8
 393              		.cfi_offset 14, -4
 394 0002 0446     		mov	r4, r0
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 395              		.loc 1 967 0
 396 0004 FFF7FEFF 		bl	vPortEnterCritical
 397              	.LVL39:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 398              		.loc 1 969 0
 399 0008 204A     		ldr	r2, .L40
 400 000a 1368     		ldr	r3, [r2]
 401 000c 0133     		adds	r3, r3, #1
 402 000e 1360     		str	r3, [r2]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 77


 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 403              		.loc 1 970 0
 404 0010 1F4B     		ldr	r3, .L40+4
 405 0012 1B68     		ldr	r3, [r3]
 406 0014 5BB1     		cbz	r3, .L38
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 407              		.loc 1 993 0
 408 0016 1F4B     		ldr	r3, .L40+8
 409 0018 1B68     		ldr	r3, [r3]
 410 001a 6BB9     		cbnz	r3, .L35
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 411              		.loc 1 995 0
 412 001c 1C4B     		ldr	r3, .L40+4
 413 001e 1B68     		ldr	r3, [r3]
 414 0020 DA6A     		ldr	r2, [r3, #44]
 415 0022 E36A     		ldr	r3, [r4, #44]
 416 0024 9A42     		cmp	r2, r3
 417 0026 07D8     		bhi	.L35
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 418              		.loc 1 997 0
 419 0028 194B     		ldr	r3, .L40+4
 420 002a 1C60     		str	r4, [r3]
 421 002c 04E0     		b	.L35
 422              	.L38:
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423              		.loc 1 974 0
 424 002e 184B     		ldr	r3, .L40+4
 425 0030 1C60     		str	r4, [r3]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 426              		.loc 1 976 0
 427 0032 1368     		ldr	r3, [r2]
 428 0034 012B     		cmp	r3, #1
 429 0036 26D0     		beq	.L39
 430              	.L35:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431              		.loc 1 1010 0
 432 0038 174A     		ldr	r2, .L40+12
 433 003a 1368     		ldr	r3, [r2]
 434 003c 0133     		adds	r3, r3, #1
 435 003e 1360     		str	r3, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436              		.loc 1 1020 0
 437 0040 E36A     		ldr	r3, [r4, #44]
 438 0042 0122     		movs	r2, #1
 439 0044 9A40     		lsls	r2, r2, r3
 440 0046 1549     		ldr	r1, .L40+16
 441 0048 0868     		ldr	r0, [r1]
 442 004a 0243     		orrs	r2, r2, r0
 443 004c 0A60     		str	r2, [r1]
 444 004e 03EB8303 		add	r3, r3, r3, lsl #2
 445 0052 9A00     		lsls	r2, r3, #2
 446 0054 211D     		adds	r1, r4, #4
 447 0056 1248     		ldr	r0, .L40+20
 448 0058 1044     		add	r0, r0, r2
 449 005a FFF7FEFF 		bl	vListInsertEnd
 450              	.LVL40:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 78


 451              		.loc 1 1024 0
 452 005e FFF7FEFF 		bl	vPortExitCritical
 453              	.LVL41:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 454              		.loc 1 1026 0
 455 0062 0C4B     		ldr	r3, .L40+8
 456 0064 1B68     		ldr	r3, [r3]
 457 0066 6BB1     		cbz	r3, .L33
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 458              		.loc 1 1030 0
 459 0068 094B     		ldr	r3, .L40+4
 460 006a 1B68     		ldr	r3, [r3]
 461 006c DA6A     		ldr	r2, [r3, #44]
 462 006e E36A     		ldr	r3, [r4, #44]
 463 0070 9A42     		cmp	r2, r3
 464 0072 07D2     		bcs	.L33
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 465              		.loc 1 1032 0
 466 0074 0B4B     		ldr	r3, .L40+24
 467 0076 4FF08052 		mov	r2, #268435456
 468 007a 1A60     		str	r2, [r3]
 469              		.syntax unified
 470              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 471 007c BFF34F8F 		dsb
 472              	@ 0 "" 2
 473              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 474 0080 BFF36F8F 		isb
 475              	@ 0 "" 2
 476              		.thumb
 477              		.syntax unified
 478              	.L33:
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 479              		.loc 1 1043 0
 480 0084 10BD     		pop	{r4, pc}
 481              	.LVL42:
 482              	.L39:
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 483              		.loc 1 981 0
 484 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 485              	.LVL43:
 486 008a D5E7     		b	.L35
 487              	.L41:
 488              		.align	2
 489              	.L40:
 490 008c 00000000 		.word	.LANCHOR9
 491 0090 00000000 		.word	.LANCHOR10
 492 0094 00000000 		.word	.LANCHOR11
 493 0098 00000000 		.word	.LANCHOR12
 494 009c 00000000 		.word	.LANCHOR13
 495 00a0 00000000 		.word	.LANCHOR4
 496 00a4 04ED00E0 		.word	-536810236
 497              		.cfi_endproc
 498              	.LFE7:
 500              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 501              		.align	1
 502              		.syntax unified
 503              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 79


 504              		.thumb_func
 505              		.fpu softvfp
 507              	prvAddCurrentTaskToDelayedList:
 508              	.LFB52:
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 80


3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 81


3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 82


3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 83


3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 84


3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 85


3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 86


4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 87


4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 88


4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 89


4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 90


4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 91


4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 92


4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 93


4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 94


4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 95


4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 96


4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 97


4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 509              		.loc 1 4693 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              	.LVL44:
 514 0000 70B5     		push	{r4, r5, r6, lr}
 515              	.LCFI4:
 516              		.cfi_def_cfa_offset 16
 517              		.cfi_offset 4, -16
 518              		.cfi_offset 5, -12
 519              		.cfi_offset 6, -8
 520              		.cfi_offset 14, -4
 521 0002 0446     		mov	r4, r0
 522 0004 0E46     		mov	r6, r1
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 523              		.loc 1 4695 0
 524 0006 1D4B     		ldr	r3, .L50
 525 0008 1D68     		ldr	r5, [r3]
 526              	.LVL45:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 527              		.loc 1 4708 0
 528 000a 1D4B     		ldr	r3, .L50+4
 529 000c 1868     		ldr	r0, [r3]
 530              	.LVL46:
 531 000e 0430     		adds	r0, r0, #4
 532 0010 FFF7FEFF 		bl	uxListRemove
 533              	.LVL47:
 534 0014 50B9     		cbnz	r0, .L43
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 98


4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 535              		.loc 1 4712 0
 536 0016 1A4B     		ldr	r3, .L50+4
 537 0018 1B68     		ldr	r3, [r3]
 538 001a DA6A     		ldr	r2, [r3, #44]
 539 001c 0123     		movs	r3, #1
 540 001e 03FA02F2 		lsl	r2, r3, r2
 541 0022 1849     		ldr	r1, .L50+8
 542 0024 0B68     		ldr	r3, [r1]
 543 0026 23EA0203 		bic	r3, r3, r2
 544 002a 0B60     		str	r3, [r1]
 545              	.L43:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 546              		.loc 1 4721 0
 547 002c B4F1FF3F 		cmp	r4, #-1
 548 0030 13D0     		beq	.L48
 549              	.L44:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 550              		.loc 1 4733 0
 551 0032 2C44     		add	r4, r4, r5
 552              	.LVL48:
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 553              		.loc 1 4736 0
 554 0034 124B     		ldr	r3, .L50+4
 555 0036 1B68     		ldr	r3, [r3]
 556 0038 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 557              		.loc 1 4738 0
 558 003a A542     		cmp	r5, r4
 559 003c 16D8     		bhi	.L49
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 99


4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 560              		.loc 1 4748 0
 561 003e 124B     		ldr	r3, .L50+12
 562 0040 1868     		ldr	r0, [r3]
 563 0042 0F4B     		ldr	r3, .L50+4
 564 0044 1968     		ldr	r1, [r3]
 565 0046 0431     		adds	r1, r1, #4
 566 0048 FFF7FEFF 		bl	vListInsert
 567              	.LVL49:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 568              		.loc 1 4753 0
 569 004c 0F4B     		ldr	r3, .L50+16
 570 004e 1B68     		ldr	r3, [r3]
 571 0050 A342     		cmp	r3, r4
 572 0052 12D9     		bls	.L42
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 573              		.loc 1 4755 0
 574 0054 0D4B     		ldr	r3, .L50+16
 575 0056 1C60     		str	r4, [r3]
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 100


4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 576              		.loc 1 4801 0
 577 0058 0FE0     		b	.L42
 578              	.LVL50:
 579              	.L48:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 580              		.loc 1 4721 0 discriminator 1
 581 005a 002E     		cmp	r6, #0
 582 005c E9D0     		beq	.L44
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 583              		.loc 1 4726 0
 584 005e 084B     		ldr	r3, .L50+4
 585 0060 1968     		ldr	r1, [r3]
 586 0062 0431     		adds	r1, r1, #4
 587 0064 0A48     		ldr	r0, .L50+20
 588 0066 FFF7FEFF 		bl	vListInsertEnd
 589              	.LVL51:
 590 006a 06E0     		b	.L42
 591              	.LVL52:
 592              	.L49:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 593              		.loc 1 4742 0
 594 006c 094B     		ldr	r3, .L50+24
 595 006e 1868     		ldr	r0, [r3]
 596 0070 034B     		ldr	r3, .L50+4
 597 0072 1968     		ldr	r1, [r3]
 598 0074 0431     		adds	r1, r1, #4
 599 0076 FFF7FEFF 		bl	vListInsert
 600              	.LVL53:
 601              	.L42:
 602              		.loc 1 4801 0
 603 007a 70BD     		pop	{r4, r5, r6, pc}
 604              	.LVL54:
 605              	.L51:
 606              		.align	2
 607              	.L50:
 608 007c 00000000 		.word	.LANCHOR14
 609 0080 00000000 		.word	.LANCHOR10
 610 0084 00000000 		.word	.LANCHOR13
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 101


 611 0088 00000000 		.word	.LANCHOR2
 612 008c 00000000 		.word	.LANCHOR3
 613 0090 00000000 		.word	.LANCHOR0
 614 0094 00000000 		.word	.LANCHOR8
 615              		.cfi_endproc
 616              	.LFE52:
 618              		.section	.text.xTaskCreate,"ax",%progbits
 619              		.align	1
 620              		.global	xTaskCreate
 621              		.syntax unified
 622              		.thumb
 623              		.thumb_func
 624              		.fpu softvfp
 626              	xTaskCreate:
 627              	.LFB5:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 628              		.loc 1 682 0
 629              		.cfi_startproc
 630              		@ args = 8, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              	.LVL55:
 633 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 634              	.LCFI5:
 635              		.cfi_def_cfa_offset 28
 636              		.cfi_offset 4, -28
 637              		.cfi_offset 5, -24
 638              		.cfi_offset 6, -20
 639              		.cfi_offset 7, -16
 640              		.cfi_offset 8, -12
 641              		.cfi_offset 9, -8
 642              		.cfi_offset 14, -4
 643 0004 85B0     		sub	sp, sp, #20
 644              	.LCFI6:
 645              		.cfi_def_cfa_offset 48
 646 0006 0746     		mov	r7, r0
 647 0008 8846     		mov	r8, r1
 648 000a 1546     		mov	r5, r2
 649 000c 9946     		mov	r9, r3
 650              	.LBB94:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 651              		.loc 1 716 0
 652 000e 9000     		lsls	r0, r2, #2
 653              	.LVL56:
 654 0010 FFF7FEFF 		bl	pvPortMalloc
 655              	.LVL57:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 656              		.loc 1 718 0
 657 0014 F8B1     		cbz	r0, .L56
 658 0016 0646     		mov	r6, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 659              		.loc 1 721 0
 660 0018 5420     		movs	r0, #84
 661              	.LVL58:
 662 001a FFF7FEFF 		bl	pvPortMalloc
 663              	.LVL59:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 664              		.loc 1 723 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 102


 665 001e 0446     		mov	r4, r0
 666 0020 A8B1     		cbz	r0, .L54
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 667              		.loc 1 726 0
 668 0022 0663     		str	r6, [r0, #48]
 669              	.LVL60:
 670              	.L55:
 671              	.LBE94:
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 672              		.loc 1 742 0
 673 0024 D4B1     		cbz	r4, .L57
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 674              		.loc 1 752 0
 675 0026 0023     		movs	r3, #0
 676 0028 0393     		str	r3, [sp, #12]
 677 002a 0294     		str	r4, [sp, #8]
 678 002c 0D9B     		ldr	r3, [sp, #52]
 679 002e 0193     		str	r3, [sp, #4]
 680 0030 0C9B     		ldr	r3, [sp, #48]
 681 0032 0093     		str	r3, [sp]
 682 0034 4B46     		mov	r3, r9
 683 0036 2A46     		mov	r2, r5
 684 0038 4146     		mov	r1, r8
 685 003a 3846     		mov	r0, r7
 686 003c FFF7FEFF 		bl	prvInitialiseNewTask
 687              	.LVL61:
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 688              		.loc 1 753 0
 689 0040 2046     		mov	r0, r4
 690 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 691              	.LVL62:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 692              		.loc 1 754 0
 693 0046 0120     		movs	r0, #1
 694              	.LVL63:
 695              	.L52:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696              		.loc 1 762 0
 697 0048 05B0     		add	sp, sp, #20
 698              	.LCFI7:
 699              		.cfi_remember_state
 700              		.cfi_def_cfa_offset 28
 701              		@ sp needed
 702 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 703              	.LVL64:
 704              	.L54:
 705              	.LCFI8:
 706              		.cfi_restore_state
 707              	.LBB95:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 708              		.loc 1 732 0
 709 004e 3046     		mov	r0, r6
 710              	.LVL65:
 711 0050 FFF7FEFF 		bl	vPortFree
 712              	.LVL66:
 713 0054 E6E7     		b	.L55
 714              	.LVL67:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 103


 715              	.L56:
 716              	.LBE95:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 717              		.loc 1 758 0
 718 0056 4FF0FF30 		mov	r0, #-1
 719              	.LVL68:
 720 005a F5E7     		b	.L52
 721              	.LVL69:
 722              	.L57:
 723 005c 4FF0FF30 		mov	r0, #-1
 724              	.LVL70:
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 725              		.loc 1 761 0
 726 0060 F2E7     		b	.L52
 727              		.cfi_endproc
 728              	.LFE5:
 730              		.section	.text.vTaskDelete,"ax",%progbits
 731              		.align	1
 732              		.global	vTaskDelete
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu softvfp
 738              	vTaskDelete:
 739              	.LFB8:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 740              		.loc 1 1049 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              	.LVL71:
 745 0000 38B5     		push	{r3, r4, r5, lr}
 746              	.LCFI9:
 747              		.cfi_def_cfa_offset 16
 748              		.cfi_offset 3, -16
 749              		.cfi_offset 4, -12
 750              		.cfi_offset 5, -8
 751              		.cfi_offset 14, -4
 752 0002 0446     		mov	r4, r0
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 753              		.loc 1 1052 0
 754 0004 FFF7FEFF 		bl	vPortEnterCritical
 755              	.LVL72:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 756              		.loc 1 1056 0
 757 0008 002C     		cmp	r4, #0
 758 000a 34D0     		beq	.L69
 759              	.LVL73:
 760              	.L60:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 761              		.loc 1 1059 0 discriminator 4
 762 000c 251D     		adds	r5, r4, #4
 763 000e 2846     		mov	r0, r5
 764 0010 FFF7FEFF 		bl	uxListRemove
 765              	.LVL74:
 766 0014 70B9     		cbnz	r0, .L61
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 104


 767              		.loc 1 1061 0
 768 0016 E26A     		ldr	r2, [r4, #44]
 769 0018 02EB8201 		add	r1, r2, r2, lsl #2
 770 001c 8B00     		lsls	r3, r1, #2
 771 001e 2649     		ldr	r1, .L72
 772 0020 CB58     		ldr	r3, [r1, r3]
 773 0022 3BB9     		cbnz	r3, .L61
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 774              		.loc 1 1061 0 is_stmt 0 discriminator 1
 775 0024 0123     		movs	r3, #1
 776 0026 03FA02F2 		lsl	r2, r3, r2
 777 002a 2449     		ldr	r1, .L72+4
 778 002c 0B68     		ldr	r3, [r1]
 779 002e 23EA0203 		bic	r3, r3, r2
 780 0032 0B60     		str	r3, [r1]
 781              	.L61:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 782              		.loc 1 1069 0 is_stmt 1
 783 0034 A36A     		ldr	r3, [r4, #40]
 784 0036 1BB1     		cbz	r3, .L62
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785              		.loc 1 1071 0
 786 0038 04F11800 		add	r0, r4, #24
 787 003c FFF7FEFF 		bl	uxListRemove
 788              	.LVL75:
 789              	.L62:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 790              		.loc 1 1082 0
 791 0040 1F4A     		ldr	r2, .L72+8
 792 0042 1368     		ldr	r3, [r2]
 793 0044 0133     		adds	r3, r3, #1
 794 0046 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 795              		.loc 1 1084 0
 796 0048 1E4B     		ldr	r3, .L72+12
 797 004a 1B68     		ldr	r3, [r3]
 798 004c A342     		cmp	r3, r4
 799 004e 15D0     		beq	.L70
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 800              		.loc 1 1107 0
 801 0050 1D4A     		ldr	r2, .L72+16
 802 0052 1368     		ldr	r3, [r2]
 803 0054 013B     		subs	r3, r3, #1
 804 0056 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 805              		.loc 1 1108 0
 806 0058 2046     		mov	r0, r4
 807 005a FFF7FEFF 		bl	prvDeleteTCB
 808              	.LVL76:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 809              		.loc 1 1112 0
 810 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 811              	.LVL77:
 812              	.L64:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 813              		.loc 1 1117 0
 814 0062 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 105


 815              	.LVL78:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 816              		.loc 1 1121 0
 817 0066 194B     		ldr	r3, .L72+20
 818 0068 1B68     		ldr	r3, [r3]
 819 006a 1BB1     		cbz	r3, .L59
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 820              		.loc 1 1123 0
 821 006c 154B     		ldr	r3, .L72+12
 822 006e 1B68     		ldr	r3, [r3]
 823 0070 A342     		cmp	r3, r4
 824 0072 0CD0     		beq	.L71
 825              	.L59:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826              		.loc 1 1133 0
 827 0074 38BD     		pop	{r3, r4, r5, pc}
 828              	.LVL79:
 829              	.L69:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 830              		.loc 1 1056 0 discriminator 1
 831 0076 134B     		ldr	r3, .L72+12
 832 0078 1C68     		ldr	r4, [r3]
 833              	.LVL80:
 834 007a C7E7     		b	.L60
 835              	.LVL81:
 836              	.L70:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 837              		.loc 1 1091 0
 838 007c 2946     		mov	r1, r5
 839 007e 1448     		ldr	r0, .L72+24
 840 0080 FFF7FEFF 		bl	vListInsertEnd
 841              	.LVL82:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 842              		.loc 1 1096 0
 843 0084 134A     		ldr	r2, .L72+28
 844 0086 1368     		ldr	r3, [r2]
 845 0088 0133     		adds	r3, r3, #1
 846 008a 1360     		str	r3, [r2]
 847 008c E9E7     		b	.L64
 848              	.L71:
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 849              		.loc 1 1125 0
 850 008e 124B     		ldr	r3, .L72+32
 851 0090 1B68     		ldr	r3, [r3]
 852 0092 43B1     		cbz	r3, .L66
 853              	.LBB96:
 854              	.LBB97:
 855              		.loc 2 237 0
 856              		.syntax unified
 857              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 858 0094 4FF05003 			mov r3, #80												
 859 0098 83F31188 		msr basepri, r3											
 860 009c BFF36F8F 		isb														
 861 00a0 BFF34F8F 		dsb														
 862              	
 863              	@ 0 "" 2
 864              	.LVL83:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 106


 865              		.thumb
 866              		.syntax unified
 867              	.L67:
 868 00a4 FEE7     		b	.L67
 869              	.L66:
 870              	.LBE97:
 871              	.LBE96:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 872              		.loc 1 1126 0
 873 00a6 0D4B     		ldr	r3, .L72+36
 874 00a8 4FF08052 		mov	r2, #268435456
 875 00ac 1A60     		str	r2, [r3]
 876              		.syntax unified
 877              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 878 00ae BFF34F8F 		dsb
 879              	@ 0 "" 2
 880              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 881 00b2 BFF36F8F 		isb
 882              	@ 0 "" 2
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 883              		.loc 1 1133 0
 884              		.thumb
 885              		.syntax unified
 886 00b6 DDE7     		b	.L59
 887              	.L73:
 888              		.align	2
 889              	.L72:
 890 00b8 00000000 		.word	.LANCHOR4
 891 00bc 00000000 		.word	.LANCHOR13
 892 00c0 00000000 		.word	.LANCHOR12
 893 00c4 00000000 		.word	.LANCHOR10
 894 00c8 00000000 		.word	.LANCHOR9
 895 00cc 00000000 		.word	.LANCHOR11
 896 00d0 00000000 		.word	.LANCHOR7
 897 00d4 00000000 		.word	.LANCHOR15
 898 00d8 00000000 		.word	.LANCHOR16
 899 00dc 04ED00E0 		.word	-536810236
 900              		.cfi_endproc
 901              	.LFE8:
 903              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 904              		.align	1
 905              		.global	uxTaskPriorityGet
 906              		.syntax unified
 907              		.thumb
 908              		.thumb_func
 909              		.fpu softvfp
 911              	uxTaskPriorityGet:
 912              	.LFB10:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 913              		.loc 1 1341 0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 917              	.LVL84:
 918 0000 10B5     		push	{r4, lr}
 919              	.LCFI10:
 920              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 107


 921              		.cfi_offset 4, -8
 922              		.cfi_offset 14, -4
 923 0002 0446     		mov	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 924              		.loc 1 1345 0
 925 0004 FFF7FEFF 		bl	vPortEnterCritical
 926              	.LVL85:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 927              		.loc 1 1349 0
 928 0008 24B1     		cbz	r4, .L77
 929              	.LVL86:
 930              	.L75:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 931              		.loc 1 1350 0 discriminator 4
 932 000a E46A     		ldr	r4, [r4, #44]
 933              	.LVL87:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 934              		.loc 1 1352 0 discriminator 4
 935 000c FFF7FEFF 		bl	vPortExitCritical
 936              	.LVL88:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 937              		.loc 1 1355 0 discriminator 4
 938 0010 2046     		mov	r0, r4
 939 0012 10BD     		pop	{r4, pc}
 940              	.LVL89:
 941              	.L77:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 942              		.loc 1 1349 0 discriminator 1
 943 0014 014B     		ldr	r3, .L78
 944 0016 1C68     		ldr	r4, [r3]
 945              	.LVL90:
 946 0018 F7E7     		b	.L75
 947              	.L79:
 948 001a 00BF     		.align	2
 949              	.L78:
 950 001c 00000000 		.word	.LANCHOR10
 951              		.cfi_endproc
 952              	.LFE10:
 954              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 955              		.align	1
 956              		.global	uxTaskPriorityGetFromISR
 957              		.syntax unified
 958              		.thumb
 959              		.thumb_func
 960              		.fpu softvfp
 962              	uxTaskPriorityGetFromISR:
 963              	.LFB11:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 964              		.loc 1 1363 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              	.LVL91:
 969 0000 10B5     		push	{r4, lr}
 970              	.LCFI11:
 971              		.cfi_def_cfa_offset 8
 972              		.cfi_offset 4, -8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 108


 973              		.cfi_offset 14, -4
 974 0002 0446     		mov	r4, r0
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 975              		.loc 1 1383 0
 976 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 977              	.LVL92:
 978              	.LBB98:
 979              	.LBB99:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 980              		.loc 2 253 0
 981              		.syntax unified
 982              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 983 0008 EFF31183 			mrs r3, basepri											
 984 000c 4FF05002 		mov r2, #80												
 985 0010 82F31188 		msr basepri, r2											
 986 0014 BFF36F8F 		isb														
 987 0018 BFF34F8F 		dsb														
 988              	
 989              	@ 0 "" 2
 990              		.thumb
 991              		.syntax unified
 992              	.LBE99:
 993              	.LBE98:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 994              		.loc 1 1389 0
 995 001c 1CB1     		cbz	r4, .L83
 996              	.LVL93:
 997              	.L81:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 998              		.loc 1 1390 0 discriminator 4
 999 001e E06A     		ldr	r0, [r4, #44]
 1000              	.LVL94:
 1001              	.LBB100:
 1002              	.LBB101:
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 109


 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1003              		.loc 2 271 0 discriminator 4
 1004              		.syntax unified
 1005              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1006 0020 83F31188 			msr basepri, r3	
 1007              	@ 0 "" 2
 1008              	.LVL95:
 1009              		.thumb
 1010              		.syntax unified
 1011              	.LBE101:
 1012              	.LBE100:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1013              		.loc 1 1395 0 discriminator 4
 1014 0024 10BD     		pop	{r4, pc}
 1015              	.LVL96:
 1016              	.L83:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1017              		.loc 1 1389 0 discriminator 1
 1018 0026 014A     		ldr	r2, .L84
 1019 0028 1468     		ldr	r4, [r2]
 1020              	.LVL97:
 1021 002a F8E7     		b	.L81
 1022              	.L85:
 1023              		.align	2
 1024              	.L84:
 1025 002c 00000000 		.word	.LANCHOR10
 1026              		.cfi_endproc
 1027              	.LFE11:
 1029              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1030              		.align	1
 1031              		.global	vTaskPrioritySet
 1032              		.syntax unified
 1033              		.thumb
 1034              		.thumb_func
 1035              		.fpu softvfp
 1037              	vTaskPrioritySet:
 1038              	.LFB12:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1039              		.loc 1 1403 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043              	.LVL98:
 1044 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1045              	.LCFI12:
 1046              		.cfi_def_cfa_offset 24
 1047              		.cfi_offset 3, -24
 1048              		.cfi_offset 4, -20
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 110


 1049              		.cfi_offset 5, -16
 1050              		.cfi_offset 6, -12
 1051              		.cfi_offset 7, -8
 1052              		.cfi_offset 14, -4
 1053              	.LVL99:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1054              		.loc 1 1408 0
 1055 0002 0629     		cmp	r1, #6
 1056 0004 08D9     		bls	.L87
 1057              	.LBB102:
 1058              	.LBB103:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1059              		.loc 2 237 0
 1060              		.syntax unified
 1061              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1062 0006 4FF05003 			mov r3, #80												
 1063 000a 83F31188 		msr basepri, r3											
 1064 000e BFF36F8F 		isb														
 1065 0012 BFF34F8F 		dsb														
 1066              	
 1067              	@ 0 "" 2
 1068              	.LVL100:
 1069              		.thumb
 1070              		.syntax unified
 1071              	.L88:
 1072 0016 FEE7     		b	.L88
 1073              	.L87:
 1074 0018 0446     		mov	r4, r0
 1075 001a 0D46     		mov	r5, r1
 1076              	.LVL101:
 1077              	.LBE103:
 1078              	.LBE102:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1079              		.loc 1 1420 0
 1080 001c FFF7FEFF 		bl	vPortEnterCritical
 1081              	.LVL102:
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1082              		.loc 1 1424 0
 1083 0020 0CB9     		cbnz	r4, .L89
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1084              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1085 0022 2A4B     		ldr	r3, .L101
 1086 0024 1C68     		ldr	r4, [r3]
 1087              	.LVL103:
 1088              	.L89:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1089              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1090 0026 636C     		ldr	r3, [r4, #68]
 1091              	.LVL104:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1092              		.loc 1 1438 0 discriminator 4
 1093 0028 9D42     		cmp	r5, r3
 1094 002a 40D0     		beq	.L90
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1095              		.loc 1 1442 0
 1096 002c 42D9     		bls	.L91
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 111


 1097              		.loc 1 1444 0
 1098 002e 274A     		ldr	r2, .L101
 1099 0030 1268     		ldr	r2, [r2]
 1100 0032 A242     		cmp	r2, r4
 1101 0034 44D0     		beq	.L97
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1102              		.loc 1 1449 0
 1103 0036 254A     		ldr	r2, .L101
 1104 0038 1268     		ldr	r2, [r2]
 1105 003a D26A     		ldr	r2, [r2, #44]
 1106 003c AA42     		cmp	r2, r5
 1107 003e 41D9     		bls	.L98
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1108              		.loc 1 1406 0
 1109 0040 0026     		movs	r6, #0
 1110              	.L92:
 1111              	.LVL105:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1112              		.loc 1 1482 0
 1113 0042 E76A     		ldr	r7, [r4, #44]
 1114              	.LVL106:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1115              		.loc 1 1488 0
 1116 0044 BB42     		cmp	r3, r7
 1117 0046 00D1     		bne	.L93
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1118              		.loc 1 1490 0
 1119 0048 E562     		str	r5, [r4, #44]
 1120              	.L93:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1121              		.loc 1 1498 0
 1122 004a 6564     		str	r5, [r4, #68]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1123              		.loc 1 1508 0
 1124 004c A369     		ldr	r3, [r4, #24]
 1125              	.LVL107:
 1126 004e 002B     		cmp	r3, #0
 1127 0050 02DB     		blt	.L94
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1128              		.loc 1 1510 0
 1129 0052 C5F10705 		rsb	r5, r5, #7
 1130              	.LVL108:
 1131 0056 A561     		str	r5, [r4, #24]
 1132              	.L94:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1133              		.loc 1 1521 0
 1134 0058 6269     		ldr	r2, [r4, #20]
 1135 005a 1D49     		ldr	r1, .L101+4
 1136 005c 1423     		movs	r3, #20
 1137 005e 03FB0713 		mla	r3, r3, r7, r1
 1138 0062 9A42     		cmp	r2, r3
 1139 0064 1AD1     		bne	.L95
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1140              		.loc 1 1526 0
 1141 0066 251D     		adds	r5, r4, #4
 1142 0068 2846     		mov	r0, r5
 1143 006a FFF7FEFF 		bl	uxListRemove
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 112


 1144              	.LVL109:
 1145 006e 38B9     		cbnz	r0, .L96
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1146              		.loc 1 1531 0
 1147 0070 0123     		movs	r3, #1
 1148 0072 03FA07F2 		lsl	r2, r3, r7
 1149 0076 1749     		ldr	r1, .L101+8
 1150 0078 0B68     		ldr	r3, [r1]
 1151 007a 23EA0203 		bic	r3, r3, r2
 1152 007e 0B60     		str	r3, [r1]
 1153              	.L96:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1154              		.loc 1 1537 0
 1155 0080 E26A     		ldr	r2, [r4, #44]
 1156 0082 0123     		movs	r3, #1
 1157 0084 9340     		lsls	r3, r3, r2
 1158 0086 1349     		ldr	r1, .L101+8
 1159 0088 0868     		ldr	r0, [r1]
 1160 008a 0343     		orrs	r3, r3, r0
 1161 008c 0B60     		str	r3, [r1]
 1162 008e 2946     		mov	r1, r5
 1163 0090 0F4B     		ldr	r3, .L101+4
 1164 0092 1420     		movs	r0, #20
 1165 0094 00FB0230 		mla	r0, r0, r2, r3
 1166 0098 FFF7FEFF 		bl	vListInsertEnd
 1167              	.LVL110:
 1168              	.L95:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1169              		.loc 1 1544 0
 1170 009c 3EB1     		cbz	r6, .L90
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1171              		.loc 1 1546 0
 1172 009e 0E4B     		ldr	r3, .L101+12
 1173 00a0 4FF08052 		mov	r2, #268435456
 1174 00a4 1A60     		str	r2, [r3]
 1175              		.syntax unified
 1176              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1177 00a6 BFF34F8F 		dsb
 1178              	@ 0 "" 2
 1179              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1180 00aa BFF36F8F 		isb
 1181              	@ 0 "" 2
 1182              	.LVL111:
 1183              		.thumb
 1184              		.syntax unified
 1185              	.L90:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1186              		.loc 1 1558 0
 1187 00ae FFF7FEFF 		bl	vPortExitCritical
 1188              	.LVL112:
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1189              		.loc 1 1559 0
 1190 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1191              	.LVL113:
 1192              	.L91:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1193              		.loc 1 1465 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 113


 1194 00b4 054A     		ldr	r2, .L101
 1195 00b6 1268     		ldr	r2, [r2]
 1196 00b8 A242     		cmp	r2, r4
 1197 00ba 05D0     		beq	.L99
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1198              		.loc 1 1406 0
 1199 00bc 0026     		movs	r6, #0
 1200 00be C0E7     		b	.L92
 1201              	.L97:
 1202 00c0 0026     		movs	r6, #0
 1203 00c2 BEE7     		b	.L92
 1204              	.L98:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1205              		.loc 1 1451 0
 1206 00c4 0126     		movs	r6, #1
 1207 00c6 BCE7     		b	.L92
 1208              	.L99:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1209              		.loc 1 1470 0
 1210 00c8 0126     		movs	r6, #1
 1211 00ca BAE7     		b	.L92
 1212              	.L102:
 1213              		.align	2
 1214              	.L101:
 1215 00cc 00000000 		.word	.LANCHOR10
 1216 00d0 00000000 		.word	.LANCHOR4
 1217 00d4 00000000 		.word	.LANCHOR13
 1218 00d8 04ED00E0 		.word	-536810236
 1219              		.cfi_endproc
 1220              	.LFE12:
 1222              		.section	.text.vTaskResume,"ax",%progbits
 1223              		.align	1
 1224              		.global	vTaskResume
 1225              		.syntax unified
 1226              		.thumb
 1227              		.thumb_func
 1228              		.fpu softvfp
 1230              	vTaskResume:
 1231              	.LFB15:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1232              		.loc 1 1703 0
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 0
 1235              		@ frame_needed = 0, uses_anonymous_args = 0
 1236              	.LVL114:
 1237 0000 38B5     		push	{r3, r4, r5, lr}
 1238              	.LCFI13:
 1239              		.cfi_def_cfa_offset 16
 1240              		.cfi_offset 3, -16
 1241              		.cfi_offset 4, -12
 1242              		.cfi_offset 5, -8
 1243              		.cfi_offset 14, -4
 1244              	.LVL115:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1245              		.loc 1 1707 0
 1246 0002 68B1     		cbz	r0, .L109
 1247 0004 0446     		mov	r4, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 114


1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1248              		.loc 1 1711 0 discriminator 1
 1249 0006 1B4B     		ldr	r3, .L111
 1250 0008 1B68     		ldr	r3, [r3]
 1251 000a 8342     		cmp	r3, r0
 1252 000c 07D0     		beq	.L103
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1253              		.loc 1 1713 0
 1254 000e FFF7FEFF 		bl	vPortEnterCritical
 1255              	.LVL116:
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1256              		.loc 1 1715 0
 1257 0012 2046     		mov	r0, r4
 1258 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1259              	.LVL117:
 1260 0018 58B9     		cbnz	r0, .L110
 1261              	.L107:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1262              		.loc 1 1742 0
 1263 001a FFF7FEFF 		bl	vPortExitCritical
 1264              	.LVL118:
 1265              	.L103:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1266              		.loc 1 1748 0
 1267 001e 38BD     		pop	{r3, r4, r5, pc}
 1268              	.LVL119:
 1269              	.L109:
 1270              	.LBB104:
 1271              	.LBB105:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1272              		.loc 2 237 0
 1273              		.syntax unified
 1274              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1275 0020 4FF05003 			mov r3, #80												
 1276 0024 83F31188 		msr basepri, r3											
 1277 0028 BFF36F8F 		isb														
 1278 002c BFF34F8F 		dsb														
 1279              	
 1280              	@ 0 "" 2
 1281              	.LVL120:
 1282              		.thumb
 1283              		.syntax unified
 1284              	.L105:
 1285 0030 FEE7     		b	.L105
 1286              	.LVL121:
 1287              	.L110:
 1288              	.LBE105:
 1289              	.LBE104:
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1290              		.loc 1 1721 0
 1291 0032 251D     		adds	r5, r4, #4
 1292 0034 2846     		mov	r0, r5
 1293 0036 FFF7FEFF 		bl	uxListRemove
 1294              	.LVL122:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1295              		.loc 1 1722 0
 1296 003a E26A     		ldr	r2, [r4, #44]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 115


 1297 003c 0123     		movs	r3, #1
 1298 003e 9340     		lsls	r3, r3, r2
 1299 0040 0D49     		ldr	r1, .L111+4
 1300 0042 0868     		ldr	r0, [r1]
 1301 0044 0343     		orrs	r3, r3, r0
 1302 0046 0B60     		str	r3, [r1]
 1303 0048 2946     		mov	r1, r5
 1304 004a 0C4B     		ldr	r3, .L111+8
 1305 004c 1420     		movs	r0, #20
 1306 004e 00FB0230 		mla	r0, r0, r2, r3
 1307 0052 FFF7FEFF 		bl	vListInsertEnd
 1308              	.LVL123:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1309              		.loc 1 1725 0
 1310 0056 E26A     		ldr	r2, [r4, #44]
 1311 0058 064B     		ldr	r3, .L111
 1312 005a 1B68     		ldr	r3, [r3]
 1313 005c DB6A     		ldr	r3, [r3, #44]
 1314 005e 9A42     		cmp	r2, r3
 1315 0060 DBD3     		bcc	.L107
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1316              		.loc 1 1730 0
 1317 0062 074B     		ldr	r3, .L111+12
 1318 0064 4FF08052 		mov	r2, #268435456
 1319 0068 1A60     		str	r2, [r3]
 1320              		.syntax unified
 1321              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1322 006a BFF34F8F 		dsb
 1323              	@ 0 "" 2
 1324              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1325 006e BFF36F8F 		isb
 1326              	@ 0 "" 2
 1327              		.thumb
 1328              		.syntax unified
 1329 0072 D2E7     		b	.L107
 1330              	.L112:
 1331              		.align	2
 1332              	.L111:
 1333 0074 00000000 		.word	.LANCHOR10
 1334 0078 00000000 		.word	.LANCHOR13
 1335 007c 00000000 		.word	.LANCHOR4
 1336 0080 04ED00E0 		.word	-536810236
 1337              		.cfi_endproc
 1338              	.LFE15:
 1340              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1341              		.align	1
 1342              		.global	xTaskResumeFromISR
 1343              		.syntax unified
 1344              		.thumb
 1345              		.thumb_func
 1346              		.fpu softvfp
 1348              	xTaskResumeFromISR:
 1349              	.LFB16:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1350              		.loc 1 1757 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 116


 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              	.LVL124:
 1355 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1356              	.LCFI14:
 1357              		.cfi_def_cfa_offset 24
 1358              		.cfi_offset 3, -24
 1359              		.cfi_offset 4, -20
 1360              		.cfi_offset 5, -16
 1361              		.cfi_offset 6, -12
 1362              		.cfi_offset 7, -8
 1363              		.cfi_offset 14, -4
 1364              	.LVL125:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1365              		.loc 1 1762 0
 1366 0002 40B9     		cbnz	r0, .L114
 1367              	.LBB106:
 1368              	.LBB107:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1369              		.loc 2 237 0
 1370              		.syntax unified
 1371              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1372 0004 4FF05003 			mov r3, #80												
 1373 0008 83F31188 		msr basepri, r3											
 1374 000c BFF36F8F 		isb														
 1375 0010 BFF34F8F 		dsb														
 1376              	
 1377              	@ 0 "" 2
 1378              	.LVL126:
 1379              		.thumb
 1380              		.syntax unified
 1381              	.L115:
 1382 0014 FEE7     		b	.L115
 1383              	.L114:
 1384 0016 0446     		mov	r4, r0
 1385              	.LBE107:
 1386              	.LBE106:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1387              		.loc 1 1780 0
 1388 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1389              	.LVL127:
 1390              	.LBB108:
 1391              	.LBB109:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1392              		.loc 2 253 0
 1393              		.syntax unified
 1394              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1395 001c EFF31187 			mrs r7, basepri											
 1396 0020 4FF05003 		mov r3, #80												
 1397 0024 83F31188 		msr basepri, r3											
 1398 0028 BFF36F8F 		isb														
 1399 002c BFF34F8F 		dsb														
 1400              	
 1401              	@ 0 "" 2
 1402              		.thumb
 1403              		.syntax unified
 1404              	.LBE109:
 1405              	.LBE108:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 117


1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1406              		.loc 1 1784 0
 1407 0030 2046     		mov	r0, r4
 1408 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1409              	.LVL128:
 1410 0036 40B3     		cbz	r0, .L119
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1411              		.loc 1 1789 0
 1412 0038 154B     		ldr	r3, .L122
 1413 003a 1B68     		ldr	r3, [r3]
 1414 003c F3B9     		cbnz	r3, .L117
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1415              		.loc 1 1793 0
 1416 003e E26A     		ldr	r2, [r4, #44]
 1417 0040 144B     		ldr	r3, .L122+4
 1418 0042 1B68     		ldr	r3, [r3]
 1419 0044 DB6A     		ldr	r3, [r3, #44]
 1420 0046 9A42     		cmp	r2, r3
 1421 0048 16D2     		bcs	.L120
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1422              		.loc 1 1758 0
 1423 004a 0025     		movs	r5, #0
 1424              	.L118:
 1425              	.LVL129:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1426              		.loc 1 1802 0
 1427 004c 261D     		adds	r6, r4, #4
 1428 004e 3046     		mov	r0, r6
 1429 0050 FFF7FEFF 		bl	uxListRemove
 1430              	.LVL130:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1431              		.loc 1 1803 0
 1432 0054 E26A     		ldr	r2, [r4, #44]
 1433 0056 0123     		movs	r3, #1
 1434 0058 9340     		lsls	r3, r3, r2
 1435 005a 0F49     		ldr	r1, .L122+8
 1436 005c 0868     		ldr	r0, [r1]
 1437 005e 0343     		orrs	r3, r3, r0
 1438 0060 0B60     		str	r3, [r1]
 1439 0062 3146     		mov	r1, r6
 1440 0064 0D4B     		ldr	r3, .L122+12
 1441 0066 1420     		movs	r0, #20
 1442 0068 00FB0230 		mla	r0, r0, r2, r3
 1443 006c FFF7FEFF 		bl	vListInsertEnd
 1444              	.LVL131:
 1445              	.L116:
 1446              	.LBB110:
 1447              	.LBB111:
 1448              		.loc 2 271 0
 1449              		.syntax unified
 1450              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1451 0070 87F31188 			msr basepri, r7	
 1452              	@ 0 "" 2
 1453              	.LVL132:
 1454              		.thumb
 1455              		.syntax unified
 1456              	.LBE111:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 118


 1457              	.LBE110:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1458              		.loc 1 1821 0
 1459 0074 2846     		mov	r0, r5
 1460 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1461              	.LVL133:
 1462              	.L120:
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1463              		.loc 1 1795 0
 1464 0078 0125     		movs	r5, #1
 1465 007a E7E7     		b	.L118
 1466              	.L117:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1467              		.loc 1 1810 0
 1468 007c 04F11801 		add	r1, r4, #24
 1469 0080 0748     		ldr	r0, .L122+16
 1470 0082 FFF7FEFF 		bl	vListInsertEnd
 1471              	.LVL134:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1472              		.loc 1 1758 0
 1473 0086 0025     		movs	r5, #0
 1474 0088 F2E7     		b	.L116
 1475              	.L119:
 1476 008a 0025     		movs	r5, #0
 1477 008c F0E7     		b	.L116
 1478              	.L123:
 1479 008e 00BF     		.align	2
 1480              	.L122:
 1481 0090 00000000 		.word	.LANCHOR16
 1482 0094 00000000 		.word	.LANCHOR10
 1483 0098 00000000 		.word	.LANCHOR13
 1484 009c 00000000 		.word	.LANCHOR4
 1485 00a0 00000000 		.word	.LANCHOR1
 1486              		.cfi_endproc
 1487              	.LFE16:
 1489              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1490              		.align	1
 1491              		.global	vTaskStartScheduler
 1492              		.syntax unified
 1493              		.thumb
 1494              		.thumb_func
 1495              		.fpu softvfp
 1497              	vTaskStartScheduler:
 1498              	.LFB17:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1499              		.loc 1 1827 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503 0000 00B5     		push	{lr}
 1504              	.LCFI15:
 1505              		.cfi_def_cfa_offset 4
 1506              		.cfi_offset 14, -4
 1507 0002 83B0     		sub	sp, sp, #12
 1508              	.LCFI16:
 1509              		.cfi_def_cfa_offset 16
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 119


 1510              		.loc 1 1860 0
 1511 0004 194B     		ldr	r3, .L133
 1512 0006 0193     		str	r3, [sp, #4]
 1513 0008 0023     		movs	r3, #0
 1514 000a 0093     		str	r3, [sp]
 1515 000c 8022     		movs	r2, #128
 1516 000e 1849     		ldr	r1, .L133+4
 1517 0010 1848     		ldr	r0, .L133+8
 1518 0012 FFF7FEFF 		bl	xTaskCreate
 1519              	.LVL135:
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1520              		.loc 1 1870 0
 1521 0016 0128     		cmp	r0, #1
 1522 0018 07D0     		beq	.L130
 1523              	.L125:
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1524              		.loc 1 1881 0
 1525 001a 0128     		cmp	r0, #1
 1526 001c 08D0     		beq	.L131
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1527              		.loc 1 1924 0
 1528 001e B0F1FF3F 		cmp	r0, #-1
 1529 0022 1AD0     		beq	.L132
 1530              	.LVL136:
 1531              	.L124:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1532              		.loc 1 1930 0
 1533 0024 03B0     		add	sp, sp, #12
 1534              	.LCFI17:
 1535              		.cfi_remember_state
 1536              		.cfi_def_cfa_offset 4
 1537              		@ sp needed
 1538 0026 5DF804FB 		ldr	pc, [sp], #4
 1539              	.LVL137:
 1540              	.L130:
 1541              	.LCFI18:
 1542              		.cfi_restore_state
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1543              		.loc 1 1872 0
 1544 002a FFF7FEFF 		bl	xTimerCreateTimerTask
 1545              	.LVL138:
 1546 002e F4E7     		b	.L125
 1547              	.L131:
 1548              	.LBB112:
 1549              	.LBB113:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1550              		.loc 2 237 0
 1551              		.syntax unified
 1552              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1553 0030 4FF05003 			mov r3, #80												
 1554 0034 83F31188 		msr basepri, r3											
 1555 0038 BFF36F8F 		isb														
 1556 003c BFF34F8F 		dsb														
 1557              	
 1558              	@ 0 "" 2
 1559              		.thumb
 1560              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 120


 1561              	.LBE113:
 1562              	.LBE112:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1563              		.loc 1 1898 0
 1564 0040 0D4B     		ldr	r3, .L133+12
 1565 0042 4FF0FF32 		mov	r2, #-1
 1566 0046 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1567              		.loc 1 1899 0
 1568 0048 0C4B     		ldr	r3, .L133+16
 1569 004a 0122     		movs	r2, #1
 1570 004c 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1571              		.loc 1 1900 0
 1572 004e 0C4B     		ldr	r3, .L133+20
 1573 0050 0022     		movs	r2, #0
 1574 0052 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1575              		.loc 1 1909 0
 1576 0054 FFF7FEFF 		bl	xPortStartScheduler
 1577              	.LVL139:
 1578 0058 E4E7     		b	.L124
 1579              	.LVL140:
 1580              	.L132:
 1581              	.LBB114:
 1582              	.LBB115:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1583              		.loc 2 237 0
 1584              		.syntax unified
 1585              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1586 005a 4FF05003 			mov r3, #80												
 1587 005e 83F31188 		msr basepri, r3											
 1588 0062 BFF36F8F 		isb														
 1589 0066 BFF34F8F 		dsb														
 1590              	
 1591              	@ 0 "" 2
 1592              	.LVL141:
 1593              		.thumb
 1594              		.syntax unified
 1595              	.L128:
 1596 006a FEE7     		b	.L128
 1597              	.L134:
 1598              		.align	2
 1599              	.L133:
 1600 006c 00000000 		.word	.LANCHOR17
 1601 0070 00000000 		.word	.LC0
 1602 0074 00000000 		.word	prvIdleTask
 1603 0078 00000000 		.word	.LANCHOR3
 1604 007c 00000000 		.word	.LANCHOR11
 1605 0080 00000000 		.word	.LANCHOR14
 1606              	.LBE115:
 1607              	.LBE114:
 1608              		.cfi_endproc
 1609              	.LFE17:
 1611              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1612              		.align	1
 1613              		.global	vTaskEndScheduler
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 121


 1614              		.syntax unified
 1615              		.thumb
 1616              		.thumb_func
 1617              		.fpu softvfp
 1619              	vTaskEndScheduler:
 1620              	.LFB18:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1621              		.loc 1 1934 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 0
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 1625 0000 08B5     		push	{r3, lr}
 1626              	.LCFI19:
 1627              		.cfi_def_cfa_offset 8
 1628              		.cfi_offset 3, -8
 1629              		.cfi_offset 14, -4
 1630              	.LBB116:
 1631              	.LBB117:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1632              		.loc 2 237 0
 1633              		.syntax unified
 1634              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1635 0002 4FF05003 			mov r3, #80												
 1636 0006 83F31188 		msr basepri, r3											
 1637 000a BFF36F8F 		isb														
 1638 000e BFF34F8F 		dsb														
 1639              	
 1640              	@ 0 "" 2
 1641              		.thumb
 1642              		.syntax unified
 1643              	.LBE117:
 1644              	.LBE116:
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1645              		.loc 1 1939 0
 1646 0012 034B     		ldr	r3, .L137
 1647 0014 0022     		movs	r2, #0
 1648 0016 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1649              		.loc 1 1940 0
 1650 0018 FFF7FEFF 		bl	vPortEndScheduler
 1651              	.LVL142:
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1652              		.loc 1 1941 0
 1653 001c 08BD     		pop	{r3, pc}
 1654              	.L138:
 1655 001e 00BF     		.align	2
 1656              	.L137:
 1657 0020 00000000 		.word	.LANCHOR11
 1658              		.cfi_endproc
 1659              	.LFE18:
 1661              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1662              		.align	1
 1663              		.global	vTaskSuspendAll
 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1667              		.fpu softvfp
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 122


 1669              	vTaskSuspendAll:
 1670              	.LFB19:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1671              		.loc 1 1945 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1676              		.loc 1 1950 0
 1677 0000 024A     		ldr	r2, .L140
 1678 0002 1368     		ldr	r3, [r2]
 1679 0004 0133     		adds	r3, r3, #1
 1680 0006 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1681              		.loc 1 1951 0
 1682 0008 7047     		bx	lr
 1683              	.L141:
 1684 000a 00BF     		.align	2
 1685              	.L140:
 1686 000c 00000000 		.word	.LANCHOR16
 1687              		.cfi_endproc
 1688              	.LFE19:
 1690              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1691              		.align	1
 1692              		.global	xTaskGetTickCount
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
 1696              		.fpu softvfp
 1698              	xTaskGetTickCount:
 1699              	.LFB21:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1700              		.loc 1 2128 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1705              		.loc 1 2134 0
 1706 0000 014B     		ldr	r3, .L143
 1707 0002 1868     		ldr	r0, [r3]
 1708              	.LVL143:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1709              		.loc 1 2139 0
 1710 0004 7047     		bx	lr
 1711              	.L144:
 1712 0006 00BF     		.align	2
 1713              	.L143:
 1714 0008 00000000 		.word	.LANCHOR14
 1715              		.cfi_endproc
 1716              	.LFE21:
 1718              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1719              		.align	1
 1720              		.global	xTaskGetTickCountFromISR
 1721              		.syntax unified
 1722              		.thumb
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 123


 1723              		.thumb_func
 1724              		.fpu softvfp
 1726              	xTaskGetTickCountFromISR:
 1727              	.LFB22:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1728              		.loc 1 2143 0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 0
 1731              		@ frame_needed = 0, uses_anonymous_args = 0
 1732 0000 08B5     		push	{r3, lr}
 1733              	.LCFI20:
 1734              		.cfi_def_cfa_offset 8
 1735              		.cfi_offset 3, -8
 1736              		.cfi_offset 14, -4
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1737              		.loc 1 2161 0
 1738 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1739              	.LVL144:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1740              		.loc 1 2165 0
 1741 0006 014B     		ldr	r3, .L147
 1742 0008 1868     		ldr	r0, [r3]
 1743              	.LVL145:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1744              		.loc 1 2170 0
 1745 000a 08BD     		pop	{r3, pc}
 1746              	.L148:
 1747              		.align	2
 1748              	.L147:
 1749 000c 00000000 		.word	.LANCHOR14
 1750              		.cfi_endproc
 1751              	.LFE22:
 1753              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1754              		.align	1
 1755              		.global	uxTaskGetNumberOfTasks
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1759              		.fpu softvfp
 1761              	uxTaskGetNumberOfTasks:
 1762              	.LFB23:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1763              		.loc 1 2174 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1768              		.loc 1 2177 0
 1769 0000 014B     		ldr	r3, .L150
 1770 0002 1868     		ldr	r0, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1771              		.loc 1 2178 0
 1772 0004 7047     		bx	lr
 1773              	.L151:
 1774 0006 00BF     		.align	2
 1775              	.L150:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 124


 1776 0008 00000000 		.word	.LANCHOR9
 1777              		.cfi_endproc
 1778              	.LFE23:
 1780              		.section	.text.pcTaskGetName,"ax",%progbits
 1781              		.align	1
 1782              		.global	pcTaskGetName
 1783              		.syntax unified
 1784              		.thumb
 1785              		.thumb_func
 1786              		.fpu softvfp
 1788              	pcTaskGetName:
 1789              	.LFB24:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1790              		.loc 1 2182 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794              		@ link register save eliminated.
 1795              	.LVL146:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1796              		.loc 1 2187 0
 1797 0000 0346     		mov	r3, r0
 1798 0002 18B1     		cbz	r0, .L156
 1799              	.LVL147:
 1800              	.L153:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1801              		.loc 1 2188 0 discriminator 4
 1802 0004 2BB1     		cbz	r3, .L157
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1803              		.loc 1 2190 0
 1804 0006 03F13400 		add	r0, r3, #52
 1805 000a 7047     		bx	lr
 1806              	.LVL148:
 1807              	.L156:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1808              		.loc 1 2187 0 discriminator 1
 1809 000c 054B     		ldr	r3, .L158
 1810 000e 1B68     		ldr	r3, [r3]
 1811              	.LVL149:
 1812 0010 F8E7     		b	.L153
 1813              	.LVL150:
 1814              	.L157:
 1815              	.LBB118:
 1816              	.LBB119:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1817              		.loc 2 237 0
 1818              		.syntax unified
 1819              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1820 0012 4FF05003 			mov r3, #80												
 1821 0016 83F31188 		msr basepri, r3											
 1822 001a BFF36F8F 		isb														
 1823 001e BFF34F8F 		dsb														
 1824              	
 1825              	@ 0 "" 2
 1826              	.LVL151:
 1827              		.thumb
 1828              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 125


 1829              	.L155:
 1830 0022 FEE7     		b	.L155
 1831              	.L159:
 1832              		.align	2
 1833              	.L158:
 1834 0024 00000000 		.word	.LANCHOR10
 1835              	.LBE119:
 1836              	.LBE118:
 1837              		.cfi_endproc
 1838              	.LFE24:
 1840              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1841              		.align	1
 1842              		.global	xTaskIncrementTick
 1843              		.syntax unified
 1844              		.thumb
 1845              		.thumb_func
 1846              		.fpu softvfp
 1848              	xTaskIncrementTick:
 1849              	.LFB25:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1850              		.loc 1 2500 0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 0
 1853              		@ frame_needed = 0, uses_anonymous_args = 0
 1854 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1855              	.LCFI21:
 1856              		.cfi_def_cfa_offset 24
 1857              		.cfi_offset 3, -24
 1858              		.cfi_offset 4, -20
 1859              		.cfi_offset 5, -16
 1860              		.cfi_offset 6, -12
 1861              		.cfi_offset 7, -8
 1862              		.cfi_offset 14, -4
 1863              	.LVL152:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1864              		.loc 1 2509 0
 1865 0002 3A4B     		ldr	r3, .L181
 1866 0004 1B68     		ldr	r3, [r3]
 1867 0006 002B     		cmp	r3, #0
 1868 0008 64D1     		bne	.L161
 1869              	.LBB120:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1870              		.loc 1 2513 0
 1871 000a 394B     		ldr	r3, .L181+4
 1872 000c 1D68     		ldr	r5, [r3]
 1873 000e 0135     		adds	r5, r5, #1
 1874              	.LVL153:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1875              		.loc 1 2517 0
 1876 0010 1D60     		str	r5, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1877              		.loc 1 2519 0
 1878 0012 C5B9     		cbnz	r5, .L162
 1879              	.LBB121:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1880              		.loc 1 2521 0
 1881 0014 374B     		ldr	r3, .L181+8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 126


 1882 0016 1B68     		ldr	r3, [r3]
 1883 0018 1B68     		ldr	r3, [r3]
 1884 001a 43B1     		cbz	r3, .L163
 1885              	.LBB122:
 1886              	.LBB123:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1887              		.loc 2 237 0
 1888              		.syntax unified
 1889              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1890 001c 4FF05003 			mov r3, #80												
 1891 0020 83F31188 		msr basepri, r3											
 1892 0024 BFF36F8F 		isb														
 1893 0028 BFF34F8F 		dsb														
 1894              	
 1895              	@ 0 "" 2
 1896              	.LVL154:
 1897              		.thumb
 1898              		.syntax unified
 1899              	.L164:
 1900 002c FEE7     		b	.L164
 1901              	.L163:
 1902              	.LBE123:
 1903              	.LBE122:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1904              		.loc 1 2521 0 discriminator 2
 1905 002e 314A     		ldr	r2, .L181+8
 1906 0030 1168     		ldr	r1, [r2]
 1907              	.LVL155:
 1908 0032 314B     		ldr	r3, .L181+12
 1909 0034 1868     		ldr	r0, [r3]
 1910 0036 1060     		str	r0, [r2]
 1911 0038 1960     		str	r1, [r3]
 1912 003a 304A     		ldr	r2, .L181+16
 1913 003c 1368     		ldr	r3, [r2]
 1914 003e 0133     		adds	r3, r3, #1
 1915 0040 1360     		str	r3, [r2]
 1916 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1917              	.LVL156:
 1918              	.L162:
 1919              	.LBE121:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1920              		.loc 1 2532 0
 1921 0046 2E4B     		ldr	r3, .L181+20
 1922 0048 1B68     		ldr	r3, [r3]
 1923 004a AB42     		cmp	r3, r5
 1924 004c 38D9     		bls	.L174
 1925              	.LBE120:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1926              		.loc 1 2503 0
 1927 004e 0024     		movs	r4, #0
 1928              	.LVL157:
 1929              	.L166:
 1930              	.LBB124:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1931              		.loc 1 2615 0
 1932 0050 2C4B     		ldr	r3, .L181+24
 1933 0052 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 127


 1934 0054 DB6A     		ldr	r3, [r3, #44]
 1935 0056 03EB8303 		add	r3, r3, r3, lsl #2
 1936 005a 9A00     		lsls	r2, r3, #2
 1937 005c 2A4B     		ldr	r3, .L181+28
 1938 005e 9B58     		ldr	r3, [r3, r2]
 1939 0060 012B     		cmp	r3, #1
 1940 0062 3CD9     		bls	.L172
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1941              		.loc 1 2617 0
 1942 0064 0124     		movs	r4, #1
 1943              	.LVL158:
 1944 0066 3AE0     		b	.L172
 1945              	.LVL159:
 1946              	.L175:
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1947              		.loc 1 2598 0
 1948 0068 0124     		movs	r4, #1
 1949              	.LVL160:
 1950              	.L165:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1951              		.loc 1 2536 0
 1952 006a 224B     		ldr	r3, .L181+8
 1953 006c 1B68     		ldr	r3, [r3]
 1954 006e 1B68     		ldr	r3, [r3]
 1955 0070 43B3     		cbz	r3, .L179
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1956              		.loc 1 2552 0
 1957 0072 204B     		ldr	r3, .L181+8
 1958 0074 1B68     		ldr	r3, [r3]
 1959 0076 DB68     		ldr	r3, [r3, #12]
 1960 0078 DE68     		ldr	r6, [r3, #12]
 1961              	.LVL161:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1962              		.loc 1 2553 0
 1963 007a 7368     		ldr	r3, [r6, #4]
 1964              	.LVL162:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1965              		.loc 1 2555 0
 1966 007c 9D42     		cmp	r5, r3
 1967 007e 26D3     		bcc	.L180
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1968              		.loc 1 2571 0
 1969 0080 371D     		adds	r7, r6, #4
 1970 0082 3846     		mov	r0, r7
 1971 0084 FFF7FEFF 		bl	uxListRemove
 1972              	.LVL163:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1973              		.loc 1 2575 0
 1974 0088 B36A     		ldr	r3, [r6, #40]
 1975 008a 1BB1     		cbz	r3, .L169
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1976              		.loc 1 2577 0
 1977 008c 06F11800 		add	r0, r6, #24
 1978 0090 FFF7FEFF 		bl	uxListRemove
 1979              	.LVL164:
 1980              	.L169:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 128


 1981              		.loc 1 2586 0
 1982 0094 F36A     		ldr	r3, [r6, #44]
 1983 0096 0122     		movs	r2, #1
 1984 0098 9A40     		lsls	r2, r2, r3
 1985 009a 1C49     		ldr	r1, .L181+32
 1986 009c 0868     		ldr	r0, [r1]
 1987 009e 0243     		orrs	r2, r2, r0
 1988 00a0 0A60     		str	r2, [r1]
 1989 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 1990 00a6 9A00     		lsls	r2, r3, #2
 1991 00a8 3946     		mov	r1, r7
 1992 00aa 1748     		ldr	r0, .L181+28
 1993 00ac 1044     		add	r0, r0, r2
 1994 00ae FFF7FEFF 		bl	vListInsertEnd
 1995              	.LVL165:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1996              		.loc 1 2596 0
 1997 00b2 F26A     		ldr	r2, [r6, #44]
 1998 00b4 134B     		ldr	r3, .L181+24
 1999 00b6 1B68     		ldr	r3, [r3]
 2000 00b8 DB6A     		ldr	r3, [r3, #44]
 2001 00ba 9A42     		cmp	r2, r3
 2002 00bc D4D2     		bcs	.L175
 2003 00be D4E7     		b	.L165
 2004              	.LVL166:
 2005              	.L174:
 2006              	.LBE124:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2007              		.loc 1 2503 0
 2008 00c0 0024     		movs	r4, #0
 2009 00c2 D2E7     		b	.L165
 2010              	.LVL167:
 2011              	.L179:
 2012              	.LBB125:
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2013              		.loc 1 2543 0
 2014 00c4 0E4B     		ldr	r3, .L181+20
 2015 00c6 4FF0FF32 		mov	r2, #-1
 2016 00ca 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2017              		.loc 1 2544 0
 2018 00cc C0E7     		b	.L166
 2019              	.LVL168:
 2020              	.L180:
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2021              		.loc 1 2562 0
 2022 00ce 0C4A     		ldr	r2, .L181+20
 2023 00d0 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2024              		.loc 1 2563 0
 2025 00d2 BDE7     		b	.L166
 2026              	.LVL169:
 2027              	.L161:
 2028              	.LBE125:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2029              		.loc 1 2643 0
 2030 00d4 0E4A     		ldr	r2, .L181+36
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 129


 2031 00d6 1368     		ldr	r3, [r2]
 2032 00d8 0133     		adds	r3, r3, #1
 2033 00da 1360     		str	r3, [r2]
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2034              		.loc 1 2503 0
 2035 00dc 0024     		movs	r4, #0
 2036              	.LVL170:
 2037              	.L172:
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2038              		.loc 1 2656 0
 2039 00de 0D4B     		ldr	r3, .L181+40
 2040 00e0 1B68     		ldr	r3, [r3]
 2041 00e2 03B1     		cbz	r3, .L160
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2042              		.loc 1 2658 0
 2043 00e4 0124     		movs	r4, #1
 2044              	.LVL171:
 2045              	.L160:
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2046              		.loc 1 2668 0
 2047 00e6 2046     		mov	r0, r4
 2048 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2049              	.L182:
 2050 00ea 00BF     		.align	2
 2051              	.L181:
 2052 00ec 00000000 		.word	.LANCHOR16
 2053 00f0 00000000 		.word	.LANCHOR14
 2054 00f4 00000000 		.word	.LANCHOR2
 2055 00f8 00000000 		.word	.LANCHOR8
 2056 00fc 00000000 		.word	.LANCHOR18
 2057 0100 00000000 		.word	.LANCHOR3
 2058 0104 00000000 		.word	.LANCHOR10
 2059 0108 00000000 		.word	.LANCHOR4
 2060 010c 00000000 		.word	.LANCHOR13
 2061 0110 00000000 		.word	.LANCHOR19
 2062 0114 00000000 		.word	.LANCHOR20
 2063              		.cfi_endproc
 2064              	.LFE25:
 2066              		.section	.text.xTaskResumeAll,"ax",%progbits
 2067              		.align	1
 2068              		.global	xTaskResumeAll
 2069              		.syntax unified
 2070              		.thumb
 2071              		.thumb_func
 2072              		.fpu softvfp
 2074              	xTaskResumeAll:
 2075              	.LFB20:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2076              		.loc 1 2018 0
 2077              		.cfi_startproc
 2078              		@ args = 0, pretend = 0, frame = 0
 2079              		@ frame_needed = 0, uses_anonymous_args = 0
 2080 0000 38B5     		push	{r3, r4, r5, lr}
 2081              	.LCFI22:
 2082              		.cfi_def_cfa_offset 16
 2083              		.cfi_offset 3, -16
 2084              		.cfi_offset 4, -12
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 130


 2085              		.cfi_offset 5, -8
 2086              		.cfi_offset 14, -4
 2087              	.LVL172:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2088              		.loc 1 2024 0
 2089 0002 334B     		ldr	r3, .L199
 2090 0004 1B68     		ldr	r3, [r3]
 2091 0006 43B9     		cbnz	r3, .L184
 2092              	.LBB126:
 2093              	.LBB127:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2094              		.loc 2 237 0
 2095              		.syntax unified
 2096              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2097 0008 4FF05003 			mov r3, #80												
 2098 000c 83F31188 		msr basepri, r3											
 2099 0010 BFF36F8F 		isb														
 2100 0014 BFF34F8F 		dsb														
 2101              	
 2102              	@ 0 "" 2
 2103              	.LVL173:
 2104              		.thumb
 2105              		.syntax unified
 2106              	.L185:
 2107 0018 FEE7     		b	.L185
 2108              	.L184:
 2109              	.LBE127:
 2110              	.LBE126:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2111              		.loc 1 2031 0
 2112 001a FFF7FEFF 		bl	vPortEnterCritical
 2113              	.LVL174:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2114              		.loc 1 2033 0
 2115 001e 2C4B     		ldr	r3, .L199
 2116 0020 1A68     		ldr	r2, [r3]
 2117 0022 013A     		subs	r2, r2, #1
 2118 0024 1A60     		str	r2, [r3]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2119              		.loc 1 2035 0
 2120 0026 1B68     		ldr	r3, [r3]
 2121 0028 002B     		cmp	r3, #0
 2122 002a 4DD1     		bne	.L194
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2123              		.loc 1 2037 0
 2124 002c 294B     		ldr	r3, .L199+4
 2125 002e 1B68     		ldr	r3, [r3]
 2126 0030 23B9     		cbnz	r3, .L195
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2127              		.loc 1 2020 0
 2128 0032 0024     		movs	r4, #0
 2129              	.LVL175:
 2130              	.L186:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2131              		.loc 1 2121 0
 2132 0034 FFF7FEFF 		bl	vPortExitCritical
 2133              	.LVL176:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 131


2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2134              		.loc 1 2124 0
 2135 0038 2046     		mov	r0, r4
 2136 003a 38BD     		pop	{r3, r4, r5, pc}
 2137              	.LVL177:
 2138              	.L195:
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2139              		.loc 1 2019 0
 2140 003c 0024     		movs	r4, #0
 2141              	.LVL178:
 2142              	.L187:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2143              		.loc 1 2041 0
 2144 003e 264B     		ldr	r3, .L199+8
 2145 0040 1B68     		ldr	r3, [r3]
 2146 0042 1BB3     		cbz	r3, .L198
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2147              		.loc 1 2043 0
 2148 0044 244B     		ldr	r3, .L199+8
 2149 0046 DB68     		ldr	r3, [r3, #12]
 2150 0048 DC68     		ldr	r4, [r3, #12]
 2151              	.LVL179:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2152              		.loc 1 2044 0
 2153 004a 04F11800 		add	r0, r4, #24
 2154 004e FFF7FEFF 		bl	uxListRemove
 2155              	.LVL180:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2156              		.loc 1 2045 0
 2157 0052 251D     		adds	r5, r4, #4
 2158 0054 2846     		mov	r0, r5
 2159 0056 FFF7FEFF 		bl	uxListRemove
 2160              	.LVL181:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2161              		.loc 1 2046 0
 2162 005a E36A     		ldr	r3, [r4, #44]
 2163 005c 0122     		movs	r2, #1
 2164 005e 9A40     		lsls	r2, r2, r3
 2165 0060 1E49     		ldr	r1, .L199+12
 2166 0062 0868     		ldr	r0, [r1]
 2167 0064 0243     		orrs	r2, r2, r0
 2168 0066 0A60     		str	r2, [r1]
 2169 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2170 006c 9A00     		lsls	r2, r3, #2
 2171 006e 2946     		mov	r1, r5
 2172 0070 1B48     		ldr	r0, .L199+16
 2173 0072 1044     		add	r0, r0, r2
 2174 0074 FFF7FEFF 		bl	vListInsertEnd
 2175              	.LVL182:
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2176              		.loc 1 2050 0
 2177 0078 E26A     		ldr	r2, [r4, #44]
 2178 007a 1A4B     		ldr	r3, .L199+20
 2179 007c 1B68     		ldr	r3, [r3]
 2180 007e DB6A     		ldr	r3, [r3, #44]
 2181 0080 9A42     		cmp	r2, r3
 2182 0082 DCD3     		bcc	.L187
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 132


2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2183              		.loc 1 2052 0
 2184 0084 184B     		ldr	r3, .L199+24
 2185 0086 0122     		movs	r2, #1
 2186 0088 1A60     		str	r2, [r3]
 2187 008a D8E7     		b	.L187
 2188              	.L198:
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2189              		.loc 1 2060 0
 2190 008c 0CB1     		cbz	r4, .L190
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2191              		.loc 1 2068 0
 2192 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2193              	.LVL183:
 2194              	.L190:
 2195              	.LBB128:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2196              		.loc 1 2076 0
 2197 0092 164B     		ldr	r3, .L199+28
 2198 0094 1C68     		ldr	r4, [r3]
 2199              	.LVL184:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2200              		.loc 1 2078 0
 2201 0096 54B1     		cbz	r4, .L191
 2202              	.L193:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2203              		.loc 1 2082 0
 2204 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2205              	.LVL185:
 2206 009c 10B1     		cbz	r0, .L192
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2207              		.loc 1 2084 0
 2208 009e 124B     		ldr	r3, .L199+24
 2209 00a0 0122     		movs	r2, #1
 2210 00a2 1A60     		str	r2, [r3]
 2211              	.L192:
 2212              	.LVL186:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2213              		.loc 1 2091 0
 2214 00a4 013C     		subs	r4, r4, #1
 2215              	.LVL187:
 2216 00a6 F7D1     		bne	.L193
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2217              		.loc 1 2093 0
 2218 00a8 104B     		ldr	r3, .L199+28
 2219 00aa 0022     		movs	r2, #0
 2220 00ac 1A60     		str	r2, [r3]
 2221              	.L191:
 2222              	.LBE128:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2223              		.loc 1 2101 0
 2224 00ae 0E4B     		ldr	r3, .L199+24
 2225 00b0 1B68     		ldr	r3, [r3]
 2226 00b2 5BB1     		cbz	r3, .L196
 2227              	.LVL188:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2228              		.loc 1 2108 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 133


 2229 00b4 0E4B     		ldr	r3, .L199+32
 2230 00b6 4FF08052 		mov	r2, #268435456
 2231 00ba 1A60     		str	r2, [r3]
 2232              		.syntax unified
 2233              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2234 00bc BFF34F8F 		dsb
 2235              	@ 0 "" 2
 2236              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2237 00c0 BFF36F8F 		isb
 2238              	@ 0 "" 2
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2239              		.loc 1 2105 0
 2240              		.thumb
 2241              		.syntax unified
 2242 00c4 0124     		movs	r4, #1
 2243              	.LVL189:
 2244 00c6 B5E7     		b	.L186
 2245              	.LVL190:
 2246              	.L194:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2247              		.loc 1 2020 0
 2248 00c8 0024     		movs	r4, #0
 2249 00ca B3E7     		b	.L186
 2250              	.LVL191:
 2251              	.L196:
 2252 00cc 0024     		movs	r4, #0
 2253              	.LVL192:
 2254 00ce B1E7     		b	.L186
 2255              	.L200:
 2256              		.align	2
 2257              	.L199:
 2258 00d0 00000000 		.word	.LANCHOR16
 2259 00d4 00000000 		.word	.LANCHOR9
 2260 00d8 00000000 		.word	.LANCHOR1
 2261 00dc 00000000 		.word	.LANCHOR13
 2262 00e0 00000000 		.word	.LANCHOR4
 2263 00e4 00000000 		.word	.LANCHOR10
 2264 00e8 00000000 		.word	.LANCHOR20
 2265 00ec 00000000 		.word	.LANCHOR19
 2266 00f0 04ED00E0 		.word	-536810236
 2267              		.cfi_endproc
 2268              	.LFE20:
 2270              		.section	.text.vTaskDelay,"ax",%progbits
 2271              		.align	1
 2272              		.global	vTaskDelay
 2273              		.syntax unified
 2274              		.thumb
 2275              		.thumb_func
 2276              		.fpu softvfp
 2278              	vTaskDelay:
 2279              	.LFB9:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2280              		.loc 1 1225 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              	.LVL193:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 134


 2285 0000 10B5     		push	{r4, lr}
 2286              	.LCFI23:
 2287              		.cfi_def_cfa_offset 8
 2288              		.cfi_offset 4, -8
 2289              		.cfi_offset 14, -4
 2290              	.LVL194:
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2291              		.loc 1 1229 0
 2292 0002 A8B1     		cbz	r0, .L202
 2293 0004 0446     		mov	r4, r0
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2294              		.loc 1 1231 0
 2295 0006 0F4B     		ldr	r3, .L207
 2296 0008 1B68     		ldr	r3, [r3]
 2297 000a 43B1     		cbz	r3, .L203
 2298              	.LBB129:
 2299              	.LBB130:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2300              		.loc 2 237 0
 2301              		.syntax unified
 2302              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2303 000c 4FF05003 			mov r3, #80												
 2304 0010 83F31188 		msr basepri, r3											
 2305 0014 BFF36F8F 		isb														
 2306 0018 BFF34F8F 		dsb														
 2307              	
 2308              	@ 0 "" 2
 2309              	.LVL195:
 2310              		.thumb
 2311              		.syntax unified
 2312              	.L204:
 2313 001c FEE7     		b	.L204
 2314              	.L203:
 2315              	.LBE130:
 2316              	.LBE129:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2317              		.loc 1 1232 0
 2318 001e FFF7FEFF 		bl	vTaskSuspendAll
 2319              	.LVL196:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2320              		.loc 1 1243 0
 2321 0022 0021     		movs	r1, #0
 2322 0024 2046     		mov	r0, r4
 2323 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2324              	.LVL197:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2325              		.loc 1 1245 0
 2326 002a FFF7FEFF 		bl	xTaskResumeAll
 2327              	.LVL198:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2328              		.loc 1 1254 0
 2329 002e 38B9     		cbnz	r0, .L201
 2330              	.LVL199:
 2331              	.L202:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2332              		.loc 1 1256 0
 2333 0030 054B     		ldr	r3, .L207+4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 135


 2334 0032 4FF08052 		mov	r2, #268435456
 2335 0036 1A60     		str	r2, [r3]
 2336              		.syntax unified
 2337              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2338 0038 BFF34F8F 		dsb
 2339              	@ 0 "" 2
 2340              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2341 003c BFF36F8F 		isb
 2342              	@ 0 "" 2
 2343              		.thumb
 2344              		.syntax unified
 2345              	.L201:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2346              		.loc 1 1262 0
 2347 0040 10BD     		pop	{r4, pc}
 2348              	.L208:
 2349 0042 00BF     		.align	2
 2350              	.L207:
 2351 0044 00000000 		.word	.LANCHOR16
 2352 0048 04ED00E0 		.word	-536810236
 2353              		.cfi_endproc
 2354              	.LFE9:
 2356              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2357              		.align	1
 2358              		.syntax unified
 2359              		.thumb
 2360              		.thumb_func
 2361              		.fpu softvfp
 2363              	prvCheckTasksWaitingTermination:
 2364              	.LFB37:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2365              		.loc 1 3366 0
 2366              		.cfi_startproc
 2367              		@ args = 0, pretend = 0, frame = 0
 2368              		@ frame_needed = 0, uses_anonymous_args = 0
 2369              	.LBB131:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2370              		.loc 1 3376 0
 2371 0000 134B     		ldr	r3, .L218
 2372 0002 1B68     		ldr	r3, [r3]
 2373 0004 13B3     		cbz	r3, .L216
 2374              	.LBE131:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2375              		.loc 1 3366 0
 2376 0006 10B5     		push	{r4, lr}
 2377              	.LCFI24:
 2378              		.cfi_def_cfa_offset 8
 2379              		.cfi_offset 4, -8
 2380              		.cfi_offset 14, -4
 2381              	.L212:
 2382              	.LBB133:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2383              		.loc 1 3378 0
 2384 0008 FFF7FEFF 		bl	vTaskSuspendAll
 2385              	.LVL200:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2386              		.loc 1 3380 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 136


 2387 000c 114B     		ldr	r3, .L218+4
 2388 000e 1C68     		ldr	r4, [r3]
 2389              	.LVL201:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2390              		.loc 1 3382 0
 2391 0010 FFF7FEFF 		bl	xTaskResumeAll
 2392              	.LVL202:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2393              		.loc 1 3384 0
 2394 0014 24B9     		cbnz	r4, .L217
 2395              	.LVL203:
 2396              	.L211:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2397              		.loc 1 3376 0
 2398 0016 0E4B     		ldr	r3, .L218
 2399 0018 1B68     		ldr	r3, [r3]
 2400 001a 002B     		cmp	r3, #0
 2401 001c F4D1     		bne	.L212
 2402              	.LBE133:
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2403              		.loc 1 3406 0
 2404 001e 10BD     		pop	{r4, pc}
 2405              	.LVL204:
 2406              	.L217:
 2407              	.LBB134:
 2408              	.LBB132:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2409              		.loc 1 3388 0
 2410 0020 FFF7FEFF 		bl	vPortEnterCritical
 2411              	.LVL205:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2412              		.loc 1 3390 0
 2413 0024 0B4B     		ldr	r3, .L218+4
 2414 0026 DB68     		ldr	r3, [r3, #12]
 2415 0028 DC68     		ldr	r4, [r3, #12]
 2416              	.LVL206:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2417              		.loc 1 3391 0
 2418 002a 201D     		adds	r0, r4, #4
 2419 002c FFF7FEFF 		bl	uxListRemove
 2420              	.LVL207:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2421              		.loc 1 3392 0
 2422 0030 094A     		ldr	r2, .L218+8
 2423 0032 1368     		ldr	r3, [r2]
 2424 0034 013B     		subs	r3, r3, #1
 2425 0036 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2426              		.loc 1 3393 0
 2427 0038 054A     		ldr	r2, .L218
 2428 003a 1368     		ldr	r3, [r2]
 2429 003c 013B     		subs	r3, r3, #1
 2430 003e 1360     		str	r3, [r2]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2431              		.loc 1 3395 0
 2432 0040 FFF7FEFF 		bl	vPortExitCritical
 2433              	.LVL208:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 137


3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2434              		.loc 1 3397 0
 2435 0044 2046     		mov	r0, r4
 2436 0046 FFF7FEFF 		bl	prvDeleteTCB
 2437              	.LVL209:
 2438              	.LBE132:
 2439 004a E4E7     		b	.L211
 2440              	.LVL210:
 2441              	.L216:
 2442              	.LCFI25:
 2443              		.cfi_def_cfa_offset 0
 2444              		.cfi_restore 4
 2445              		.cfi_restore 14
 2446 004c 7047     		bx	lr
 2447              	.L219:
 2448 004e 00BF     		.align	2
 2449              	.L218:
 2450 0050 00000000 		.word	.LANCHOR15
 2451 0054 00000000 		.word	.LANCHOR7
 2452 0058 00000000 		.word	.LANCHOR9
 2453              	.LBE134:
 2454              		.cfi_endproc
 2455              	.LFE37:
 2457              		.section	.text.prvIdleTask,"ax",%progbits
 2458              		.align	1
 2459              		.syntax unified
 2460              		.thumb
 2461              		.thumb_func
 2462              		.fpu softvfp
 2464              	prvIdleTask:
 2465              	.LFB35:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2466              		.loc 1 3132 0
 2467              		.cfi_startproc
 2468              		@ Volatile: function does not return.
 2469              		@ args = 0, pretend = 0, frame = 0
 2470              		@ frame_needed = 0, uses_anonymous_args = 0
 2471              	.LVL211:
 2472 0000 08B5     		push	{r3, lr}
 2473              	.LCFI26:
 2474              		.cfi_def_cfa_offset 8
 2475              		.cfi_offset 3, -8
 2476              		.cfi_offset 14, -4
 2477              	.LVL212:
 2478              	.L221:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2479              		.loc 1 3143 0
 2480 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2481              	.LVL213:
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2482              		.loc 1 3166 0
 2483 0006 064B     		ldr	r3, .L224
 2484 0008 1B68     		ldr	r3, [r3]
 2485 000a 012B     		cmp	r3, #1
 2486 000c F9D9     		bls	.L221
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2487              		.loc 1 3168 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 138


 2488 000e 054B     		ldr	r3, .L224+4
 2489 0010 4FF08052 		mov	r2, #268435456
 2490 0014 1A60     		str	r2, [r3]
 2491              		.syntax unified
 2492              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2493 0016 BFF34F8F 		dsb
 2494              	@ 0 "" 2
 2495              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2496 001a BFF36F8F 		isb
 2497              	@ 0 "" 2
 2498              		.thumb
 2499              		.syntax unified
 2500 001e F0E7     		b	.L221
 2501              	.L225:
 2502              		.align	2
 2503              	.L224:
 2504 0020 00000000 		.word	.LANCHOR4
 2505 0024 04ED00E0 		.word	-536810236
 2506              		.cfi_endproc
 2507              	.LFE35:
 2509              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2510              		.align	1
 2511              		.global	vTaskSwitchContext
 2512              		.syntax unified
 2513              		.thumb
 2514              		.thumb_func
 2515              		.fpu softvfp
 2517              	vTaskSwitchContext:
 2518              	.LFB26:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2519              		.loc 1 2762 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              		@ link register save eliminated.
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2524              		.loc 1 2763 0
 2525 0000 204B     		ldr	r3, .L236
 2526 0002 1B68     		ldr	r3, [r3]
 2527 0004 1BB1     		cbz	r3, .L227
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2528              		.loc 1 2767 0
 2529 0006 204B     		ldr	r3, .L236+4
 2530 0008 0122     		movs	r2, #1
 2531 000a 1A60     		str	r2, [r3]
 2532 000c 7047     		bx	lr
 2533              	.L227:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2534              		.loc 1 2771 0
 2535 000e 1E4B     		ldr	r3, .L236+4
 2536 0010 0022     		movs	r2, #0
 2537 0012 1A60     		str	r2, [r3]
 2538              	.LBB135:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2539              		.loc 1 2806 0
 2540 0014 1D4B     		ldr	r3, .L236+8
 2541 0016 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 139


 2542              	.LVL214:
 2543              	.LBB136:
 2544              	.LBB137:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2545              		.loc 2 176 0
 2546              		.syntax unified
 2547              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2548 0018 B3FA83F3 		clz r3, r3
 2549              	@ 0 "" 2
 2550              	.LVL215:
 2551              		.thumb
 2552              		.syntax unified
 2553 001c DBB2     		uxtb	r3, r3
 2554              	.LBE137:
 2555              	.LBE136:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2556              		.loc 1 2806 0
 2557 001e C3F11F03 		rsb	r3, r3, #31
 2558              	.LVL216:
 2559 0022 03EB8301 		add	r1, r3, r3, lsl #2
 2560 0026 8A00     		lsls	r2, r1, #2
 2561 0028 1949     		ldr	r1, .L236+12
 2562 002a 8A58     		ldr	r2, [r1, r2]
 2563 002c 42B9     		cbnz	r2, .L229
 2564              	.LBB138:
 2565              	.LBB139:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2566              		.loc 2 237 0
 2567              		.syntax unified
 2568              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2569 002e 4FF05003 			mov r3, #80												
 2570 0032 83F31188 		msr basepri, r3											
 2571 0036 BFF36F8F 		isb														
 2572 003a BFF34F8F 		dsb														
 2573              	
 2574              	@ 0 "" 2
 2575              	.LVL217:
 2576              		.thumb
 2577              		.syntax unified
 2578              	.L230:
 2579 003e FEE7     		b	.L230
 2580              	.LVL218:
 2581              	.L229:
 2582              	.LBE139:
 2583              	.LBE138:
 2584              	.LBE135:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2585              		.loc 1 2762 0 discriminator 2
 2586 0040 10B4     		push	{r4}
 2587              	.LCFI27:
 2588              		.cfi_def_cfa_offset 4
 2589              		.cfi_offset 4, -4
 2590              	.LVL219:
 2591              	.LBB142:
 2592              	.LBB140:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2593              		.loc 1 2806 0 discriminator 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 140


 2594 0042 1348     		ldr	r0, .L236+12
 2595 0044 9A00     		lsls	r2, r3, #2
 2596 0046 D418     		adds	r4, r2, r3
 2597 0048 A100     		lsls	r1, r4, #2
 2598 004a 0144     		add	r1, r1, r0
 2599 004c 4C68     		ldr	r4, [r1, #4]
 2600 004e 6468     		ldr	r4, [r4, #4]
 2601 0050 4C60     		str	r4, [r1, #4]
 2602 0052 1A44     		add	r2, r2, r3
 2603 0054 9100     		lsls	r1, r2, #2
 2604 0056 0831     		adds	r1, r1, #8
 2605 0058 0844     		add	r0, r0, r1
 2606 005a 8442     		cmp	r4, r0
 2607 005c 0AD0     		beq	.L235
 2608              	.L231:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2609              		.loc 1 2806 0 is_stmt 0 discriminator 5
 2610 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2611              	.LVL220:
 2612 0062 9A00     		lsls	r2, r3, #2
 2613 0064 0A4B     		ldr	r3, .L236+12
 2614 0066 1344     		add	r3, r3, r2
 2615 0068 5B68     		ldr	r3, [r3, #4]
 2616 006a DA68     		ldr	r2, [r3, #12]
 2617 006c 094B     		ldr	r3, .L236+16
 2618 006e 1A60     		str	r2, [r3]
 2619              	.LBE140:
 2620              	.LBE142:
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2621              		.loc 1 2817 0 is_stmt 1 discriminator 5
 2622 0070 10BC     		pop	{r4}
 2623              	.LCFI28:
 2624              		.cfi_remember_state
 2625              		.cfi_restore 4
 2626              		.cfi_def_cfa_offset 0
 2627 0072 7047     		bx	lr
 2628              	.LVL221:
 2629              	.L235:
 2630              	.LCFI29:
 2631              		.cfi_restore_state
 2632              	.LBB143:
 2633              	.LBB141:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2634              		.loc 1 2806 0 discriminator 3
 2635 0074 6168     		ldr	r1, [r4, #4]
 2636 0076 0648     		ldr	r0, .L236+12
 2637 0078 1422     		movs	r2, #20
 2638 007a 02FB0302 		mla	r2, r2, r3, r0
 2639 007e 5160     		str	r1, [r2, #4]
 2640 0080 EDE7     		b	.L231
 2641              	.L237:
 2642 0082 00BF     		.align	2
 2643              	.L236:
 2644 0084 00000000 		.word	.LANCHOR16
 2645 0088 00000000 		.word	.LANCHOR20
 2646 008c 00000000 		.word	.LANCHOR13
 2647 0090 00000000 		.word	.LANCHOR4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 141


 2648 0094 00000000 		.word	.LANCHOR10
 2649              	.LBE141:
 2650              	.LBE143:
 2651              		.cfi_endproc
 2652              	.LFE26:
 2654              		.section	.text.vTaskSuspend,"ax",%progbits
 2655              		.align	1
 2656              		.global	vTaskSuspend
 2657              		.syntax unified
 2658              		.thumb
 2659              		.thumb_func
 2660              		.fpu softvfp
 2662              	vTaskSuspend:
 2663              	.LFB13:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2664              		.loc 1 1567 0
 2665              		.cfi_startproc
 2666              		@ args = 0, pretend = 0, frame = 0
 2667              		@ frame_needed = 0, uses_anonymous_args = 0
 2668              	.LVL222:
 2669 0000 38B5     		push	{r3, r4, r5, lr}
 2670              	.LCFI30:
 2671              		.cfi_def_cfa_offset 16
 2672              		.cfi_offset 3, -16
 2673              		.cfi_offset 4, -12
 2674              		.cfi_offset 5, -8
 2675              		.cfi_offset 14, -4
 2676 0002 0446     		mov	r4, r0
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2677              		.loc 1 1570 0
 2678 0004 FFF7FEFF 		bl	vPortEnterCritical
 2679              	.LVL223:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2680              		.loc 1 1574 0
 2681 0008 3CB3     		cbz	r4, .L249
 2682              	.LVL224:
 2683              	.L239:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2684              		.loc 1 1580 0 discriminator 4
 2685 000a 251D     		adds	r5, r4, #4
 2686 000c 2846     		mov	r0, r5
 2687 000e FFF7FEFF 		bl	uxListRemove
 2688              	.LVL225:
 2689 0012 70B9     		cbnz	r0, .L240
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2690              		.loc 1 1582 0
 2691 0014 E26A     		ldr	r2, [r4, #44]
 2692 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2693 001a 8B00     		lsls	r3, r1, #2
 2694 001c 2649     		ldr	r1, .L252
 2695 001e CB58     		ldr	r3, [r1, r3]
 2696 0020 3BB9     		cbnz	r3, .L240
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2697              		.loc 1 1582 0 is_stmt 0 discriminator 1
 2698 0022 0123     		movs	r3, #1
 2699 0024 03FA02F2 		lsl	r2, r3, r2
 2700 0028 2449     		ldr	r1, .L252+4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 142


 2701 002a 0B68     		ldr	r3, [r1]
 2702 002c 23EA0203 		bic	r3, r3, r2
 2703 0030 0B60     		str	r3, [r1]
 2704              	.L240:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2705              		.loc 1 1590 0 is_stmt 1
 2706 0032 A36A     		ldr	r3, [r4, #40]
 2707 0034 1BB1     		cbz	r3, .L241
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2708              		.loc 1 1592 0
 2709 0036 04F11800 		add	r0, r4, #24
 2710 003a FFF7FEFF 		bl	uxListRemove
 2711              	.LVL226:
 2712              	.L241:
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2713              		.loc 1 1599 0
 2714 003e 2946     		mov	r1, r5
 2715 0040 1F48     		ldr	r0, .L252+8
 2716 0042 FFF7FEFF 		bl	vListInsertEnd
 2717              	.LVL227:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2718              		.loc 1 1601 0
 2719 0046 FFF7FEFF 		bl	vPortExitCritical
 2720              	.LVL228:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2721              		.loc 1 1603 0
 2722 004a 1E4B     		ldr	r3, .L252+12
 2723 004c 1B68     		ldr	r3, [r3]
 2724 004e 3BB9     		cbnz	r3, .L250
 2725              	.L242:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2726              		.loc 1 1618 0
 2727 0050 1D4B     		ldr	r3, .L252+16
 2728 0052 1B68     		ldr	r3, [r3]
 2729 0054 A342     		cmp	r3, r4
 2730 0056 0AD0     		beq	.L251
 2731              	.L238:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2732              		.loc 1 1649 0
 2733 0058 38BD     		pop	{r3, r4, r5, pc}
 2734              	.LVL229:
 2735              	.L249:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2736              		.loc 1 1574 0 discriminator 1
 2737 005a 1B4B     		ldr	r3, .L252+16
 2738 005c 1C68     		ldr	r4, [r3]
 2739              	.LVL230:
 2740 005e D4E7     		b	.L239
 2741              	.LVL231:
 2742              	.L250:
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2743              		.loc 1 1607 0
 2744 0060 FFF7FEFF 		bl	vPortEnterCritical
 2745              	.LVL232:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2746              		.loc 1 1609 0
 2747 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 143


 2748              	.LVL233:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2749              		.loc 1 1611 0
 2750 0068 FFF7FEFF 		bl	vPortExitCritical
 2751              	.LVL234:
 2752 006c F0E7     		b	.L242
 2753              	.L251:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2754              		.loc 1 1620 0
 2755 006e 154B     		ldr	r3, .L252+12
 2756 0070 1B68     		ldr	r3, [r3]
 2757 0072 A3B1     		cbz	r3, .L244
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2758              		.loc 1 1623 0
 2759 0074 154B     		ldr	r3, .L252+20
 2760 0076 1B68     		ldr	r3, [r3]
 2761 0078 43B1     		cbz	r3, .L245
 2762              	.LBB144:
 2763              	.LBB145:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2764              		.loc 2 237 0
 2765              		.syntax unified
 2766              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2767 007a 4FF05003 			mov r3, #80												
 2768 007e 83F31188 		msr basepri, r3											
 2769 0082 BFF36F8F 		isb														
 2770 0086 BFF34F8F 		dsb														
 2771              	
 2772              	@ 0 "" 2
 2773              	.LVL235:
 2774              		.thumb
 2775              		.syntax unified
 2776              	.L246:
 2777 008a FEE7     		b	.L246
 2778              	.L245:
 2779              	.LBE145:
 2780              	.LBE144:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2781              		.loc 1 1624 0
 2782 008c 104B     		ldr	r3, .L252+24
 2783 008e 4FF08052 		mov	r2, #268435456
 2784 0092 1A60     		str	r2, [r3]
 2785              		.syntax unified
 2786              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2787 0094 BFF34F8F 		dsb
 2788              	@ 0 "" 2
 2789              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2790 0098 BFF36F8F 		isb
 2791              	@ 0 "" 2
 2792              		.thumb
 2793              		.syntax unified
 2794 009c DCE7     		b	.L238
 2795              	.L244:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2796              		.loc 1 1631 0
 2797 009e 084B     		ldr	r3, .L252+8
 2798 00a0 1A68     		ldr	r2, [r3]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 144


 2799 00a2 0C4B     		ldr	r3, .L252+28
 2800 00a4 1B68     		ldr	r3, [r3]
 2801 00a6 9A42     		cmp	r2, r3
 2802 00a8 03D1     		bne	.L247
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2803              		.loc 1 1637 0
 2804 00aa 074B     		ldr	r3, .L252+16
 2805 00ac 0022     		movs	r2, #0
 2806 00ae 1A60     		str	r2, [r3]
 2807 00b0 D2E7     		b	.L238
 2808              	.L247:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2809              		.loc 1 1641 0
 2810 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2811              	.LVL236:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2812              		.loc 1 1649 0
 2813 00b6 CFE7     		b	.L238
 2814              	.L253:
 2815              		.align	2
 2816              	.L252:
 2817 00b8 00000000 		.word	.LANCHOR4
 2818 00bc 00000000 		.word	.LANCHOR13
 2819 00c0 00000000 		.word	.LANCHOR0
 2820 00c4 00000000 		.word	.LANCHOR11
 2821 00c8 00000000 		.word	.LANCHOR10
 2822 00cc 00000000 		.word	.LANCHOR16
 2823 00d0 04ED00E0 		.word	-536810236
 2824 00d4 00000000 		.word	.LANCHOR9
 2825              		.cfi_endproc
 2826              	.LFE13:
 2828              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2829              		.align	1
 2830              		.global	vTaskPlaceOnEventList
 2831              		.syntax unified
 2832              		.thumb
 2833              		.thumb_func
 2834              		.fpu softvfp
 2836              	vTaskPlaceOnEventList:
 2837              	.LFB27:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2838              		.loc 1 2821 0
 2839              		.cfi_startproc
 2840              		@ args = 0, pretend = 0, frame = 0
 2841              		@ frame_needed = 0, uses_anonymous_args = 0
 2842              	.LVL237:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2843              		.loc 1 2822 0
 2844 0000 40B9     		cbnz	r0, .L255
 2845              	.LBB146:
 2846              	.LBB147:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2847              		.loc 2 237 0
 2848              		.syntax unified
 2849              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2850 0002 4FF05003 			mov r3, #80												
 2851 0006 83F31188 		msr basepri, r3											
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 145


 2852 000a BFF36F8F 		isb														
 2853 000e BFF34F8F 		dsb														
 2854              	
 2855              	@ 0 "" 2
 2856              	.LVL238:
 2857              		.thumb
 2858              		.syntax unified
 2859              	.L256:
 2860 0012 FEE7     		b	.L256
 2861              	.L255:
 2862              	.LBE147:
 2863              	.LBE146:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2864              		.loc 1 2821 0
 2865 0014 10B5     		push	{r4, lr}
 2866              	.LCFI31:
 2867              		.cfi_def_cfa_offset 8
 2868              		.cfi_offset 4, -8
 2869              		.cfi_offset 14, -4
 2870 0016 0C46     		mov	r4, r1
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2871              		.loc 1 2831 0
 2872 0018 044B     		ldr	r3, .L259
 2873 001a 1968     		ldr	r1, [r3]
 2874              	.LVL239:
 2875 001c 1831     		adds	r1, r1, #24
 2876 001e FFF7FEFF 		bl	vListInsert
 2877              	.LVL240:
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2878              		.loc 1 2833 0
 2879 0022 0121     		movs	r1, #1
 2880 0024 2046     		mov	r0, r4
 2881 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2882              	.LVL241:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2883              		.loc 1 2834 0
 2884 002a 10BD     		pop	{r4, pc}
 2885              	.LVL242:
 2886              	.L260:
 2887              		.align	2
 2888              	.L259:
 2889 002c 00000000 		.word	.LANCHOR10
 2890              		.cfi_endproc
 2891              	.LFE27:
 2893              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2894              		.align	1
 2895              		.global	vTaskPlaceOnUnorderedEventList
 2896              		.syntax unified
 2897              		.thumb
 2898              		.thumb_func
 2899              		.fpu softvfp
 2901              	vTaskPlaceOnUnorderedEventList:
 2902              	.LFB28:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2903              		.loc 1 2838 0
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 146


 2906              		@ frame_needed = 0, uses_anonymous_args = 0
 2907              	.LVL243:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2908              		.loc 1 2839 0
 2909 0000 40B9     		cbnz	r0, .L262
 2910              	.LBB148:
 2911              	.LBB149:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2912              		.loc 2 237 0
 2913              		.syntax unified
 2914              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2915 0002 4FF05003 			mov r3, #80												
 2916 0006 83F31188 		msr basepri, r3											
 2917 000a BFF36F8F 		isb														
 2918 000e BFF34F8F 		dsb														
 2919              	
 2920              	@ 0 "" 2
 2921              	.LVL244:
 2922              		.thumb
 2923              		.syntax unified
 2924              	.L263:
 2925 0012 FEE7     		b	.L263
 2926              	.L262:
 2927 0014 0346     		mov	r3, r0
 2928              	.LBE149:
 2929              	.LBE148:
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2930              		.loc 1 2843 0
 2931 0016 0F48     		ldr	r0, .L268
 2932              	.LVL245:
 2933 0018 0068     		ldr	r0, [r0]
 2934 001a 40B9     		cbnz	r0, .L264
 2935              	.LBB150:
 2936              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2937              		.loc 2 237 0
 2938              		.syntax unified
 2939              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2940 001c 4FF05003 			mov r3, #80												
 2941 0020 83F31188 		msr basepri, r3											
 2942 0024 BFF36F8F 		isb														
 2943 0028 BFF34F8F 		dsb														
 2944              	
 2945              	@ 0 "" 2
 2946              	.LVL246:
 2947              		.thumb
 2948              		.syntax unified
 2949              	.L265:
 2950 002c FEE7     		b	.L265
 2951              	.LVL247:
 2952              	.L264:
 2953              	.LBE151:
 2954              	.LBE150:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2955              		.loc 1 2838 0
 2956 002e 10B5     		push	{r4, lr}
 2957              	.LCFI32:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 147


 2958              		.cfi_def_cfa_offset 8
 2959              		.cfi_offset 4, -8
 2960              		.cfi_offset 14, -4
 2961 0030 1846     		mov	r0, r3
 2962 0032 1446     		mov	r4, r2
 2963 0034 0B46     		mov	r3, r1
 2964              	.LVL248:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2965              		.loc 1 2848 0
 2966 0036 084A     		ldr	r2, .L268+4
 2967              	.LVL249:
 2968 0038 1168     		ldr	r1, [r2]
 2969              	.LVL250:
 2970 003a 43F00043 		orr	r3, r3, #-2147483648
 2971              	.LVL251:
 2972 003e 8B61     		str	r3, [r1, #24]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2973              		.loc 1 2855 0
 2974 0040 1168     		ldr	r1, [r2]
 2975 0042 1831     		adds	r1, r1, #24
 2976 0044 FFF7FEFF 		bl	vListInsertEnd
 2977              	.LVL252:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2978              		.loc 1 2857 0
 2979 0048 0121     		movs	r1, #1
 2980 004a 2046     		mov	r0, r4
 2981 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2982              	.LVL253:
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2983              		.loc 1 2858 0
 2984 0050 10BD     		pop	{r4, pc}
 2985              	.LVL254:
 2986              	.L269:
 2987 0052 00BF     		.align	2
 2988              	.L268:
 2989 0054 00000000 		.word	.LANCHOR16
 2990 0058 00000000 		.word	.LANCHOR10
 2991              		.cfi_endproc
 2992              	.LFE28:
 2994              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 2995              		.align	1
 2996              		.global	vTaskPlaceOnEventListRestricted
 2997              		.syntax unified
 2998              		.thumb
 2999              		.thumb_func
 3000              		.fpu softvfp
 3002              	vTaskPlaceOnEventListRestricted:
 3003              	.LFB29:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3004              		.loc 1 2864 0
 3005              		.cfi_startproc
 3006              		@ args = 0, pretend = 0, frame = 0
 3007              		@ frame_needed = 0, uses_anonymous_args = 0
 3008              	.LVL255:
 3009 0000 38B5     		push	{r3, r4, r5, lr}
 3010              	.LCFI33:
 3011              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 148


 3012              		.cfi_offset 3, -16
 3013              		.cfi_offset 4, -12
 3014              		.cfi_offset 5, -8
 3015              		.cfi_offset 14, -4
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3016              		.loc 1 2865 0
 3017 0002 40B9     		cbnz	r0, .L271
 3018              	.LBB152:
 3019              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3020              		.loc 2 237 0
 3021              		.syntax unified
 3022              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3023 0004 4FF05003 			mov r3, #80												
 3024 0008 83F31188 		msr basepri, r3											
 3025 000c BFF36F8F 		isb														
 3026 0010 BFF34F8F 		dsb														
 3027              	
 3028              	@ 0 "" 2
 3029              	.LVL256:
 3030              		.thumb
 3031              		.syntax unified
 3032              	.L272:
 3033 0014 FEE7     		b	.L272
 3034              	.L271:
 3035 0016 0C46     		mov	r4, r1
 3036 0018 1546     		mov	r5, r2
 3037              	.LBE153:
 3038              	.LBE152:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3039              		.loc 1 2877 0
 3040 001a 064A     		ldr	r2, .L276
 3041              	.LVL257:
 3042 001c 1168     		ldr	r1, [r2]
 3043              	.LVL258:
 3044 001e 1831     		adds	r1, r1, #24
 3045 0020 FFF7FEFF 		bl	vListInsertEnd
 3046              	.LVL259:
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3047              		.loc 1 2882 0
 3048 0024 0DB1     		cbz	r5, .L273
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3049              		.loc 1 2884 0
 3050 0026 4FF0FF34 		mov	r4, #-1
 3051              	.LVL260:
 3052              	.L273:
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3053              		.loc 1 2888 0
 3054 002a 2946     		mov	r1, r5
 3055 002c 2046     		mov	r0, r4
 3056 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3057              	.LVL261:
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3058              		.loc 1 2889 0
 3059 0032 38BD     		pop	{r3, r4, r5, pc}
 3060              	.LVL262:
 3061              	.L277:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 149


 3062              		.align	2
 3063              	.L276:
 3064 0034 00000000 		.word	.LANCHOR10
 3065              		.cfi_endproc
 3066              	.LFE29:
 3068              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3069              		.align	1
 3070              		.global	xTaskRemoveFromEventList
 3071              		.syntax unified
 3072              		.thumb
 3073              		.thumb_func
 3074              		.fpu softvfp
 3076              	xTaskRemoveFromEventList:
 3077              	.LFB30:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3078              		.loc 1 2895 0
 3079              		.cfi_startproc
 3080              		@ args = 0, pretend = 0, frame = 0
 3081              		@ frame_needed = 0, uses_anonymous_args = 0
 3082              	.LVL263:
 3083 0000 38B5     		push	{r3, r4, r5, lr}
 3084              	.LCFI34:
 3085              		.cfi_def_cfa_offset 16
 3086              		.cfi_offset 3, -16
 3087              		.cfi_offset 4, -12
 3088              		.cfi_offset 5, -8
 3089              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3090              		.loc 1 2912 0
 3091 0002 C368     		ldr	r3, [r0, #12]
 3092 0004 DC68     		ldr	r4, [r3, #12]
 3093              	.LVL264:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3094              		.loc 1 2913 0
 3095 0006 44B9     		cbnz	r4, .L279
 3096              	.LBB154:
 3097              	.LBB155:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3098              		.loc 2 237 0
 3099              		.syntax unified
 3100              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3101 0008 4FF05003 			mov r3, #80												
 3102 000c 83F31188 		msr basepri, r3											
 3103 0010 BFF36F8F 		isb														
 3104 0014 BFF34F8F 		dsb														
 3105              	
 3106              	@ 0 "" 2
 3107              	.LVL265:
 3108              		.thumb
 3109              		.syntax unified
 3110              	.L280:
 3111 0018 FEE7     		b	.L280
 3112              	.L279:
 3113              	.LBE155:
 3114              	.LBE154:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3115              		.loc 1 2914 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 150


 3116 001a 04F11805 		add	r5, r4, #24
 3117 001e 2846     		mov	r0, r5
 3118              	.LVL266:
 3119 0020 FFF7FEFF 		bl	uxListRemove
 3120              	.LVL267:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3121              		.loc 1 2916 0
 3122 0024 134B     		ldr	r3, .L286
 3123 0026 1B68     		ldr	r3, [r3]
 3124 0028 E3B9     		cbnz	r3, .L281
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3125              		.loc 1 2918 0
 3126 002a 251D     		adds	r5, r4, #4
 3127 002c 2846     		mov	r0, r5
 3128 002e FFF7FEFF 		bl	uxListRemove
 3129              	.LVL268:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3130              		.loc 1 2919 0
 3131 0032 E36A     		ldr	r3, [r4, #44]
 3132 0034 0122     		movs	r2, #1
 3133 0036 9A40     		lsls	r2, r2, r3
 3134 0038 0F49     		ldr	r1, .L286+4
 3135 003a 0868     		ldr	r0, [r1]
 3136 003c 0243     		orrs	r2, r2, r0
 3137 003e 0A60     		str	r2, [r1]
 3138 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3139 0044 9A00     		lsls	r2, r3, #2
 3140 0046 2946     		mov	r1, r5
 3141 0048 0C48     		ldr	r0, .L286+8
 3142 004a 1044     		add	r0, r0, r2
 3143 004c FFF7FEFF 		bl	vListInsertEnd
 3144              	.LVL269:
 3145              	.L282:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3146              		.loc 1 2928 0
 3147 0050 E26A     		ldr	r2, [r4, #44]
 3148 0052 0B4B     		ldr	r3, .L286+12
 3149 0054 1B68     		ldr	r3, [r3]
 3150 0056 DB6A     		ldr	r3, [r3, #44]
 3151 0058 9A42     		cmp	r2, r3
 3152 005a 08D9     		bls	.L284
 3153              	.LVL270:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3154              		.loc 1 2937 0
 3155 005c 0120     		movs	r0, #1
 3156 005e 094B     		ldr	r3, .L286+16
 3157 0060 1860     		str	r0, [r3]
 3158              	.LVL271:
 3159              	.L278:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3160              		.loc 1 2959 0
 3161 0062 38BD     		pop	{r3, r4, r5, pc}
 3162              	.LVL272:
 3163              	.L281:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3164              		.loc 1 2925 0
 3165 0064 2946     		mov	r1, r5
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 151


 3166 0066 0848     		ldr	r0, .L286+20
 3167 0068 FFF7FEFF 		bl	vListInsertEnd
 3168              	.LVL273:
 3169 006c F0E7     		b	.L282
 3170              	.L284:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3171              		.loc 1 2941 0
 3172 006e 0020     		movs	r0, #0
 3173              	.LVL274:
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3174              		.loc 1 2958 0
 3175 0070 F7E7     		b	.L278
 3176              	.L287:
 3177 0072 00BF     		.align	2
 3178              	.L286:
 3179 0074 00000000 		.word	.LANCHOR16
 3180 0078 00000000 		.word	.LANCHOR13
 3181 007c 00000000 		.word	.LANCHOR4
 3182 0080 00000000 		.word	.LANCHOR10
 3183 0084 00000000 		.word	.LANCHOR20
 3184 0088 00000000 		.word	.LANCHOR1
 3185              		.cfi_endproc
 3186              	.LFE30:
 3188              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3189              		.align	1
 3190              		.global	xTaskRemoveFromUnorderedEventList
 3191              		.syntax unified
 3192              		.thumb
 3193              		.thumb_func
 3194              		.fpu softvfp
 3196              	xTaskRemoveFromUnorderedEventList:
 3197              	.LFB31:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3198              		.loc 1 2963 0
 3199              		.cfi_startproc
 3200              		@ args = 0, pretend = 0, frame = 0
 3201              		@ frame_needed = 0, uses_anonymous_args = 0
 3202              	.LVL275:
 3203 0000 38B5     		push	{r3, r4, r5, lr}
 3204              	.LCFI35:
 3205              		.cfi_def_cfa_offset 16
 3206              		.cfi_offset 3, -16
 3207              		.cfi_offset 4, -12
 3208              		.cfi_offset 5, -8
 3209              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3210              		.loc 1 2969 0
 3211 0002 1D4B     		ldr	r3, .L297
 3212 0004 1B68     		ldr	r3, [r3]
 3213 0006 43B9     		cbnz	r3, .L289
 3214              	.LBB156:
 3215              	.LBB157:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3216              		.loc 2 237 0
 3217              		.syntax unified
 3218              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3219 0008 4FF05003 			mov r3, #80												
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 152


 3220 000c 83F31188 		msr basepri, r3											
 3221 0010 BFF36F8F 		isb														
 3222 0014 BFF34F8F 		dsb														
 3223              	
 3224              	@ 0 "" 2
 3225              	.LVL276:
 3226              		.thumb
 3227              		.syntax unified
 3228              	.L290:
 3229 0018 FEE7     		b	.L290
 3230              	.L289:
 3231              	.LBE157:
 3232              	.LBE156:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3233              		.loc 1 2972 0
 3234 001a 41F00041 		orr	r1, r1, #-2147483648
 3235              	.LVL277:
 3236 001e 0160     		str	r1, [r0]
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3237              		.loc 1 2976 0
 3238 0020 C468     		ldr	r4, [r0, #12]
 3239              	.LVL278:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3240              		.loc 1 2977 0
 3241 0022 F4B1     		cbz	r4, .L296
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3242              		.loc 1 2978 0
 3243 0024 FFF7FEFF 		bl	uxListRemove
 3244              	.LVL279:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3245              		.loc 1 2983 0
 3246 0028 251D     		adds	r5, r4, #4
 3247 002a 2846     		mov	r0, r5
 3248 002c FFF7FEFF 		bl	uxListRemove
 3249              	.LVL280:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3250              		.loc 1 2984 0
 3251 0030 E36A     		ldr	r3, [r4, #44]
 3252 0032 0122     		movs	r2, #1
 3253 0034 9A40     		lsls	r2, r2, r3
 3254 0036 1149     		ldr	r1, .L297+4
 3255 0038 0868     		ldr	r0, [r1]
 3256 003a 0243     		orrs	r2, r2, r0
 3257 003c 0A60     		str	r2, [r1]
 3258 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3259 0042 9A00     		lsls	r2, r3, #2
 3260 0044 2946     		mov	r1, r5
 3261 0046 0E48     		ldr	r0, .L297+8
 3262 0048 1044     		add	r0, r0, r2
 3263 004a FFF7FEFF 		bl	vListInsertEnd
 3264              	.LVL281:
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3265              		.loc 1 2986 0
 3266 004e E26A     		ldr	r2, [r4, #44]
 3267 0050 0C4B     		ldr	r3, .L297+12
 3268 0052 1B68     		ldr	r3, [r3]
 3269 0054 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 153


 3270 0056 9A42     		cmp	r2, r3
 3271 0058 0CD9     		bls	.L294
 3272              	.LVL282:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3273              		.loc 1 2996 0
 3274 005a 0120     		movs	r0, #1
 3275 005c 0A4B     		ldr	r3, .L297+16
 3276 005e 1860     		str	r0, [r3]
 3277              	.LVL283:
 3278              	.L288:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3279              		.loc 1 3004 0
 3280 0060 38BD     		pop	{r3, r4, r5, pc}
 3281              	.LVL284:
 3282              	.L296:
 3283              	.LBB158:
 3284              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3285              		.loc 2 237 0
 3286              		.syntax unified
 3287              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3288 0062 4FF05003 			mov r3, #80												
 3289 0066 83F31188 		msr basepri, r3											
 3290 006a BFF36F8F 		isb														
 3291 006e BFF34F8F 		dsb														
 3292              	
 3293              	@ 0 "" 2
 3294              	.LVL285:
 3295              		.thumb
 3296              		.syntax unified
 3297              	.L292:
 3298 0072 FEE7     		b	.L292
 3299              	.LVL286:
 3300              	.L294:
 3301              	.LBE159:
 3302              	.LBE158:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3303              		.loc 1 3000 0
 3304 0074 0020     		movs	r0, #0
 3305              	.LVL287:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3306              		.loc 1 3003 0
 3307 0076 F3E7     		b	.L288
 3308              	.L298:
 3309              		.align	2
 3310              	.L297:
 3311 0078 00000000 		.word	.LANCHOR16
 3312 007c 00000000 		.word	.LANCHOR13
 3313 0080 00000000 		.word	.LANCHOR4
 3314 0084 00000000 		.word	.LANCHOR10
 3315 0088 00000000 		.word	.LANCHOR20
 3316              		.cfi_endproc
 3317              	.LFE31:
 3319              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3320              		.align	1
 3321              		.global	vTaskSetTimeOutState
 3322              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 154


 3323              		.thumb
 3324              		.thumb_func
 3325              		.fpu softvfp
 3327              	vTaskSetTimeOutState:
 3328              	.LFB32:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3329              		.loc 1 3008 0
 3330              		.cfi_startproc
 3331              		@ args = 0, pretend = 0, frame = 0
 3332              		@ frame_needed = 0, uses_anonymous_args = 0
 3333              		@ link register save eliminated.
 3334              	.LVL288:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3335              		.loc 1 3009 0
 3336 0000 30B1     		cbz	r0, .L302
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3337              		.loc 1 3010 0
 3338 0002 084A     		ldr	r2, .L303
 3339 0004 1268     		ldr	r2, [r2]
 3340 0006 0260     		str	r2, [r0]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3341              		.loc 1 3011 0
 3342 0008 074A     		ldr	r2, .L303+4
 3343 000a 1268     		ldr	r2, [r2]
 3344 000c 4260     		str	r2, [r0, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3345              		.loc 1 3012 0
 3346 000e 7047     		bx	lr
 3347              	.L302:
 3348              	.LBB160:
 3349              	.LBB161:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3350              		.loc 2 237 0
 3351              		.syntax unified
 3352              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3353 0010 4FF05003 			mov r3, #80												
 3354 0014 83F31188 		msr basepri, r3											
 3355 0018 BFF36F8F 		isb														
 3356 001c BFF34F8F 		dsb														
 3357              	
 3358              	@ 0 "" 2
 3359              	.LVL289:
 3360              		.thumb
 3361              		.syntax unified
 3362              	.L301:
 3363 0020 FEE7     		b	.L301
 3364              	.L304:
 3365 0022 00BF     		.align	2
 3366              	.L303:
 3367 0024 00000000 		.word	.LANCHOR18
 3368 0028 00000000 		.word	.LANCHOR14
 3369              	.LBE161:
 3370              	.LBE160:
 3371              		.cfi_endproc
 3372              	.LFE32:
 3374              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3375              		.align	1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 155


 3376              		.global	xTaskCheckForTimeOut
 3377              		.syntax unified
 3378              		.thumb
 3379              		.thumb_func
 3380              		.fpu softvfp
 3382              	xTaskCheckForTimeOut:
 3383              	.LFB33:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3384              		.loc 1 3016 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
 3388              	.LVL290:
 3389 0000 38B5     		push	{r3, r4, r5, lr}
 3390              	.LCFI36:
 3391              		.cfi_def_cfa_offset 16
 3392              		.cfi_offset 3, -16
 3393              		.cfi_offset 4, -12
 3394              		.cfi_offset 5, -8
 3395              		.cfi_offset 14, -4
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3396              		.loc 1 3019 0
 3397 0002 50B1     		cbz	r0, .L316
 3398 0004 0446     		mov	r4, r0
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3399              		.loc 1 3020 0
 3400 0006 89B9     		cbnz	r1, .L308
 3401              	.LBB162:
 3402              	.LBB163:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3403              		.loc 2 237 0
 3404              		.syntax unified
 3405              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3406 0008 4FF05003 			mov r3, #80												
 3407 000c 83F31188 		msr basepri, r3											
 3408 0010 BFF36F8F 		isb														
 3409 0014 BFF34F8F 		dsb														
 3410              	
 3411              	@ 0 "" 2
 3412              	.LVL291:
 3413              		.thumb
 3414              		.syntax unified
 3415              	.L309:
 3416 0018 FEE7     		b	.L309
 3417              	.L316:
 3418              	.LBE163:
 3419              	.LBE162:
 3420              	.LBB164:
 3421              	.LBB165:
 3422              		.syntax unified
 3423              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3424 001a 4FF05003 			mov r3, #80												
 3425 001e 83F31188 		msr basepri, r3											
 3426 0022 BFF36F8F 		isb														
 3427 0026 BFF34F8F 		dsb														
 3428              	
 3429              	@ 0 "" 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 156


 3430              	.LVL292:
 3431              		.thumb
 3432              		.syntax unified
 3433              	.L307:
 3434 002a FEE7     		b	.L307
 3435              	.L308:
 3436 002c 0D46     		mov	r5, r1
 3437              	.LBE165:
 3438              	.LBE164:
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3439              		.loc 1 3022 0
 3440 002e FFF7FEFF 		bl	vPortEnterCritical
 3441              	.LVL293:
 3442              	.LBB166:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3443              		.loc 1 3025 0
 3444 0032 114B     		ldr	r3, .L318
 3445 0034 1968     		ldr	r1, [r3]
 3446              	.LVL294:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3447              		.loc 1 3039 0
 3448 0036 2B68     		ldr	r3, [r5]
 3449 0038 B3F1FF3F 		cmp	r3, #-1
 3450 003c 18D0     		beq	.L312
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3451              		.loc 1 3049 0
 3452 003e 2068     		ldr	r0, [r4]
 3453 0040 0E4A     		ldr	r2, .L318+4
 3454 0042 1268     		ldr	r2, [r2]
 3455 0044 9042     		cmp	r0, r2
 3456 0046 02D0     		beq	.L311
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3457              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3458 0048 6268     		ldr	r2, [r4, #4]
 3459 004a 8A42     		cmp	r2, r1
 3460 004c 12D9     		bls	.L313
 3461              	.L311:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3462              		.loc 1 3058 0 is_stmt 1
 3463 004e 6268     		ldr	r2, [r4, #4]
 3464 0050 881A     		subs	r0, r1, r2
 3465 0052 8342     		cmp	r3, r0
 3466 0054 04D8     		bhi	.L317
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3467              		.loc 1 3067 0
 3468 0056 0124     		movs	r4, #1
 3469              	.LVL295:
 3470              	.L310:
 3471              	.LBE166:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3472              		.loc 1 3070 0
 3473 0058 FFF7FEFF 		bl	vPortExitCritical
 3474              	.LVL296:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3475              		.loc 1 3073 0
 3476 005c 2046     		mov	r0, r4
 3477 005e 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 157


 3478              	.LVL297:
 3479              	.L317:
 3480              	.LBB167:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3481              		.loc 1 3061 0
 3482 0060 521A     		subs	r2, r2, r1
 3483 0062 1344     		add	r3, r3, r2
 3484 0064 2B60     		str	r3, [r5]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3485              		.loc 1 3062 0
 3486 0066 2046     		mov	r0, r4
 3487 0068 FFF7FEFF 		bl	vTaskSetTimeOutState
 3488              	.LVL298:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3489              		.loc 1 3063 0
 3490 006c 0024     		movs	r4, #0
 3491              	.LVL299:
 3492 006e F3E7     		b	.L310
 3493              	.LVL300:
 3494              	.L312:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3495              		.loc 1 3044 0
 3496 0070 0024     		movs	r4, #0
 3497              	.LVL301:
 3498 0072 F1E7     		b	.L310
 3499              	.LVL302:
 3500              	.L313:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3501              		.loc 1 3056 0
 3502 0074 0124     		movs	r4, #1
 3503              	.LVL303:
 3504 0076 EFE7     		b	.L310
 3505              	.L319:
 3506              		.align	2
 3507              	.L318:
 3508 0078 00000000 		.word	.LANCHOR14
 3509 007c 00000000 		.word	.LANCHOR18
 3510              	.LBE167:
 3511              		.cfi_endproc
 3512              	.LFE33:
 3514              		.section	.text.vTaskMissedYield,"ax",%progbits
 3515              		.align	1
 3516              		.global	vTaskMissedYield
 3517              		.syntax unified
 3518              		.thumb
 3519              		.thumb_func
 3520              		.fpu softvfp
 3522              	vTaskMissedYield:
 3523              	.LFB34:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3524              		.loc 1 3077 0
 3525              		.cfi_startproc
 3526              		@ args = 0, pretend = 0, frame = 0
 3527              		@ frame_needed = 0, uses_anonymous_args = 0
 3528              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3529              		.loc 1 3078 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 158


 3530 0000 014B     		ldr	r3, .L321
 3531 0002 0122     		movs	r2, #1
 3532 0004 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3533              		.loc 1 3079 0
 3534 0006 7047     		bx	lr
 3535              	.L322:
 3536              		.align	2
 3537              	.L321:
 3538 0008 00000000 		.word	.LANCHOR20
 3539              		.cfi_endproc
 3540              	.LFE34:
 3542              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3543              		.align	1
 3544              		.global	xTaskGetCurrentTaskHandle
 3545              		.syntax unified
 3546              		.thumb
 3547              		.thumb_func
 3548              		.fpu softvfp
 3550              	xTaskGetCurrentTaskHandle:
 3551              	.LFB40:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3552              		.loc 1 3662 0
 3553              		.cfi_startproc
 3554              		@ args = 0, pretend = 0, frame = 0
 3555              		@ frame_needed = 0, uses_anonymous_args = 0
 3556              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3557              		.loc 1 3668 0
 3558 0000 014B     		ldr	r3, .L324
 3559 0002 1868     		ldr	r0, [r3]
 3560              	.LVL304:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3561              		.loc 1 3671 0
 3562 0004 7047     		bx	lr
 3563              	.L325:
 3564 0006 00BF     		.align	2
 3565              	.L324:
 3566 0008 00000000 		.word	.LANCHOR10
 3567              		.cfi_endproc
 3568              	.LFE40:
 3570              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3571              		.align	1
 3572              		.global	xTaskGetSchedulerState
 3573              		.syntax unified
 3574              		.thumb
 3575              		.thumb_func
 3576              		.fpu softvfp
 3578              	xTaskGetSchedulerState:
 3579              	.LFB41:
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3580              		.loc 1 3679 0
 3581              		.cfi_startproc
 3582              		@ args = 0, pretend = 0, frame = 0
 3583              		@ frame_needed = 0, uses_anonymous_args = 0
 3584              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 159


 3585              		.loc 1 3682 0
 3586 0000 054B     		ldr	r3, .L331
 3587 0002 1B68     		ldr	r3, [r3]
 3588 0004 33B1     		cbz	r3, .L328
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3589              		.loc 1 3688 0
 3590 0006 054B     		ldr	r3, .L331+4
 3591 0008 1B68     		ldr	r3, [r3]
 3592 000a 0BB1     		cbz	r3, .L330
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3593              		.loc 1 3694 0
 3594 000c 0020     		movs	r0, #0
 3595              	.LVL305:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3596              		.loc 1 3699 0
 3597 000e 7047     		bx	lr
 3598              	.LVL306:
 3599              	.L330:
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3600              		.loc 1 3690 0
 3601 0010 0220     		movs	r0, #2
 3602 0012 7047     		bx	lr
 3603              	.L328:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3604              		.loc 1 3684 0
 3605 0014 0120     		movs	r0, #1
 3606 0016 7047     		bx	lr
 3607              	.L332:
 3608              		.align	2
 3609              	.L331:
 3610 0018 00000000 		.word	.LANCHOR11
 3611 001c 00000000 		.word	.LANCHOR16
 3612              		.cfi_endproc
 3613              	.LFE41:
 3615              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3616              		.align	1
 3617              		.global	vTaskPriorityInherit
 3618              		.syntax unified
 3619              		.thumb
 3620              		.thumb_func
 3621              		.fpu softvfp
 3623              	vTaskPriorityInherit:
 3624              	.LFB42:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3625              		.loc 1 3707 0
 3626              		.cfi_startproc
 3627              		@ args = 0, pretend = 0, frame = 0
 3628              		@ frame_needed = 0, uses_anonymous_args = 0
 3629              	.LVL307:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3630              		.loc 1 3712 0
 3631 0000 0028     		cmp	r0, #0
 3632 0002 45D0     		beq	.L340
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3633              		.loc 1 3707 0
 3634 0004 38B5     		push	{r3, r4, r5, lr}
 3635              	.LCFI37:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 160


 3636              		.cfi_def_cfa_offset 16
 3637              		.cfi_offset 3, -16
 3638              		.cfi_offset 4, -12
 3639              		.cfi_offset 5, -8
 3640              		.cfi_offset 14, -4
 3641 0006 0446     		mov	r4, r0
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3642              		.loc 1 3717 0
 3643 0008 C26A     		ldr	r2, [r0, #44]
 3644 000a 2249     		ldr	r1, .L344
 3645 000c 0968     		ldr	r1, [r1]
 3646 000e C96A     		ldr	r1, [r1, #44]
 3647 0010 8A42     		cmp	r2, r1
 3648 0012 14D2     		bcs	.L333
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3649              		.loc 1 3722 0
 3650 0014 8169     		ldr	r1, [r0, #24]
 3651 0016 0029     		cmp	r1, #0
 3652 0018 05DB     		blt	.L335
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3653              		.loc 1 3724 0
 3654 001a 1E49     		ldr	r1, .L344
 3655 001c 0968     		ldr	r1, [r1]
 3656 001e C96A     		ldr	r1, [r1, #44]
 3657 0020 C1F10701 		rsb	r1, r1, #7
 3658 0024 8161     		str	r1, [r0, #24]
 3659              	.L335:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3660              		.loc 1 3733 0
 3661 0026 6069     		ldr	r0, [r4, #20]
 3662              	.LVL308:
 3663 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3664 002c 9100     		lsls	r1, r2, #2
 3665 002e 1A4A     		ldr	r2, .L344+4
 3666 0030 0A44     		add	r2, r2, r1
 3667 0032 9042     		cmp	r0, r2
 3668 0034 04D0     		beq	.L343
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3669              		.loc 1 3751 0
 3670 0036 174A     		ldr	r2, .L344
 3671 0038 1268     		ldr	r2, [r2]
 3672 003a D26A     		ldr	r2, [r2, #44]
 3673 003c E262     		str	r2, [r4, #44]
 3674              	.L333:
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3675              		.loc 1 3765 0
 3676 003e 38BD     		pop	{r3, r4, r5, pc}
 3677              	.LVL309:
 3678              	.L343:
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3679              		.loc 1 3735 0
 3680 0040 251D     		adds	r5, r4, #4
 3681 0042 2846     		mov	r0, r5
 3682 0044 FFF7FEFF 		bl	uxListRemove
 3683              	.LVL310:
 3684 0048 90B1     		cbz	r0, .L337
 3685              	.L338:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 161


3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3686              		.loc 1 3745 0
 3687 004a 124B     		ldr	r3, .L344
 3688 004c 1B68     		ldr	r3, [r3]
 3689 004e DB6A     		ldr	r3, [r3, #44]
 3690 0050 E362     		str	r3, [r4, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3691              		.loc 1 3746 0
 3692 0052 0122     		movs	r2, #1
 3693 0054 9A40     		lsls	r2, r2, r3
 3694 0056 1149     		ldr	r1, .L344+8
 3695 0058 0868     		ldr	r0, [r1]
 3696 005a 0243     		orrs	r2, r2, r0
 3697 005c 0A60     		str	r2, [r1]
 3698 005e 03EB8303 		add	r3, r3, r3, lsl #2
 3699 0062 9A00     		lsls	r2, r3, #2
 3700 0064 2946     		mov	r1, r5
 3701 0066 0C48     		ldr	r0, .L344+4
 3702 0068 1044     		add	r0, r0, r2
 3703 006a FFF7FEFF 		bl	vListInsertEnd
 3704              	.LVL311:
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3705              		.loc 1 3765 0
 3706 006e E6E7     		b	.L333
 3707              	.L337:
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3708              		.loc 1 3737 0
 3709 0070 E36A     		ldr	r3, [r4, #44]
 3710 0072 03EB8301 		add	r1, r3, r3, lsl #2
 3711 0076 8A00     		lsls	r2, r1, #2
 3712 0078 0749     		ldr	r1, .L344+4
 3713 007a 8A58     		ldr	r2, [r1, r2]
 3714 007c 002A     		cmp	r2, #0
 3715 007e E4D1     		bne	.L338
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3716              		.loc 1 3737 0 is_stmt 0 discriminator 1
 3717 0080 0122     		movs	r2, #1
 3718 0082 9A40     		lsls	r2, r2, r3
 3719 0084 0549     		ldr	r1, .L344+8
 3720 0086 0B68     		ldr	r3, [r1]
 3721 0088 23EA0203 		bic	r3, r3, r2
 3722 008c 0B60     		str	r3, [r1]
 3723 008e DCE7     		b	.L338
 3724              	.LVL312:
 3725              	.L340:
 3726              	.LCFI38:
 3727              		.cfi_def_cfa_offset 0
 3728              		.cfi_restore 3
 3729              		.cfi_restore 4
 3730              		.cfi_restore 5
 3731              		.cfi_restore 14
 3732 0090 7047     		bx	lr
 3733              	.L345:
 3734 0092 00BF     		.align	2
 3735              	.L344:
 3736 0094 00000000 		.word	.LANCHOR10
 3737 0098 00000000 		.word	.LANCHOR4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 162


 3738 009c 00000000 		.word	.LANCHOR13
 3739              		.cfi_endproc
 3740              	.LFE42:
 3742              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3743              		.align	1
 3744              		.global	xTaskPriorityDisinherit
 3745              		.syntax unified
 3746              		.thumb
 3747              		.thumb_func
 3748              		.fpu softvfp
 3750              	xTaskPriorityDisinherit:
 3751              	.LFB43:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3752              		.loc 1 3773 0 is_stmt 1
 3753              		.cfi_startproc
 3754              		@ args = 0, pretend = 0, frame = 0
 3755              		@ frame_needed = 0, uses_anonymous_args = 0
 3756              	.LVL313:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3757              		.loc 1 3777 0
 3758 0000 0028     		cmp	r0, #0
 3759 0002 49D0     		beq	.L353
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3760              		.loc 1 3773 0
 3761 0004 38B5     		push	{r3, r4, r5, lr}
 3762              	.LCFI39:
 3763              		.cfi_def_cfa_offset 16
 3764              		.cfi_offset 3, -16
 3765              		.cfi_offset 4, -12
 3766              		.cfi_offset 5, -8
 3767              		.cfi_offset 14, -4
 3768 0006 0446     		mov	r4, r0
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3769              		.loc 1 3783 0
 3770 0008 264A     		ldr	r2, .L360
 3771 000a 1268     		ldr	r2, [r2]
 3772 000c 8242     		cmp	r2, r0
 3773 000e 08D0     		beq	.L348
 3774              	.LBB168:
 3775              	.LBB169:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3776              		.loc 2 237 0
 3777              		.syntax unified
 3778              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3779 0010 4FF05003 			mov r3, #80												
 3780 0014 83F31188 		msr basepri, r3											
 3781 0018 BFF36F8F 		isb														
 3782 001c BFF34F8F 		dsb														
 3783              	
 3784              	@ 0 "" 2
 3785              	.LVL314:
 3786              		.thumb
 3787              		.syntax unified
 3788              	.L349:
 3789 0020 FEE7     		b	.L349
 3790              	.L348:
 3791              	.LBE169:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 163


 3792              	.LBE168:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3793              		.loc 1 3785 0
 3794 0022 826C     		ldr	r2, [r0, #72]
 3795 0024 42B9     		cbnz	r2, .L350
 3796              	.LBB170:
 3797              	.LBB171:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3798              		.loc 2 237 0
 3799              		.syntax unified
 3800              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3801 0026 4FF05003 			mov r3, #80												
 3802 002a 83F31188 		msr basepri, r3											
 3803 002e BFF36F8F 		isb														
 3804 0032 BFF34F8F 		dsb														
 3805              	
 3806              	@ 0 "" 2
 3807              	.LVL315:
 3808              		.thumb
 3809              		.syntax unified
 3810              	.L351:
 3811 0036 FEE7     		b	.L351
 3812              	.L350:
 3813              	.LBE171:
 3814              	.LBE170:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3815              		.loc 1 3786 0
 3816 0038 013A     		subs	r2, r2, #1
 3817 003a 8264     		str	r2, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3818              		.loc 1 3790 0
 3819 003c C06A     		ldr	r0, [r0, #44]
 3820              	.LVL316:
 3821 003e 616C     		ldr	r1, [r4, #68]
 3822 0040 8842     		cmp	r0, r1
 3823 0042 2BD0     		beq	.L354
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3824              		.loc 1 3793 0
 3825 0044 62BB     		cbnz	r2, .L355
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3826              		.loc 1 3800 0
 3827 0046 251D     		adds	r5, r4, #4
 3828 0048 2846     		mov	r0, r5
 3829 004a FFF7FEFF 		bl	uxListRemove
 3830              	.LVL317:
 3831 004e 70B9     		cbnz	r0, .L352
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3832              		.loc 1 3802 0
 3833 0050 E26A     		ldr	r2, [r4, #44]
 3834 0052 1423     		movs	r3, #20
 3835 0054 03FB02F3 		mul	r3, r3, r2
 3836 0058 1349     		ldr	r1, .L360+4
 3837 005a CB58     		ldr	r3, [r1, r3]
 3838 005c 3BB9     		cbnz	r3, .L352
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3839              		.loc 1 3802 0 is_stmt 0 discriminator 1
 3840 005e 0123     		movs	r3, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 164


 3841 0060 03FA02F2 		lsl	r2, r3, r2
 3842 0064 1149     		ldr	r1, .L360+8
 3843 0066 0B68     		ldr	r3, [r1]
 3844 0068 23EA0203 		bic	r3, r3, r2
 3845 006c 0B60     		str	r3, [r1]
 3846              	.L352:
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3847              		.loc 1 3812 0 is_stmt 1
 3848 006e 636C     		ldr	r3, [r4, #68]
 3849 0070 E362     		str	r3, [r4, #44]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3850              		.loc 1 3817 0
 3851 0072 C3F10702 		rsb	r2, r3, #7
 3852 0076 A261     		str	r2, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3853              		.loc 1 3818 0
 3854 0078 0124     		movs	r4, #1
 3855              	.LVL318:
 3856 007a 04FA03F2 		lsl	r2, r4, r3
 3857 007e 0B49     		ldr	r1, .L360+8
 3858 0080 0868     		ldr	r0, [r1]
 3859 0082 0243     		orrs	r2, r2, r0
 3860 0084 0A60     		str	r2, [r1]
 3861 0086 2946     		mov	r1, r5
 3862 0088 074A     		ldr	r2, .L360+4
 3863 008a 1420     		movs	r0, #20
 3864 008c 00FB0320 		mla	r0, r0, r3, r2
 3865 0090 FFF7FEFF 		bl	vListInsertEnd
 3866              	.LVL319:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3867              		.loc 1 3828 0
 3868 0094 2046     		mov	r0, r4
 3869              	.LVL320:
 3870              	.L346:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3871              		.loc 1 3846 0
 3872 0096 38BD     		pop	{r3, r4, r5, pc}
 3873              	.LVL321:
 3874              	.L353:
 3875              	.LCFI40:
 3876              		.cfi_def_cfa_offset 0
 3877              		.cfi_restore 3
 3878              		.cfi_restore 4
 3879              		.cfi_restore 5
 3880              		.cfi_restore 14
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3881              		.loc 1 3775 0
 3882 0098 0020     		movs	r0, #0
 3883              	.LVL322:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3884              		.loc 1 3846 0
 3885 009a 7047     		bx	lr
 3886              	.LVL323:
 3887              	.L354:
 3888              	.LCFI41:
 3889              		.cfi_def_cfa_offset 16
 3890              		.cfi_offset 3, -16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 165


 3891              		.cfi_offset 4, -12
 3892              		.cfi_offset 5, -8
 3893              		.cfi_offset 14, -4
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3894              		.loc 1 3775 0
 3895 009c 0020     		movs	r0, #0
 3896 009e FAE7     		b	.L346
 3897              	.L355:
 3898 00a0 0020     		movs	r0, #0
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3899              		.loc 1 3845 0
 3900 00a2 F8E7     		b	.L346
 3901              	.L361:
 3902              		.align	2
 3903              	.L360:
 3904 00a4 00000000 		.word	.LANCHOR10
 3905 00a8 00000000 		.word	.LANCHOR4
 3906 00ac 00000000 		.word	.LANCHOR13
 3907              		.cfi_endproc
 3908              	.LFE43:
 3910              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3911              		.align	1
 3912              		.global	uxTaskResetEventItemValue
 3913              		.syntax unified
 3914              		.thumb
 3915              		.thumb_func
 3916              		.fpu softvfp
 3918              	uxTaskResetEventItemValue:
 3919              	.LFB44:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 3920              		.loc 1 4163 0
 3921              		.cfi_startproc
 3922              		@ args = 0, pretend = 0, frame = 0
 3923              		@ frame_needed = 0, uses_anonymous_args = 0
 3924              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3925              		.loc 1 4166 0
 3926 0000 044A     		ldr	r2, .L363
 3927 0002 1368     		ldr	r3, [r2]
 3928 0004 9869     		ldr	r0, [r3, #24]
 3929              	.LVL324:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3930              		.loc 1 4170 0
 3931 0006 1368     		ldr	r3, [r2]
 3932 0008 DB6A     		ldr	r3, [r3, #44]
 3933 000a 1268     		ldr	r2, [r2]
 3934 000c C3F10703 		rsb	r3, r3, #7
 3935 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3936              		.loc 1 4173 0
 3937 0012 7047     		bx	lr
 3938              	.L364:
 3939              		.align	2
 3940              	.L363:
 3941 0014 00000000 		.word	.LANCHOR10
 3942              		.cfi_endproc
 3943              	.LFE44:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 166


 3945              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3946              		.align	1
 3947              		.global	pvTaskIncrementMutexHeldCount
 3948              		.syntax unified
 3949              		.thumb
 3950              		.thumb_func
 3951              		.fpu softvfp
 3953              	pvTaskIncrementMutexHeldCount:
 3954              	.LFB45:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3955              		.loc 1 4179 0
 3956              		.cfi_startproc
 3957              		@ args = 0, pretend = 0, frame = 0
 3958              		@ frame_needed = 0, uses_anonymous_args = 0
 3959              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3960              		.loc 1 4182 0
 3961 0000 054B     		ldr	r3, .L367
 3962 0002 1B68     		ldr	r3, [r3]
 3963 0004 23B1     		cbz	r3, .L366
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3964              		.loc 1 4184 0
 3965 0006 044B     		ldr	r3, .L367
 3966 0008 1A68     		ldr	r2, [r3]
 3967 000a 936C     		ldr	r3, [r2, #72]
 3968 000c 0133     		adds	r3, r3, #1
 3969 000e 9364     		str	r3, [r2, #72]
 3970              	.L366:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3971              		.loc 1 4187 0
 3972 0010 014B     		ldr	r3, .L367
 3973 0012 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3974              		.loc 1 4188 0
 3975 0014 7047     		bx	lr
 3976              	.L368:
 3977 0016 00BF     		.align	2
 3978              	.L367:
 3979 0018 00000000 		.word	.LANCHOR10
 3980              		.cfi_endproc
 3981              	.LFE45:
 3983              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3984              		.align	1
 3985              		.global	ulTaskNotifyTake
 3986              		.syntax unified
 3987              		.thumb
 3988              		.thumb_func
 3989              		.fpu softvfp
 3991              	ulTaskNotifyTake:
 3992              	.LFB46:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3993              		.loc 1 4196 0
 3994              		.cfi_startproc
 3995              		@ args = 0, pretend = 0, frame = 0
 3996              		@ frame_needed = 0, uses_anonymous_args = 0
 3997              	.LVL325:
 3998 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 167


 3999              	.LCFI42:
 4000              		.cfi_def_cfa_offset 16
 4001              		.cfi_offset 3, -16
 4002              		.cfi_offset 4, -12
 4003              		.cfi_offset 5, -8
 4004              		.cfi_offset 14, -4
 4005 0002 0546     		mov	r5, r0
 4006 0004 0C46     		mov	r4, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4007              		.loc 1 4199 0
 4008 0006 FFF7FEFF 		bl	vPortEnterCritical
 4009              	.LVL326:
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4010              		.loc 1 4202 0
 4011 000a 194B     		ldr	r3, .L376
 4012 000c 1B68     		ldr	r3, [r3]
 4013 000e DB6C     		ldr	r3, [r3, #76]
 4014 0010 2BB9     		cbnz	r3, .L370
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4015              		.loc 1 4205 0
 4016 0012 174B     		ldr	r3, .L376
 4017 0014 1B68     		ldr	r3, [r3]
 4018 0016 0122     		movs	r2, #1
 4019 0018 83F85020 		strb	r2, [r3, #80]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4020              		.loc 1 4207 0
 4021 001c ACB9     		cbnz	r4, .L374
 4022              	.L370:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4023              		.loc 1 4228 0
 4024 001e FFF7FEFF 		bl	vPortExitCritical
 4025              	.LVL327:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4026              		.loc 1 4230 0
 4027 0022 FFF7FEFF 		bl	vPortEnterCritical
 4028              	.LVL328:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4029              		.loc 1 4233 0
 4030 0026 124B     		ldr	r3, .L376
 4031 0028 1B68     		ldr	r3, [r3]
 4032 002a DC6C     		ldr	r4, [r3, #76]
 4033              	.LVL329:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4034              		.loc 1 4235 0
 4035 002c 24B1     		cbz	r4, .L371
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4036              		.loc 1 4237 0
 4037 002e CDB9     		cbnz	r5, .L375
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4038              		.loc 1 4243 0
 4039 0030 0F4B     		ldr	r3, .L376
 4040 0032 1B68     		ldr	r3, [r3]
 4041 0034 621E     		subs	r2, r4, #1
 4042 0036 DA64     		str	r2, [r3, #76]
 4043              	.L371:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4044              		.loc 1 4251 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 168


 4045 0038 0D4B     		ldr	r3, .L376
 4046 003a 1B68     		ldr	r3, [r3]
 4047 003c 0022     		movs	r2, #0
 4048 003e 83F85020 		strb	r2, [r3, #80]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4049              		.loc 1 4253 0
 4050 0042 FFF7FEFF 		bl	vPortExitCritical
 4051              	.LVL330:
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4052              		.loc 1 4256 0
 4053 0046 2046     		mov	r0, r4
 4054 0048 38BD     		pop	{r3, r4, r5, pc}
 4055              	.LVL331:
 4056              	.L374:
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4057              		.loc 1 4209 0
 4058 004a 1146     		mov	r1, r2
 4059 004c 2046     		mov	r0, r4
 4060 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4061              	.LVL332:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4062              		.loc 1 4216 0
 4063 0052 084B     		ldr	r3, .L376+4
 4064 0054 4FF08052 		mov	r2, #268435456
 4065 0058 1A60     		str	r2, [r3]
 4066              		.syntax unified
 4067              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4068 005a BFF34F8F 		dsb
 4069              	@ 0 "" 2
 4070              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4071 005e BFF36F8F 		isb
 4072              	@ 0 "" 2
 4073              		.thumb
 4074              		.syntax unified
 4075 0062 DCE7     		b	.L370
 4076              	.LVL333:
 4077              	.L375:
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4078              		.loc 1 4239 0
 4079 0064 024B     		ldr	r3, .L376
 4080 0066 1B68     		ldr	r3, [r3]
 4081 0068 0022     		movs	r2, #0
 4082 006a DA64     		str	r2, [r3, #76]
 4083 006c E4E7     		b	.L371
 4084              	.L377:
 4085 006e 00BF     		.align	2
 4086              	.L376:
 4087 0070 00000000 		.word	.LANCHOR10
 4088 0074 04ED00E0 		.word	-536810236
 4089              		.cfi_endproc
 4090              	.LFE46:
 4092              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4093              		.align	1
 4094              		.global	xTaskNotifyWait
 4095              		.syntax unified
 4096              		.thumb
 4097              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 169


 4098              		.fpu softvfp
 4100              	xTaskNotifyWait:
 4101              	.LFB47:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4102              		.loc 1 4264 0
 4103              		.cfi_startproc
 4104              		@ args = 0, pretend = 0, frame = 0
 4105              		@ frame_needed = 0, uses_anonymous_args = 0
 4106              	.LVL334:
 4107 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4108              	.LCFI43:
 4109              		.cfi_def_cfa_offset 24
 4110              		.cfi_offset 3, -24
 4111              		.cfi_offset 4, -20
 4112              		.cfi_offset 5, -16
 4113              		.cfi_offset 6, -12
 4114              		.cfi_offset 7, -8
 4115              		.cfi_offset 14, -4
 4116 0002 0746     		mov	r7, r0
 4117 0004 0D46     		mov	r5, r1
 4118 0006 1446     		mov	r4, r2
 4119 0008 1E46     		mov	r6, r3
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4120              		.loc 1 4267 0
 4121 000a FFF7FEFF 		bl	vPortEnterCritical
 4122              	.LVL335:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4123              		.loc 1 4270 0
 4124 000e 204B     		ldr	r3, .L385
 4125 0010 1B68     		ldr	r3, [r3]
 4126 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4127 0016 DBB2     		uxtb	r3, r3
 4128 0018 022B     		cmp	r3, #2
 4129 001a 0AD0     		beq	.L379
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4130              		.loc 1 4275 0
 4131 001c 1C4B     		ldr	r3, .L385
 4132 001e 1A68     		ldr	r2, [r3]
 4133 0020 D06C     		ldr	r0, [r2, #76]
 4134 0022 20EA0700 		bic	r0, r0, r7
 4135 0026 D064     		str	r0, [r2, #76]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4136              		.loc 1 4278 0
 4137 0028 1B68     		ldr	r3, [r3]
 4138 002a 0122     		movs	r2, #1
 4139 002c 83F85020 		strb	r2, [r3, #80]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4140              		.loc 1 4280 0
 4141 0030 FEB9     		cbnz	r6, .L384
 4142              	.L379:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4143              		.loc 1 4301 0
 4144 0032 FFF7FEFF 		bl	vPortExitCritical
 4145              	.LVL336:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4146              		.loc 1 4303 0
 4147 0036 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 170


 4148              	.LVL337:
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4149              		.loc 1 4307 0
 4150 003a 1CB1     		cbz	r4, .L380
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4151              		.loc 1 4311 0
 4152 003c 144B     		ldr	r3, .L385
 4153 003e 1B68     		ldr	r3, [r3]
 4154 0040 DB6C     		ldr	r3, [r3, #76]
 4155 0042 2360     		str	r3, [r4]
 4156              	.L380:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4157              		.loc 1 4318 0
 4158 0044 124B     		ldr	r3, .L385
 4159 0046 1B68     		ldr	r3, [r3]
 4160 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4161 004c DBB2     		uxtb	r3, r3
 4162 004e 012B     		cmp	r3, #1
 4163 0050 1CD0     		beq	.L382
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4164              		.loc 1 4327 0
 4165 0052 0F4B     		ldr	r3, .L385
 4166 0054 1B68     		ldr	r3, [r3]
 4167 0056 D96C     		ldr	r1, [r3, #76]
 4168 0058 21EA0501 		bic	r1, r1, r5
 4169 005c D964     		str	r1, [r3, #76]
 4170              	.LVL338:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4171              		.loc 1 4328 0
 4172 005e 0124     		movs	r4, #1
 4173              	.LVL339:
 4174              	.L381:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4175              		.loc 1 4331 0
 4176 0060 0B4B     		ldr	r3, .L385
 4177 0062 1B68     		ldr	r3, [r3]
 4178 0064 0022     		movs	r2, #0
 4179 0066 83F85020 		strb	r2, [r3, #80]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4180              		.loc 1 4333 0
 4181 006a FFF7FEFF 		bl	vPortExitCritical
 4182              	.LVL340:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4183              		.loc 1 4336 0
 4184 006e 2046     		mov	r0, r4
 4185 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4186              	.LVL341:
 4187              	.L384:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4188              		.loc 1 4282 0
 4189 0072 1146     		mov	r1, r2
 4190 0074 3046     		mov	r0, r6
 4191 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4192              	.LVL342:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4193              		.loc 1 4289 0
 4194 007a 064B     		ldr	r3, .L385+4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 171


 4195 007c 4FF08052 		mov	r2, #268435456
 4196 0080 1A60     		str	r2, [r3]
 4197              		.syntax unified
 4198              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4199 0082 BFF34F8F 		dsb
 4200              	@ 0 "" 2
 4201              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4202 0086 BFF36F8F 		isb
 4203              	@ 0 "" 2
 4204              		.thumb
 4205              		.syntax unified
 4206 008a D2E7     		b	.L379
 4207              	.L382:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4208              		.loc 1 4321 0
 4209 008c 0024     		movs	r4, #0
 4210              	.LVL343:
 4211 008e E7E7     		b	.L381
 4212              	.L386:
 4213              		.align	2
 4214              	.L385:
 4215 0090 00000000 		.word	.LANCHOR10
 4216 0094 04ED00E0 		.word	-536810236
 4217              		.cfi_endproc
 4218              	.LFE47:
 4220              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4221              		.align	1
 4222              		.global	xTaskGenericNotify
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu softvfp
 4228              	xTaskGenericNotify:
 4229              	.LFB48:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4230              		.loc 1 4344 0
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 0
 4233              		@ frame_needed = 0, uses_anonymous_args = 0
 4234              	.LVL344:
 4235 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4236              	.LCFI44:
 4237              		.cfi_def_cfa_offset 24
 4238              		.cfi_offset 3, -24
 4239              		.cfi_offset 4, -20
 4240              		.cfi_offset 5, -16
 4241              		.cfi_offset 6, -12
 4242              		.cfi_offset 7, -8
 4243              		.cfi_offset 14, -4
 4244              	.LVL345:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4245              		.loc 1 4349 0
 4246 0002 40B9     		cbnz	r0, .L388
 4247              	.LBB172:
 4248              	.LBB173:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4249              		.loc 2 237 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 172


 4250              		.syntax unified
 4251              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4252 0004 4FF05003 			mov r3, #80												
 4253 0008 83F31188 		msr basepri, r3											
 4254 000c BFF36F8F 		isb														
 4255 0010 BFF34F8F 		dsb														
 4256              	
 4257              	@ 0 "" 2
 4258              	.LVL346:
 4259              		.thumb
 4260              		.syntax unified
 4261              	.L389:
 4262 0014 FEE7     		b	.L389
 4263              	.LVL347:
 4264              	.L388:
 4265 0016 0446     		mov	r4, r0
 4266 0018 1F46     		mov	r7, r3
 4267 001a 1546     		mov	r5, r2
 4268 001c 0E46     		mov	r6, r1
 4269              	.LVL348:
 4270              	.LBE173:
 4271              	.LBE172:
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4272              		.loc 1 4352 0
 4273 001e FFF7FEFF 		bl	vPortEnterCritical
 4274              	.LVL349:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4275              		.loc 1 4354 0
 4276 0022 0FB1     		cbz	r7, .L390
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4277              		.loc 1 4356 0
 4278 0024 E36C     		ldr	r3, [r4, #76]
 4279 0026 3B60     		str	r3, [r7]
 4280              	.L390:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4281              		.loc 1 4359 0
 4282 0028 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4283 002c DBB2     		uxtb	r3, r3
 4284              	.LVL350:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4285              		.loc 1 4361 0
 4286 002e 0222     		movs	r2, #2
 4287 0030 84F85020 		strb	r2, [r4, #80]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4288              		.loc 1 4363 0
 4289 0034 6A1E     		subs	r2, r5, #1
 4290 0036 032A     		cmp	r2, #3
 4291 0038 1AD8     		bhi	.L400
 4292 003a DFE802F0 		tbb	[pc, r2]
 4293              	.L393:
 4294 003e 02       		.byte	(.L392-.L393)/2
 4295 003f 0C       		.byte	(.L394-.L393)/2
 4296 0040 11       		.byte	(.L395-.L393)/2
 4297 0041 14       		.byte	(.L396-.L393)/2
 4298              		.p2align 1
 4299              	.L392:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 173


 4300              		.loc 1 4366 0
 4301 0042 E26C     		ldr	r2, [r4, #76]
 4302 0044 1643     		orrs	r6, r6, r2
 4303              	.LVL351:
 4304 0046 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4305              		.loc 1 4346 0
 4306 0048 0125     		movs	r5, #1
 4307              	.L391:
 4308              	.LVL352:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4309              		.loc 1 4399 0
 4310 004a 012B     		cmp	r3, #1
 4311 004c 14D0     		beq	.L403
 4312              	.LVL353:
 4313              	.L397:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4314              		.loc 1 4439 0
 4315 004e FFF7FEFF 		bl	vPortExitCritical
 4316              	.LVL354:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4317              		.loc 1 4442 0
 4318 0052 2846     		mov	r0, r5
 4319 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4320              	.LVL355:
 4321              	.L394:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4322              		.loc 1 4370 0
 4323 0056 E26C     		ldr	r2, [r4, #76]
 4324 0058 0132     		adds	r2, r2, #1
 4325 005a E264     		str	r2, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4326              		.loc 1 4346 0
 4327 005c 0125     		movs	r5, #1
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4328              		.loc 1 4371 0
 4329 005e F4E7     		b	.L391
 4330              	.L395:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4331              		.loc 1 4374 0
 4332 0060 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4333              		.loc 1 4346 0
 4334 0062 0125     		movs	r5, #1
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4335              		.loc 1 4375 0
 4336 0064 F1E7     		b	.L391
 4337              	.L396:
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4338              		.loc 1 4378 0
 4339 0066 022B     		cmp	r3, #2
 4340 0068 04D0     		beq	.L401
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4341              		.loc 1 4380 0
 4342 006a E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4343              		.loc 1 4346 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 174


 4344 006c 0125     		movs	r5, #1
 4345 006e ECE7     		b	.L391
 4346              	.L400:
 4347 0070 0125     		movs	r5, #1
 4348 0072 EAE7     		b	.L391
 4349              	.L401:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4350              		.loc 1 4385 0
 4351 0074 0025     		movs	r5, #0
 4352 0076 E8E7     		b	.L391
 4353              	.LVL356:
 4354              	.L403:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4355              		.loc 1 4401 0
 4356 0078 261D     		adds	r6, r4, #4
 4357 007a 3046     		mov	r0, r6
 4358 007c FFF7FEFF 		bl	uxListRemove
 4359              	.LVL357:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4360              		.loc 1 4402 0
 4361 0080 E26A     		ldr	r2, [r4, #44]
 4362 0082 0123     		movs	r3, #1
 4363 0084 9340     		lsls	r3, r3, r2
 4364 0086 1249     		ldr	r1, .L404
 4365 0088 0868     		ldr	r0, [r1]
 4366 008a 0343     		orrs	r3, r3, r0
 4367 008c 0B60     		str	r3, [r1]
 4368 008e 3146     		mov	r1, r6
 4369 0090 104B     		ldr	r3, .L404+4
 4370 0092 1420     		movs	r0, #20
 4371 0094 00FB0230 		mla	r0, r0, r2, r3
 4372 0098 FFF7FEFF 		bl	vListInsertEnd
 4373              	.LVL358:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4374              		.loc 1 4405 0
 4375 009c A36A     		ldr	r3, [r4, #40]
 4376 009e 43B1     		cbz	r3, .L398
 4377              	.LBB174:
 4378              	.LBB175:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4379              		.loc 2 237 0
 4380              		.syntax unified
 4381              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4382 00a0 4FF05003 			mov r3, #80												
 4383 00a4 83F31188 		msr basepri, r3											
 4384 00a8 BFF36F8F 		isb														
 4385 00ac BFF34F8F 		dsb														
 4386              	
 4387              	@ 0 "" 2
 4388              	.LVL359:
 4389              		.thumb
 4390              		.syntax unified
 4391              	.L399:
 4392 00b0 FEE7     		b	.L399
 4393              	.L398:
 4394              	.LBE175:
 4395              	.LBE174:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 175


4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4396              		.loc 1 4423 0
 4397 00b2 E26A     		ldr	r2, [r4, #44]
 4398 00b4 084B     		ldr	r3, .L404+8
 4399 00b6 1B68     		ldr	r3, [r3]
 4400 00b8 DB6A     		ldr	r3, [r3, #44]
 4401 00ba 9A42     		cmp	r2, r3
 4402 00bc C7D9     		bls	.L397
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4403              		.loc 1 4427 0
 4404 00be 074B     		ldr	r3, .L404+12
 4405 00c0 4FF08052 		mov	r2, #268435456
 4406 00c4 1A60     		str	r2, [r3]
 4407              		.syntax unified
 4408              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4409 00c6 BFF34F8F 		dsb
 4410              	@ 0 "" 2
 4411              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4412 00ca BFF36F8F 		isb
 4413              	@ 0 "" 2
 4414              		.thumb
 4415              		.syntax unified
 4416 00ce BEE7     		b	.L397
 4417              	.L405:
 4418              		.align	2
 4419              	.L404:
 4420 00d0 00000000 		.word	.LANCHOR13
 4421 00d4 00000000 		.word	.LANCHOR4
 4422 00d8 00000000 		.word	.LANCHOR10
 4423 00dc 04ED00E0 		.word	-536810236
 4424              		.cfi_endproc
 4425              	.LFE48:
 4427              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4428              		.align	1
 4429              		.global	xTaskGenericNotifyFromISR
 4430              		.syntax unified
 4431              		.thumb
 4432              		.thumb_func
 4433              		.fpu softvfp
 4435              	xTaskGenericNotifyFromISR:
 4436              	.LFB49:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4437              		.loc 1 4450 0
 4438              		.cfi_startproc
 4439              		@ args = 4, pretend = 0, frame = 0
 4440              		@ frame_needed = 0, uses_anonymous_args = 0
 4441              	.LVL360:
 4442 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4443              	.LCFI45:
 4444              		.cfi_def_cfa_offset 32
 4445              		.cfi_offset 3, -32
 4446              		.cfi_offset 4, -28
 4447              		.cfi_offset 5, -24
 4448              		.cfi_offset 6, -20
 4449              		.cfi_offset 7, -16
 4450              		.cfi_offset 8, -12
 4451              		.cfi_offset 9, -8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 176


 4452              		.cfi_offset 14, -4
 4453 0004 089E     		ldr	r6, [sp, #32]
 4454              	.LVL361:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4455              		.loc 1 4456 0
 4456 0006 40B9     		cbnz	r0, .L407
 4457              	.LBB176:
 4458              	.LBB177:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4459              		.loc 2 237 0
 4460              		.syntax unified
 4461              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4462 0008 4FF05003 			mov r3, #80												
 4463 000c 83F31188 		msr basepri, r3											
 4464 0010 BFF36F8F 		isb														
 4465 0014 BFF34F8F 		dsb														
 4466              	
 4467              	@ 0 "" 2
 4468              	.LVL362:
 4469              		.thumb
 4470              		.syntax unified
 4471              	.L408:
 4472 0018 FEE7     		b	.L408
 4473              	.LVL363:
 4474              	.L407:
 4475 001a 0446     		mov	r4, r0
 4476 001c 9946     		mov	r9, r3
 4477 001e 1546     		mov	r5, r2
 4478 0020 8846     		mov	r8, r1
 4479              	.LBE177:
 4480              	.LBE176:
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4481              		.loc 1 4474 0
 4482 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4483              	.LVL364:
 4484              	.LBB178:
 4485              	.LBB179:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4486              		.loc 2 253 0
 4487              		.syntax unified
 4488              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4489 0026 EFF31187 			mrs r7, basepri											
 4490 002a 4FF05003 		mov r3, #80												
 4491 002e 83F31188 		msr basepri, r3											
 4492 0032 BFF36F8F 		isb														
 4493 0036 BFF34F8F 		dsb														
 4494              	
 4495              	@ 0 "" 2
 4496              		.thumb
 4497              		.syntax unified
 4498              	.LBE179:
 4499              	.LBE178:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4500              		.loc 1 4480 0
 4501 003a B9F1000F 		cmp	r9, #0
 4502 003e 02D0     		beq	.L409
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 177


 4503              		.loc 1 4482 0
 4504 0040 E36C     		ldr	r3, [r4, #76]
 4505 0042 C9F80030 		str	r3, [r9]
 4506              	.L409:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4507              		.loc 1 4485 0
 4508 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4509 004a DBB2     		uxtb	r3, r3
 4510              	.LVL365:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4511              		.loc 1 4486 0
 4512 004c 0222     		movs	r2, #2
 4513 004e 84F85020 		strb	r2, [r4, #80]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4514              		.loc 1 4488 0
 4515 0052 6A1E     		subs	r2, r5, #1
 4516 0054 032A     		cmp	r2, #3
 4517 0056 1ED8     		bhi	.L422
 4518 0058 DFE802F0 		tbb	[pc, r2]
 4519              	.L412:
 4520 005c 02       		.byte	(.L411-.L412)/2
 4521 005d 0E       		.byte	(.L413-.L412)/2
 4522 005e 13       		.byte	(.L414-.L412)/2
 4523 005f 17       		.byte	(.L415-.L412)/2
 4524              		.p2align 1
 4525              	.L411:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4526              		.loc 1 4491 0
 4527 0060 E26C     		ldr	r2, [r4, #76]
 4528 0062 42EA0802 		orr	r2, r2, r8
 4529 0066 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4530              		.loc 1 4453 0
 4531 0068 0125     		movs	r5, #1
 4532              	.L410:
 4533              	.LVL366:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4534              		.loc 1 4524 0
 4535 006a 012B     		cmp	r3, #1
 4536 006c 17D0     		beq	.L425
 4537              	.LVL367:
 4538              	.L416:
 4539              	.LBB180:
 4540              	.LBB181:
 4541              		.loc 2 271 0
 4542              		.syntax unified
 4543              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4544 006e 87F31188 			msr basepri, r7	
 4545              	@ 0 "" 2
 4546              	.LVL368:
 4547              		.thumb
 4548              		.syntax unified
 4549              	.LBE181:
 4550              	.LBE180:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4551              		.loc 1 4566 0
 4552 0072 2846     		mov	r0, r5
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 178


 4553 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4554              	.LVL369:
 4555              	.L413:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4556              		.loc 1 4495 0
 4557 0078 E26C     		ldr	r2, [r4, #76]
 4558 007a 0132     		adds	r2, r2, #1
 4559 007c E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4560              		.loc 1 4453 0
 4561 007e 0125     		movs	r5, #1
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4562              		.loc 1 4496 0
 4563 0080 F3E7     		b	.L410
 4564              	.L414:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4565              		.loc 1 4499 0
 4566 0082 C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4567              		.loc 1 4453 0
 4568 0086 0125     		movs	r5, #1
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4569              		.loc 1 4500 0
 4570 0088 EFE7     		b	.L410
 4571              	.L415:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4572              		.loc 1 4503 0
 4573 008a 022B     		cmp	r3, #2
 4574 008c 05D0     		beq	.L423
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4575              		.loc 1 4505 0
 4576 008e C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4577              		.loc 1 4453 0
 4578 0092 0125     		movs	r5, #1
 4579 0094 E9E7     		b	.L410
 4580              	.L422:
 4581 0096 0125     		movs	r5, #1
 4582 0098 E7E7     		b	.L410
 4583              	.L423:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4584              		.loc 1 4510 0
 4585 009a 0025     		movs	r5, #0
 4586 009c E5E7     		b	.L410
 4587              	.LVL370:
 4588              	.L425:
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4589              		.loc 1 4527 0
 4590 009e A36A     		ldr	r3, [r4, #40]
 4591              	.LVL371:
 4592 00a0 43B1     		cbz	r3, .L417
 4593              	.LBB182:
 4594              	.LBB183:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4595              		.loc 2 237 0
 4596              		.syntax unified
 4597              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 179


 4598 00a2 4FF05003 			mov r3, #80												
 4599 00a6 83F31188 		msr basepri, r3											
 4600 00aa BFF36F8F 		isb														
 4601 00ae BFF34F8F 		dsb														
 4602              	
 4603              	@ 0 "" 2
 4604              	.LVL372:
 4605              		.thumb
 4606              		.syntax unified
 4607              	.L418:
 4608 00b2 FEE7     		b	.L418
 4609              	.L417:
 4610              	.LBE183:
 4611              	.LBE182:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4612              		.loc 1 4529 0
 4613 00b4 144B     		ldr	r3, .L426
 4614 00b6 1B68     		ldr	r3, [r3]
 4615 00b8 E3B9     		cbnz	r3, .L419
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4616              		.loc 1 4531 0
 4617 00ba 04F10408 		add	r8, r4, #4
 4618              	.LVL373:
 4619 00be 4046     		mov	r0, r8
 4620 00c0 FFF7FEFF 		bl	uxListRemove
 4621              	.LVL374:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4622              		.loc 1 4532 0
 4623 00c4 E26A     		ldr	r2, [r4, #44]
 4624 00c6 0123     		movs	r3, #1
 4625 00c8 9340     		lsls	r3, r3, r2
 4626 00ca 1049     		ldr	r1, .L426+4
 4627 00cc 0868     		ldr	r0, [r1]
 4628 00ce 0343     		orrs	r3, r3, r0
 4629 00d0 0B60     		str	r3, [r1]
 4630 00d2 4146     		mov	r1, r8
 4631 00d4 0E4B     		ldr	r3, .L426+8
 4632 00d6 1420     		movs	r0, #20
 4633 00d8 00FB0230 		mla	r0, r0, r2, r3
 4634 00dc FFF7FEFF 		bl	vListInsertEnd
 4635              	.LVL375:
 4636              	.L420:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4637              		.loc 1 4541 0
 4638 00e0 E26A     		ldr	r2, [r4, #44]
 4639 00e2 0C4B     		ldr	r3, .L426+12
 4640 00e4 1B68     		ldr	r3, [r3]
 4641 00e6 DB6A     		ldr	r3, [r3, #44]
 4642 00e8 9A42     		cmp	r2, r3
 4643 00ea C0D9     		bls	.L416
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4644              		.loc 1 4545 0
 4645 00ec 46B1     		cbz	r6, .L421
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4646              		.loc 1 4547 0
 4647 00ee 0123     		movs	r3, #1
 4648 00f0 3360     		str	r3, [r6]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 180


 4649 00f2 BCE7     		b	.L416
 4650              	.LVL376:
 4651              	.L419:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4652              		.loc 1 4538 0
 4653 00f4 04F11801 		add	r1, r4, #24
 4654 00f8 0748     		ldr	r0, .L426+16
 4655 00fa FFF7FEFF 		bl	vListInsertEnd
 4656              	.LVL377:
 4657 00fe EFE7     		b	.L420
 4658              	.LVL378:
 4659              	.L421:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4660              		.loc 1 4554 0
 4661 0100 064B     		ldr	r3, .L426+20
 4662 0102 0122     		movs	r2, #1
 4663 0104 1A60     		str	r2, [r3]
 4664 0106 B2E7     		b	.L416
 4665              	.L427:
 4666              		.align	2
 4667              	.L426:
 4668 0108 00000000 		.word	.LANCHOR16
 4669 010c 00000000 		.word	.LANCHOR13
 4670 0110 00000000 		.word	.LANCHOR4
 4671 0114 00000000 		.word	.LANCHOR10
 4672 0118 00000000 		.word	.LANCHOR1
 4673 011c 00000000 		.word	.LANCHOR20
 4674              		.cfi_endproc
 4675              	.LFE49:
 4677              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4678              		.align	1
 4679              		.global	vTaskNotifyGiveFromISR
 4680              		.syntax unified
 4681              		.thumb
 4682              		.thumb_func
 4683              		.fpu softvfp
 4685              	vTaskNotifyGiveFromISR:
 4686              	.LFB50:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4687              		.loc 1 4574 0
 4688              		.cfi_startproc
 4689              		@ args = 0, pretend = 0, frame = 0
 4690              		@ frame_needed = 0, uses_anonymous_args = 0
 4691              	.LVL379:
 4692 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4693              	.LCFI46:
 4694              		.cfi_def_cfa_offset 24
 4695              		.cfi_offset 3, -24
 4696              		.cfi_offset 4, -20
 4697              		.cfi_offset 5, -16
 4698              		.cfi_offset 6, -12
 4699              		.cfi_offset 7, -8
 4700              		.cfi_offset 14, -4
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4701              		.loc 1 4579 0
 4702 0002 40B9     		cbnz	r0, .L429
 4703              	.LBB184:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 181


 4704              	.LBB185:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4705              		.loc 2 237 0
 4706              		.syntax unified
 4707              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4708 0004 4FF05003 			mov r3, #80												
 4709 0008 83F31188 		msr basepri, r3											
 4710 000c BFF36F8F 		isb														
 4711 0010 BFF34F8F 		dsb														
 4712              	
 4713              	@ 0 "" 2
 4714              	.LVL380:
 4715              		.thumb
 4716              		.syntax unified
 4717              	.L430:
 4718 0014 FEE7     		b	.L430
 4719              	.L429:
 4720 0016 0446     		mov	r4, r0
 4721 0018 0D46     		mov	r5, r1
 4722              	.LBE185:
 4723              	.LBE184:
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4724              		.loc 1 4597 0
 4725 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 4726              	.LVL381:
 4727              	.LBB186:
 4728              	.LBB187:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4729              		.loc 2 253 0
 4730              		.syntax unified
 4731              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4732 001e EFF31186 			mrs r6, basepri											
 4733 0022 4FF05003 		mov r3, #80												
 4734 0026 83F31188 		msr basepri, r3											
 4735 002a BFF36F8F 		isb														
 4736 002e BFF34F8F 		dsb														
 4737              	
 4738              	@ 0 "" 2
 4739              		.thumb
 4740              		.syntax unified
 4741              	.LBE187:
 4742              	.LBE186:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4743              		.loc 1 4603 0
 4744 0032 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4745 0036 DBB2     		uxtb	r3, r3
 4746              	.LVL382:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4747              		.loc 1 4604 0
 4748 0038 0222     		movs	r2, #2
 4749 003a 84F85020 		strb	r2, [r4, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4750              		.loc 1 4608 0
 4751 003e E26C     		ldr	r2, [r4, #76]
 4752 0040 0132     		adds	r2, r2, #1
 4753 0042 E264     		str	r2, [r4, #76]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 182


 4754              		.loc 1 4614 0
 4755 0044 012B     		cmp	r3, #1
 4756 0046 02D0     		beq	.L438
 4757              	.LVL383:
 4758              	.L431:
 4759              	.LBB188:
 4760              	.LBB189:
 4761              		.loc 2 271 0
 4762              		.syntax unified
 4763              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4764 0048 86F31188 			msr basepri, r6	
 4765              	@ 0 "" 2
 4766              	.LVL384:
 4767              		.thumb
 4768              		.syntax unified
 4769              	.LBE189:
 4770              	.LBE188:
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4771              		.loc 1 4654 0
 4772 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4773              	.LVL385:
 4774              	.L438:
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4775              		.loc 1 4617 0
 4776 004e A36A     		ldr	r3, [r4, #40]
 4777              	.LVL386:
 4778 0050 43B1     		cbz	r3, .L432
 4779              	.LBB190:
 4780              	.LBB191:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4781              		.loc 2 237 0
 4782              		.syntax unified
 4783              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4784 0052 4FF05003 			mov r3, #80												
 4785 0056 83F31188 		msr basepri, r3											
 4786 005a BFF36F8F 		isb														
 4787 005e BFF34F8F 		dsb														
 4788              	
 4789              	@ 0 "" 2
 4790              	.LVL387:
 4791              		.thumb
 4792              		.syntax unified
 4793              	.L433:
 4794 0062 FEE7     		b	.L433
 4795              	.L432:
 4796              	.LBE191:
 4797              	.LBE190:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4798              		.loc 1 4619 0
 4799 0064 144B     		ldr	r3, .L439
 4800 0066 1B68     		ldr	r3, [r3]
 4801 0068 DBB9     		cbnz	r3, .L434
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4802              		.loc 1 4621 0
 4803 006a 271D     		adds	r7, r4, #4
 4804 006c 3846     		mov	r0, r7
 4805 006e FFF7FEFF 		bl	uxListRemove
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 183


 4806              	.LVL388:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4807              		.loc 1 4622 0
 4808 0072 E26A     		ldr	r2, [r4, #44]
 4809 0074 0123     		movs	r3, #1
 4810 0076 9340     		lsls	r3, r3, r2
 4811 0078 1049     		ldr	r1, .L439+4
 4812 007a 0868     		ldr	r0, [r1]
 4813 007c 0343     		orrs	r3, r3, r0
 4814 007e 0B60     		str	r3, [r1]
 4815 0080 3946     		mov	r1, r7
 4816 0082 0F4B     		ldr	r3, .L439+8
 4817 0084 1420     		movs	r0, #20
 4818 0086 00FB0230 		mla	r0, r0, r2, r3
 4819 008a FFF7FEFF 		bl	vListInsertEnd
 4820              	.LVL389:
 4821              	.L435:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4822              		.loc 1 4631 0
 4823 008e E26A     		ldr	r2, [r4, #44]
 4824 0090 0C4B     		ldr	r3, .L439+12
 4825 0092 1B68     		ldr	r3, [r3]
 4826 0094 DB6A     		ldr	r3, [r3, #44]
 4827 0096 9A42     		cmp	r2, r3
 4828 0098 D6D9     		bls	.L431
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4829              		.loc 1 4635 0
 4830 009a 45B1     		cbz	r5, .L436
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4831              		.loc 1 4637 0
 4832 009c 0123     		movs	r3, #1
 4833 009e 2B60     		str	r3, [r5]
 4834 00a0 D2E7     		b	.L431
 4835              	.L434:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4836              		.loc 1 4628 0
 4837 00a2 04F11801 		add	r1, r4, #24
 4838 00a6 0848     		ldr	r0, .L439+16
 4839 00a8 FFF7FEFF 		bl	vListInsertEnd
 4840              	.LVL390:
 4841 00ac EFE7     		b	.L435
 4842              	.L436:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4843              		.loc 1 4644 0
 4844 00ae 074B     		ldr	r3, .L439+20
 4845 00b0 0122     		movs	r2, #1
 4846 00b2 1A60     		str	r2, [r3]
 4847 00b4 C8E7     		b	.L431
 4848              	.L440:
 4849 00b6 00BF     		.align	2
 4850              	.L439:
 4851 00b8 00000000 		.word	.LANCHOR16
 4852 00bc 00000000 		.word	.LANCHOR13
 4853 00c0 00000000 		.word	.LANCHOR4
 4854 00c4 00000000 		.word	.LANCHOR10
 4855 00c8 00000000 		.word	.LANCHOR1
 4856 00cc 00000000 		.word	.LANCHOR20
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 184


 4857              		.cfi_endproc
 4858              	.LFE50:
 4860              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4861              		.align	1
 4862              		.global	xTaskNotifyStateClear
 4863              		.syntax unified
 4864              		.thumb
 4865              		.thumb_func
 4866              		.fpu softvfp
 4868              	xTaskNotifyStateClear:
 4869              	.LFB51:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4870              		.loc 1 4663 0
 4871              		.cfi_startproc
 4872              		@ args = 0, pretend = 0, frame = 0
 4873              		@ frame_needed = 0, uses_anonymous_args = 0
 4874              	.LVL391:
 4875 0000 10B5     		push	{r4, lr}
 4876              	.LCFI47:
 4877              		.cfi_def_cfa_offset 8
 4878              		.cfi_offset 4, -8
 4879              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4880              		.loc 1 4669 0
 4881 0002 0446     		mov	r4, r0
 4882 0004 58B1     		cbz	r0, .L446
 4883              	.LVL392:
 4884              	.L442:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4885              		.loc 1 4671 0 discriminator 4
 4886 0006 FFF7FEFF 		bl	vPortEnterCritical
 4887              	.LVL393:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4888              		.loc 1 4673 0 discriminator 4
 4889 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4890 000e DBB2     		uxtb	r3, r3
 4891 0010 022B     		cmp	r3, #2
 4892 0012 07D0     		beq	.L447
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4893              		.loc 1 4680 0
 4894 0014 0024     		movs	r4, #0
 4895              	.LVL394:
 4896              	.L443:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4897              		.loc 1 4683 0
 4898 0016 FFF7FEFF 		bl	vPortExitCritical
 4899              	.LVL395:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4900              		.loc 1 4686 0
 4901 001a 2046     		mov	r0, r4
 4902 001c 10BD     		pop	{r4, pc}
 4903              	.LVL396:
 4904              	.L446:
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4905              		.loc 1 4669 0 discriminator 1
 4906 001e 044B     		ldr	r3, .L448
 4907 0020 1C68     		ldr	r4, [r3]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 185


 4908              	.LVL397:
 4909 0022 F0E7     		b	.L442
 4910              	.LVL398:
 4911              	.L447:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 4912              		.loc 1 4675 0
 4913 0024 0023     		movs	r3, #0
 4914 0026 84F85030 		strb	r3, [r4, #80]
 4915              	.LVL399:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4916              		.loc 1 4676 0
 4917 002a 0124     		movs	r4, #1
 4918              	.LVL400:
 4919 002c F3E7     		b	.L443
 4920              	.L449:
 4921 002e 00BF     		.align	2
 4922              	.L448:
 4923 0030 00000000 		.word	.LANCHOR10
 4924              		.cfi_endproc
 4925              	.LFE51:
 4927              		.global	pxCurrentTCB
 4928              		.section	.bss.pxCurrentTCB,"aw",%nobits
 4929              		.align	2
 4930              		.set	.LANCHOR10,. + 0
 4933              	pxCurrentTCB:
 4934 0000 00000000 		.space	4
 4935              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4936              		.align	2
 4937              		.set	.LANCHOR2,. + 0
 4940              	pxDelayedTaskList:
 4941 0000 00000000 		.space	4
 4942              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4943              		.align	2
 4944              		.set	.LANCHOR8,. + 0
 4947              	pxOverflowDelayedTaskList:
 4948 0000 00000000 		.space	4
 4949              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4950              		.align	2
 4951              		.set	.LANCHOR4,. + 0
 4954              	pxReadyTasksLists:
 4955 0000 00000000 		.space	140
 4955      00000000 
 4955      00000000 
 4955      00000000 
 4955      00000000 
 4956              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 4957              		.align	2
 4958              		.set	.LANCHOR9,. + 0
 4961              	uxCurrentNumberOfTasks:
 4962 0000 00000000 		.space	4
 4963              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 4964              		.align	2
 4965              		.set	.LANCHOR15,. + 0
 4968              	uxDeletedTasksWaitingCleanUp:
 4969 0000 00000000 		.space	4
 4970              		.section	.bss.uxPendedTicks,"aw",%nobits
 4971              		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 186


 4972              		.set	.LANCHOR19,. + 0
 4975              	uxPendedTicks:
 4976 0000 00000000 		.space	4
 4977              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4978              		.align	2
 4979              		.set	.LANCHOR16,. + 0
 4982              	uxSchedulerSuspended:
 4983 0000 00000000 		.space	4
 4984              		.section	.bss.uxTaskNumber,"aw",%nobits
 4985              		.align	2
 4986              		.set	.LANCHOR12,. + 0
 4989              	uxTaskNumber:
 4990 0000 00000000 		.space	4
 4991              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 4992              		.align	2
 4993              		.set	.LANCHOR13,. + 0
 4996              	uxTopReadyPriority:
 4997 0000 00000000 		.space	4
 4998              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 4999              		.align	2
 5000              		.set	.LANCHOR5,. + 0
 5003              	xDelayedTaskList1:
 5004 0000 00000000 		.space	20
 5004      00000000 
 5004      00000000 
 5004      00000000 
 5004      00000000 
 5005              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5006              		.align	2
 5007              		.set	.LANCHOR6,. + 0
 5010              	xDelayedTaskList2:
 5011 0000 00000000 		.space	20
 5011      00000000 
 5011      00000000 
 5011      00000000 
 5011      00000000 
 5012              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5013              		.align	2
 5014              		.set	.LANCHOR17,. + 0
 5017              	xIdleTaskHandle:
 5018 0000 00000000 		.space	4
 5019              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5020              		.align	2
 5021              		.set	.LANCHOR3,. + 0
 5024              	xNextTaskUnblockTime:
 5025 0000 00000000 		.space	4
 5026              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5027              		.align	2
 5028              		.set	.LANCHOR18,. + 0
 5031              	xNumOfOverflows:
 5032 0000 00000000 		.space	4
 5033              		.section	.bss.xPendingReadyList,"aw",%nobits
 5034              		.align	2
 5035              		.set	.LANCHOR1,. + 0
 5038              	xPendingReadyList:
 5039 0000 00000000 		.space	20
 5039      00000000 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 187


 5039      00000000 
 5039      00000000 
 5039      00000000 
 5040              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5041              		.align	2
 5042              		.set	.LANCHOR11,. + 0
 5045              	xSchedulerRunning:
 5046 0000 00000000 		.space	4
 5047              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5048              		.align	2
 5049              		.set	.LANCHOR0,. + 0
 5052              	xSuspendedTaskList:
 5053 0000 00000000 		.space	20
 5053      00000000 
 5053      00000000 
 5053      00000000 
 5053      00000000 
 5054              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5055              		.align	2
 5056              		.set	.LANCHOR7,. + 0
 5059              	xTasksWaitingTermination:
 5060 0000 00000000 		.space	20
 5060      00000000 
 5060      00000000 
 5060      00000000 
 5060      00000000 
 5061              		.section	.bss.xTickCount,"aw",%nobits
 5062              		.align	2
 5063              		.set	.LANCHOR14,. + 0
 5066              	xTickCount:
 5067 0000 00000000 		.space	4
 5068              		.section	.bss.xYieldPending,"aw",%nobits
 5069              		.align	2
 5070              		.set	.LANCHOR20,. + 0
 5073              	xYieldPending:
 5074 0000 00000000 		.space	4
 5075              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5076              		.align	2
 5077              	.LC0:
 5078 0000 49444C45 		.ascii	"IDLE\000"
 5078      00
 5079              		.text
 5080              	.Letext0:
 5081              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 5082              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 5083              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 5084              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 5085              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 5086              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 5087              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 5088              		.file 10 "Inc/FreeRTOSConfig.h"
 5089              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5090              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5091              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5092              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 5093              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 188


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:22     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:90     .text.prvTaskIsTaskSuspended:0000000000000038 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:96     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:102    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:136    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:142    .text.prvDeleteTCB:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:148    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:176    .text.prvInitialiseNewTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:182    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:291    .text.prvInitialiseTaskLists:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:297    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:364    .text.prvInitialiseTaskLists:0000000000000048 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:376    .text.prvAddNewTaskToReadyList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:382    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:490    .text.prvAddNewTaskToReadyList:000000000000008c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:501    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:507    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:608    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:619    .text.xTaskCreate:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:626    .text.xTaskCreate:0000000000000000 xTaskCreate
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:731    .text.vTaskDelete:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:738    .text.vTaskDelete:0000000000000000 vTaskDelete
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:890    .text.vTaskDelete:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:904    .text.uxTaskPriorityGet:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:911    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:950    .text.uxTaskPriorityGet:000000000000001c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:955    .text.uxTaskPriorityGetFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:962    .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1025   .text.uxTaskPriorityGetFromISR:000000000000002c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1030   .text.vTaskPrioritySet:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1037   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1215   .text.vTaskPrioritySet:00000000000000cc $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1223   .text.vTaskResume:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1230   .text.vTaskResume:0000000000000000 vTaskResume
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1333   .text.vTaskResume:0000000000000074 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1341   .text.xTaskResumeFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1348   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1481   .text.xTaskResumeFromISR:0000000000000090 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1490   .text.vTaskStartScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1497   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1600   .text.vTaskStartScheduler:000000000000006c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2464   .text.prvIdleTask:0000000000000000 prvIdleTask
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1612   .text.vTaskEndScheduler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1619   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1657   .text.vTaskEndScheduler:0000000000000020 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1662   .text.vTaskSuspendAll:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1669   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1686   .text.vTaskSuspendAll:000000000000000c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1691   .text.xTaskGetTickCount:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1698   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1714   .text.xTaskGetTickCount:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1719   .text.xTaskGetTickCountFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1726   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1749   .text.xTaskGetTickCountFromISR:000000000000000c $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 189


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1754   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1761   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1776   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1781   .text.pcTaskGetName:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1788   .text.pcTaskGetName:0000000000000000 pcTaskGetName
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1834   .text.pcTaskGetName:0000000000000024 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1841   .text.xTaskIncrementTick:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:1848   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2052   .text.xTaskIncrementTick:00000000000000ec $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2067   .text.xTaskResumeAll:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2074   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2258   .text.xTaskResumeAll:00000000000000d0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2271   .text.vTaskDelay:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2278   .text.vTaskDelay:0000000000000000 vTaskDelay
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2351   .text.vTaskDelay:0000000000000044 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2357   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2363   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2450   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2458   .text.prvIdleTask:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2504   .text.prvIdleTask:0000000000000020 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2510   .text.vTaskSwitchContext:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2517   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2644   .text.vTaskSwitchContext:0000000000000084 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2655   .text.vTaskSuspend:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2662   .text.vTaskSuspend:0000000000000000 vTaskSuspend
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2817   .text.vTaskSuspend:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2829   .text.vTaskPlaceOnEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2836   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2889   .text.vTaskPlaceOnEventList:000000000000002c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2894   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2901   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2989   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:2995   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3002   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3064   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3069   .text.xTaskRemoveFromEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3076   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3179   .text.xTaskRemoveFromEventList:0000000000000074 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3189   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3196   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3311   .text.xTaskRemoveFromUnorderedEventList:0000000000000078 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3320   .text.vTaskSetTimeOutState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3327   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3367   .text.vTaskSetTimeOutState:0000000000000024 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3375   .text.xTaskCheckForTimeOut:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3382   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3508   .text.xTaskCheckForTimeOut:0000000000000078 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3515   .text.vTaskMissedYield:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3522   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3538   .text.vTaskMissedYield:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3543   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3550   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3566   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3571   .text.xTaskGetSchedulerState:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3578   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3610   .text.xTaskGetSchedulerState:0000000000000018 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3616   .text.vTaskPriorityInherit:0000000000000000 $t
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 190


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3623   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3736   .text.vTaskPriorityInherit:0000000000000094 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3743   .text.xTaskPriorityDisinherit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3750   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3904   .text.xTaskPriorityDisinherit:00000000000000a4 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3911   .text.uxTaskResetEventItemValue:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3918   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3941   .text.uxTaskResetEventItemValue:0000000000000014 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3946   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3953   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3979   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3984   .text.ulTaskNotifyTake:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:3991   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4087   .text.ulTaskNotifyTake:0000000000000070 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4093   .text.xTaskNotifyWait:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4100   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4215   .text.xTaskNotifyWait:0000000000000090 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4221   .text.xTaskGenericNotify:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4228   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4294   .text.xTaskGenericNotify:000000000000003e $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4298   .text.xTaskGenericNotify:0000000000000042 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4420   .text.xTaskGenericNotify:00000000000000d0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4428   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4435   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4520   .text.xTaskGenericNotifyFromISR:000000000000005c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4524   .text.xTaskGenericNotifyFromISR:0000000000000060 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4668   .text.xTaskGenericNotifyFromISR:0000000000000108 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4678   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4685   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4851   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4861   .text.xTaskNotifyStateClear:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4868   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4923   .text.xTaskNotifyStateClear:0000000000000030 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4933   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4929   .bss.pxCurrentTCB:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4936   .bss.pxDelayedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4940   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4943   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4947   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4950   .bss.pxReadyTasksLists:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4954   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4957   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4961   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4964   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4968   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4971   .bss.uxPendedTicks:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4975   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4978   .bss.uxSchedulerSuspended:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4982   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4985   .bss.uxTaskNumber:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4989   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4992   .bss.uxTopReadyPriority:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4996   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:4999   .bss.xDelayedTaskList1:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5003   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5006   .bss.xDelayedTaskList2:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5010   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s 			page 191


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5013   .bss.xIdleTaskHandle:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5017   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5020   .bss.xNextTaskUnblockTime:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5024   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5027   .bss.xNumOfOverflows:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5031   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5034   .bss.xPendingReadyList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5038   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5041   .bss.xSchedulerRunning:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5045   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5048   .bss.xSuspendedTaskList:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5052   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5055   .bss.xTasksWaitingTermination:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5059   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5062   .bss.xTickCount:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5066   .bss.xTickCount:0000000000000000 xTickCount
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5069   .bss.xYieldPending:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5073   .bss.xYieldPending:0000000000000000 xYieldPending
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccUax2V3.s:5076   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
