ARM GAS  /tmp/ccfUz9ou.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"timers.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvGetNextExpireTime:
  25              	.LFB16:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/timers.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /tmp/ccfUz9ou.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "FreeRTOS.h"
  79:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "task.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "queue.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "timers.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  84:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  85:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif
  86:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  87:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  88:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  89:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** header files above, but not in this file, in order to generate the correct
ARM GAS  /tmp/ccfUz9ou.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** privileged Vs unprivileged linkage and placement. */
  91:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  92:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  94:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  95:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  96:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** of this file.  If you want to include software timer functionality then ensure
  97:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  98:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  99:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Misc definitions. */
 101:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
 102:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 103:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The definition of the timers themselves. */
 104:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrTimerControl
 105:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 106:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
 107:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
 108:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
 109:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
 110:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
 111:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
 112:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 113:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
 114:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#endif
 115:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 116:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 117:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
 118:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#endif
 119:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } xTIMER;
 120:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
 122:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** name below to enable the use of older kernel aware debuggers. */
 123:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef xTIMER Timer_t;
 124:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 125:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
 126:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
 127:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** and messages that request the execution of a non-timer related callback.  The
 128:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** two message types are defined in two separate structures, xTimerParametersType
 129:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** and xCallbackParametersType respectively. */
 130:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrTimerParameters
 131:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 132:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
 133:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
 134:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } TimerParameter_t;
 135:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrCallbackParameters
 138:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 139:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 140:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 141:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 142:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } CallbackParameters_t;
 143:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 144:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 145:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** that is used to determine which message type is valid. */
 146:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrTimerQueueMessage
ARM GAS  /tmp/ccfUz9ou.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 148:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 149:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	union
 150:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 151:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		TimerParameter_t xTimerParameters;
 152:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 154:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 155:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 156:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			CallbackParameters_t xCallbackParameters;
 157:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 158:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	} u;
 159:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } DaemonTaskMessage_t;
 160:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 161:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 162:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static variables must be declared volatile. */
 163:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 165:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 166:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** timer service task is allowed to access these lists. */
 167:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 168:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 169:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 170:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 171:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 173:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 174:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 175:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*lint +e956 */
 177:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 179:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 181:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 182:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If static allocation is supported then the application must provide the
 183:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	following callback function - which enables the application to optionally
 184:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 185:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	and TCB. */
 186:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 187:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif
 189:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 190:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 191:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 192:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * been initialised already.
 193:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 194:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 195:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 197:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 198:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 199:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * xTimerQueue queue.
 200:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 201:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 202:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 203:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
ARM GAS  /tmp/ccfUz9ou.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 205:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * received on the timer queue.
 206:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 207:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 208:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 210:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 211:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 212:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 213:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 214:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 216:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 217:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * auto reload timer, then call its callback.
 218:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 219:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 220:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 222:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 223:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * current timer list does not still reference some timers.
 224:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 225:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 226:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 228:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 229:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 230:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 232:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 234:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 235:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 236:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 237:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * to pdTRUE.
 238:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 239:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 240:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 241:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 242:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 243:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * until either a timer does expire or a command is received.
 244:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 245:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 246:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 249:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * dynamically to fill in the structure's members.
 250:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 251:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 252:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 253:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 254:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
 255:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 256:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed
 257:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 258:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 259:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 260:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
ARM GAS  /tmp/ccfUz9ou.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 262:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* This function is called when the scheduler is started if
 264:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 265:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	timer service task has been created/initialised.  If timers have already
 266:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	been created then the initialisation will already have been performed. */
 267:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	prvCheckForValidListAndQueue();
 268:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 270:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 271:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 272:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 273:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 274:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 275:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 276:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 278:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 279:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													"Tmr Svc",
 280:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													ulTimerTaskStackSize,
 281:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													NULL,
 282:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 283:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													pxTimerTaskStackBuffer,
 284:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													pxTimerTaskTCBBuffer );
 285:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 286:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xTimerTaskHandle != NULL )
 287:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 288:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xReturn = pdPASS;
 289:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 290:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 291:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#else
 292:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 293:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 294:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									"Tmr Svc",
 295:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 296:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									NULL,
 297:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 298:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									&xTimerTaskHandle );
 299:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 300:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 301:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 302:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 303:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 304:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 305:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 306:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xReturn );
 308:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 309:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 310:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 311:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 313:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
 315:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 316:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								const UBaseType_t uxAutoReload,
 317:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								void * const pvTimerID,
ARM GAS  /tmp/ccfUz9ou.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowe
 319:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 320:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 321:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 323:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 325:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 326:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 327:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 329:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 330:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 331:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				timer was created dynamically in case the timer is later
 332:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				deleted. */
 333:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 334:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 335:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 336:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 337:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 338:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 339:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 340:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 342:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 343:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 344:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 345:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 346:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,
 347:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 348:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										const UBaseType_t uxAutoReload,
 349:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										void * const pvTimerID,
 350:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 351:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										StaticTimer_t *pxTimerBuffer ) /*lint !e971 Unqualified char types are allowed for string
 352:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 353:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 354:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 356:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 357:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 358:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 359:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			structures. */
 360:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 361:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 362:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 363:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* configASSERT_DEFINED */
 364:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 366:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		configASSERT( pxTimerBuffer );
 367:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 368:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 370:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 371:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 372:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 373:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
ARM GAS  /tmp/ccfUz9ou.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* Timers can be created statically or dynamically so note this
 376:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				timer was created statically in case it is later deleted. */
 377:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 378:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 379:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 380:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 381:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 383:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 384:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 385:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 386:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 387:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 389:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 390:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 391:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
 392:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 393:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and sing
 394:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 395:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 396:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 397:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( pxNewTimer != NULL )
 399:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 400:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 401:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		created/initialised. */
 402:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvCheckForValidListAndQueue();
 403:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Initialise the timer structure members using the function
 405:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		parameters. */
 406:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 407:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 408:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 409:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 410:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 411:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 412:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 413:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 414:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 415:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 416:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 418:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 419:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 420:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 421:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 423:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 425:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	on a particular timer definition. */
 426:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 427:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 428:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 429:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 430:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 431:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
ARM GAS  /tmp/ccfUz9ou.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 434:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 435:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 436:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 437:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 438:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 439:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 440:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 441:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 442:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 443:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 444:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 445:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 446:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 447:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 448:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 450:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 451:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 452:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 453:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 454:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 455:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 456:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 457:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 458:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 459:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 461:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 462:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 463:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 464:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 465:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 466:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 467:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 468:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 470:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 471:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 472:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 474:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 475:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 476:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 477:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 479:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 480:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 481:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xReturn;
 482:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 483:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 484:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 485:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 486:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 487:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 488:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccfUz9ou.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 490:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 491:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 492:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 494:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 495:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 496:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 497:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 499:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 500:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 501:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 502:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 504:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	been performed to ensure the list is not empty. */
 505:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 506:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 507:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 509:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 510:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 511:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 512:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 513:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		other than the current time.  It will therefore be inserted into the
 514:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		correct list relative to the time this task thinks it is now. */
 515:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 516:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 517:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The timer expired before it was added to the active timer
 518:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			list.  Reload it now.  */
 519:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 520:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 521:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 522:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 523:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 524:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 525:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 526:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 527:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 528:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 529:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 530:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 531:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 532:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Call the timer callback. */
 534:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 535:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 536:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 537:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 538:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters )
 539:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 540:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 541:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xListWasEmpty;
 542:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Just to avoid compiler warnings. */
 544:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	( void ) pvParameters;
 545:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccfUz9ou.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 547:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 548:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 549:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 550:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Allow the application writer to execute some code in the context of
 551:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 552:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		application includes initialisation code that would benefit from
 553:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		executing after the scheduler has been started. */
 554:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		vApplicationDaemonTaskStartupHook();
 555:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 556:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 557:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 558:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	for( ;; )
 559:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 560:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 561:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		obtain the time at which the next timer will expire. */
 562:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 563:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 564:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 565:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		until either a timer does expire, or a command is received. */
 566:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 567:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 568:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Empty the command queue. */
 569:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvProcessReceivedCommands();
 570:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 571:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 572:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 573:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 575:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 576:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 577:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched;
 578:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	vTaskSuspendAll();
 580:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 581:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 582:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 583:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		then don't process this timer as any timers that remained in the list
 584:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		when the lists were switched will have been processed within the
 585:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvSampleTimeNow() function. */
 586:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 587:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 588:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 589:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 590:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 591:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 592:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) xTaskResumeAll();
 593:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 594:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 595:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 596:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 597:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The tick count has not overflowed, and the next expire
 598:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				time has not been reached yet.  This task should therefore
 599:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				block to wait for the next expire time or a command to be
 600:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				received - whichever comes first.  The following line cannot
 601:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 602:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case when the current timer list is empty. */
ARM GAS  /tmp/ccfUz9ou.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				if( xListWasEmpty != pdFALSE )
 604:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 605:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The current timer list is empty - is the overflow list
 606:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					also empty? */
 607:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 608:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 609:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 610:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 611:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 612:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 613:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 614:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 615:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					block time to expire.  If a command arrived between the
 616:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					critical section being exited and this yield then the yield
 617:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					will not cause the task to block. */
 618:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					portYIELD_WITHIN_API();
 619:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 620:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				else
 621:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 622:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 623:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 624:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 625:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 627:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 628:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			( void ) xTaskResumeAll();
 629:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 630:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 631:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 632:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 633:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 634:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 635:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
  27              		.loc 1 635 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 636:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 637:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 639:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 640:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 641:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 642:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 643:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	timer lists will be switched and the next expiry time can be
 644:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	re-assessed.  */
 645:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  33              		.loc 1 645 0
  34 0000 064B     		ldr	r3, .L4
  35 0002 1A68     		ldr	r2, [r3]
  36 0004 1368     		ldr	r3, [r2]
  37 0006 B3FA83F3 		clz	r3, r3
  38 000a 5B09     		lsrs	r3, r3, #5
  39 000c 0360     		str	r3, [r0]
 646:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
ARM GAS  /tmp/ccfUz9ou.s 			page 13


  40              		.loc 1 646 0
  41 000e 13B9     		cbnz	r3, .L3
 647:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 648:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  42              		.loc 1 648 0
  43 0010 D368     		ldr	r3, [r2, #12]
  44 0012 1868     		ldr	r0, [r3]
  45              	.LVL1:
  46 0014 7047     		bx	lr
  47              	.LVL2:
  48              	.L3:
 649:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 650:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 651:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 652:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 653:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
  49              		.loc 1 653 0
  50 0016 0020     		movs	r0, #0
  51              	.LVL3:
 654:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 655:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xNextExpireTime;
 657:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
  52              		.loc 1 657 0
  53 0018 7047     		bx	lr
  54              	.L5:
  55 001a 00BF     		.align	2
  56              	.L4:
  57 001c 00000000 		.word	.LANCHOR0
  58              		.cfi_endproc
  59              	.LFE16:
  61              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  62              		.align	2
  63              		.thumb
  64              		.thumb_func
  66              	prvInsertTimerInActiveList:
  67              	.LFB18:
 658:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 659:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 660:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 661:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 662:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 663:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 664:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 666:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 667:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 668:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 669:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvSwitchTimerLists();
 670:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 671:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 672:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 673:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 674:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 675:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 676:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xLastTime = xTimeNow;
ARM GAS  /tmp/ccfUz9ou.s 			page 14


 678:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimeNow;
 680:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 681:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 682:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 683:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 684:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
  68              		.loc 1 684 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              	.LVL4:
  73 0000 08B5     		push	{r3, lr}
  74              	.LCFI0:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
  78              	.LVL5:
 685:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 686:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 687:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  79              		.loc 1 687 0
  80 0002 4160     		str	r1, [r0, #4]
 688:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  81              		.loc 1 688 0
  82 0004 0061     		str	r0, [r0, #16]
 689:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 690:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
  83              		.loc 1 690 0
  84 0006 9142     		cmp	r1, r2
  85 0008 0AD8     		bhi	.L7
 691:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 692:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 693:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		timer was issued, and the time the command was processed? */
 694:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
  86              		.loc 1 694 0
  87 000a D21A     		subs	r2, r2, r3
  88              	.LVL6:
  89 000c 8369     		ldr	r3, [r0, #24]
  90              	.LVL7:
  91 000e 9A42     		cmp	r2, r3
  92 0010 11D2     		bcs	.L10
 695:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 696:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The time between a command being issued and the command being
 697:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			processed actually exceeds the timers period.  */
 698:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 699:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 700:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 701:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 702:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  93              		.loc 1 702 0
  94 0012 011D     		adds	r1, r0, #4
  95              	.LVL8:
  96 0014 0A4B     		ldr	r3, .L13
  97 0016 1868     		ldr	r0, [r3]
  98              	.LVL9:
  99 0018 FFF7FEFF 		bl	vListInsert
ARM GAS  /tmp/ccfUz9ou.s 			page 15


 100              	.LVL10:
 685:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 101              		.loc 1 685 0
 102 001c 0020     		movs	r0, #0
 103 001e 08BD     		pop	{r3, pc}
 104              	.LVL11:
 105              	.L7:
 703:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 704:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 705:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 706:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 707:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 106              		.loc 1 707 0
 107 0020 9A42     		cmp	r2, r3
 108 0022 01D2     		bcs	.L9
 109              		.loc 1 707 0 is_stmt 0 discriminator 1
 110 0024 9942     		cmp	r1, r3
 111 0026 08D2     		bcs	.L11
 112              	.L9:
 708:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 709:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 710:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			but the expiry time has not, then the timer must have already passed
 711:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			its expiry time and should be processed immediately. */
 712:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 713:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 714:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 715:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 716:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 113              		.loc 1 716 0 is_stmt 1
 114 0028 011D     		adds	r1, r0, #4
 115              	.LVL12:
 116 002a 064B     		ldr	r3, .L13+4
 117              	.LVL13:
 118 002c 1868     		ldr	r0, [r3]
 119              	.LVL14:
 120 002e FFF7FEFF 		bl	vListInsert
 121              	.LVL15:
 685:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 122              		.loc 1 685 0
 123 0032 0020     		movs	r0, #0
 124 0034 08BD     		pop	{r3, pc}
 125              	.LVL16:
 126              	.L10:
 698:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 127              		.loc 1 698 0
 128 0036 0120     		movs	r0, #1
 129              	.LVL17:
 130 0038 08BD     		pop	{r3, pc}
 131              	.LVL18:
 132              	.L11:
 712:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 133              		.loc 1 712 0
 134 003a 0120     		movs	r0, #1
 135              	.LVL19:
 717:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 718:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 719:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccfUz9ou.s 			page 16


 720:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xProcessTimerNow;
 721:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 136              		.loc 1 721 0
 137 003c 08BD     		pop	{r3, pc}
 138              	.LVL20:
 139              	.L14:
 140 003e 00BF     		.align	2
 141              	.L13:
 142 0040 00000000 		.word	.LANCHOR1
 143 0044 00000000 		.word	.LANCHOR0
 144              		.cfi_endproc
 145              	.LFE18:
 147              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 148              		.align	2
 149              		.thumb
 150              		.thumb_func
 152              	prvCheckForValidListAndQueue:
 153              	.LFB21:
 722:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void	prvProcessReceivedCommands( void )
 725:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 726:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 727:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 728:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 729:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 730:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 732:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 734:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 735:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* Negative commands are pended function calls rather than timer
 736:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			commands. */
 737:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 738:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 739:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 740:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 741:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 742:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 743:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configASSERT( pxCallback );
 744:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 745:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* Call the function. */
 746:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 747:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 748:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 749:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 750:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 751:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 752:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 753:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 754:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 755:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 756:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		function calls. */
 757:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 758:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 759:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 760:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			software timer. */
ARM GAS  /tmp/ccfUz9ou.s 			page 17


 761:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 762:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 763:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 764:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 765:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The timer is in a list, remove it. */
 766:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 767:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 768:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 769:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 771:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 772:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 774:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 776:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 777:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			called after the message is received from xTimerQueue so there is no
 778:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			possibility of a higher priority task adding a message to the message
 779:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 780:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 781:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 782:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 783:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			switch( xMessage.xMessageID )
 784:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 785:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START :
 786:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 787:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_RESET :
 788:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 789:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 790:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* Start or restart a timer. */
 791:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 792:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 793:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						/* The timer expired before it was added to the active
 794:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						timer list.  Process it now. */
 795:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 796:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 797:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 798:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 799:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 800:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 801:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 802:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 803:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 804:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						else
 805:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 806:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 807:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 808:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 809:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					else
 810:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 811:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 812:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 813:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 814:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP :
 816:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 817:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The timer has already been removed from the active list.
ARM GAS  /tmp/ccfUz9ou.s 			page 18


 818:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					There is nothing to do here. */
 819:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 820:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 822:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 823:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 824:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 825:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The new period does not really have a reference, and can
 827:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					be longer or shorter than the old one.  The command time is
 828:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					therefore set to the current time, and as the period cannot
 829:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					be zero the next expiry time can only be in the future,
 830:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 831:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					no fail case that needs to be handled here. */
 832:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 833:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 834:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 835:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_DELETE :
 836:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The timer has already been removed from the active list,
 837:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					just free up the memory if the memory was dynamically
 838:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					allocated. */
 839:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 840:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 841:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						/* The timer can only have been allocated dynamically -
 842:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						free it again. */
 843:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						vPortFree( pxTimer );
 844:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 845:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 846:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 847:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						/* The timer could have been allocated statically or
 848:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						dynamically, so check before attempting to free the
 849:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						memory. */
 850:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 851:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 852:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							vPortFree( pxTimer );
 853:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 854:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						else
 855:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 856:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 858:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 859:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 860:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 861:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 862:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				default	:
 863:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* Don't expect to get here. */
 864:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 865:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 866:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 867:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 868:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 869:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 870:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 871:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void )
 872:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 873:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 874:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** List_t *pxTemp;
ARM GAS  /tmp/ccfUz9ou.s 			page 19


 875:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 876:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 877:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 879:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	If there are any timers still referenced from the current timer list
 880:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	then they must have expired and should be processed before the lists
 881:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	are switched. */
 882:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 883:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 884:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 885:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 886:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Remove the timer from the list. */
 887:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 888:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 889:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 890:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 892:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 893:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		have not yet been switched. */
 894:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 895:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 897:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 899:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			the timer going into the same timer list then it has already expired
 900:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			and the timer should be re-inserted into the current list so it is
 901:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 902:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 903:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			the lists have been swapped. */
 904:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 905:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 906:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 908:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 909:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 910:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 911:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 912:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 913:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 914:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 915:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 916:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 917:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 918:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 919:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 920:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 921:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 922:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 924:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxTemp = pxCurrentTimerList;
 925:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 926:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 927:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 928:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 929:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void )
 931:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
ARM GAS  /tmp/ccfUz9ou.s 			page 20


 154              		.loc 1 931 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158 0000 38B5     		push	{r3, r4, r5, lr}
 159              	.LCFI1:
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 3, -16
 162              		.cfi_offset 4, -12
 163              		.cfi_offset 5, -8
 164              		.cfi_offset 14, -4
 932:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 933:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	queue used to communicate with the timer service, have been
 934:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	initialised. */
 935:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 165              		.loc 1 935 0
 166 0002 FFF7FEFF 		bl	vPortEnterCritical
 167              	.LVL21:
 936:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 937:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xTimerQueue == NULL )
 168              		.loc 1 937 0
 169 0006 0E4B     		ldr	r3, .L18
 170 0008 1B68     		ldr	r3, [r3]
 171 000a B3B9     		cbnz	r3, .L16
 938:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 939:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 172              		.loc 1 939 0
 173 000c 0D4D     		ldr	r5, .L18+4
 174 000e 2846     		mov	r0, r5
 175 0010 FFF7FEFF 		bl	vListInitialise
 176              	.LVL22:
 940:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 177              		.loc 1 940 0
 178 0014 0C4C     		ldr	r4, .L18+8
 179 0016 2046     		mov	r0, r4
 180 0018 FFF7FEFF 		bl	vListInitialise
 181              	.LVL23:
 941:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 182              		.loc 1 941 0
 183 001c 0B4B     		ldr	r3, .L18+12
 184 001e 1D60     		str	r5, [r3]
 942:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 185              		.loc 1 942 0
 186 0020 0B4B     		ldr	r3, .L18+16
 187 0022 1C60     		str	r4, [r3]
 943:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 945:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 946:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The timer queue is allocated statically in case
 947:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 948:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				static StaticQueue_t xStaticTimerQueue;
 949:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_
 950:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 951:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskM
 952:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 953:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#else
 954:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
ARM GAS  /tmp/ccfUz9ou.s 			page 21


 955:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 188              		.loc 1 955 0
 189 0024 0022     		movs	r2, #0
 190 0026 0C21     		movs	r1, #12
 191 0028 0A20     		movs	r0, #10
 192 002a FFF7FEFF 		bl	xQueueGenericCreate
 193              	.LVL24:
 194 002e 044B     		ldr	r3, .L18
 195 0030 1860     		str	r0, [r3]
 956:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 957:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif
 958:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 959:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 960:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 961:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				if( xTimerQueue != NULL )
 196              		.loc 1 961 0
 197 0032 10B1     		cbz	r0, .L16
 962:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 963:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 198              		.loc 1 963 0
 199 0034 0749     		ldr	r1, .L18+20
 200 0036 FFF7FEFF 		bl	vQueueAddToRegistry
 201              	.LVL25:
 202              	.L16:
 964:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 965:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				else
 966:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 967:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 968:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 969:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 970:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 971:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 972:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 973:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 974:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 975:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 976:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 977:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 203              		.loc 1 977 0
 204 003a FFF7FEFF 		bl	vPortExitCritical
 205              	.LVL26:
 206 003e 38BD     		pop	{r3, r4, r5, pc}
 207              	.L19:
 208              		.align	2
 209              	.L18:
 210 0040 00000000 		.word	.LANCHOR2
 211 0044 00000000 		.word	.LANCHOR3
 212 0048 00000000 		.word	.LANCHOR4
 213 004c 00000000 		.word	.LANCHOR0
 214 0050 00000000 		.word	.LANCHOR1
 215 0054 00000000 		.word	.LC0
 216              		.cfi_endproc
 217              	.LFE21:
 219              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 220              		.align	2
 221              		.thumb
 222              		.thumb_func
ARM GAS  /tmp/ccfUz9ou.s 			page 22


 224              	prvInitialiseNewTimer:
 225              	.LFB7:
 394:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 226              		.loc 1 394 0
 227              		.cfi_startproc
 228              		@ args = 8, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              	.LVL27:
 231 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 232              	.LCFI2:
 233              		.cfi_def_cfa_offset 24
 234              		.cfi_offset 4, -24
 235              		.cfi_offset 5, -20
 236              		.cfi_offset 6, -16
 237              		.cfi_offset 7, -12
 238              		.cfi_offset 8, -8
 239              		.cfi_offset 14, -4
 240 0004 079C     		ldr	r4, [sp, #28]
 396:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 241              		.loc 1 396 0
 242 0006 41B9     		cbnz	r1, .L21
 243              	.LBB30:
 244              	.LBB31:
 245              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /tmp/ccfUz9ou.s 			page 23


  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
ARM GAS  /tmp/ccfUz9ou.s 			page 24


  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccfUz9ou.s 			page 25


 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccfUz9ou.s 			page 26


 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 246              		.loc 2 237 0
 247              		.syntax unified
 248              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 249 0008 4FF05003 			mov r3, #80												
 250 000c 83F31188 		msr basepri, r3											
 251 0010 BFF36F8F 		isb														
 252 0014 BFF34F8F 		dsb														
 253              	
 254              	@ 0 "" 2
 255              	.LVL28:
 256              		.thumb
 257              		.syntax unified
 258              	.L22:
 259 0018 FEE7     		b	.L22
 260              	.LVL29:
 261              	.L21:
 262 001a 0F46     		mov	r7, r1
 263              	.LBE31:
 264              	.LBE30:
 398:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 265              		.loc 1 398 0
 266 001c 74B1     		cbz	r4, .L20
 267 001e 1D46     		mov	r5, r3
 268 0020 1646     		mov	r6, r2
ARM GAS  /tmp/ccfUz9ou.s 			page 27


 269 0022 8046     		mov	r8, r0
 402:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 270              		.loc 1 402 0
 271 0024 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 272              	.LVL30:
 406:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 273              		.loc 1 406 0
 274 0028 C4F80080 		str	r8, [r4]
 407:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 275              		.loc 1 407 0
 276 002c A761     		str	r7, [r4, #24]
 408:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 277              		.loc 1 408 0
 278 002e E661     		str	r6, [r4, #28]
 409:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 279              		.loc 1 409 0
 280 0030 2562     		str	r5, [r4, #32]
 410:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 281              		.loc 1 410 0
 282 0032 069B     		ldr	r3, [sp, #24]
 283 0034 6362     		str	r3, [r4, #36]
 411:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 284              		.loc 1 411 0
 285 0036 201D     		adds	r0, r4, #4
 286 0038 FFF7FEFF 		bl	vListInitialiseItem
 287              	.LVL31:
 288              	.L20:
 289 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 290              		.cfi_endproc
 291              	.LFE7:
 293              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 294              		.align	2
 295              		.global	xTimerCreateTimerTask
 296              		.thumb
 297              		.thumb_func
 299              	xTimerCreateTimerTask:
 300              	.LFB5:
 260:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 301              		.loc 1 260 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305 0000 00B5     		push	{lr}
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 4
 308              		.cfi_offset 14, -4
 309 0002 83B0     		sub	sp, sp, #12
 310              	.LCFI4:
 311              		.cfi_def_cfa_offset 16
 312              	.LVL32:
 267:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 313              		.loc 1 267 0
 314 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 315              	.LVL33:
 269:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 316              		.loc 1 269 0
 317 0008 0E4B     		ldr	r3, .L31
ARM GAS  /tmp/ccfUz9ou.s 			page 28


 318 000a 1B68     		ldr	r3, [r3]
 319 000c 5BB1     		cbz	r3, .L29
 293:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									"Tmr Svc",
 320              		.loc 1 293 0
 321 000e 0E4B     		ldr	r3, .L31+4
 322 0010 0193     		str	r3, [sp, #4]
 323 0012 0323     		movs	r3, #3
 324 0014 0093     		str	r3, [sp]
 325 0016 0023     		movs	r3, #0
 326 0018 4FF48072 		mov	r2, #256
 327 001c 0B49     		ldr	r1, .L31+8
 328 001e 0C48     		ldr	r0, .L31+12
 329 0020 FFF7FEFF 		bl	xTaskCreate
 330              	.LVL34:
 331 0024 00E0     		b	.L26
 332              	.LVL35:
 333              	.L29:
 261:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 334              		.loc 1 261 0
 335 0026 0020     		movs	r0, #0
 336              	.LVL36:
 337              	.L26:
 307:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 338              		.loc 1 307 0
 339 0028 40B9     		cbnz	r0, .L27
 340              	.LBB32:
 341              	.LBB33:
 342              		.loc 2 237 0
 343              		.syntax unified
 344              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 345 002a 4FF05003 			mov r3, #80												
 346 002e 83F31188 		msr basepri, r3											
 347 0032 BFF36F8F 		isb														
 348 0036 BFF34F8F 		dsb														
 349              	
 350              	@ 0 "" 2
 351              	.LVL37:
 352              		.thumb
 353              		.syntax unified
 354              	.L28:
 355 003a FEE7     		b	.L28
 356              	.L27:
 357              	.LBE33:
 358              	.LBE32:
 309:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 359              		.loc 1 309 0
 360 003c 03B0     		add	sp, sp, #12
 361              	.LCFI5:
 362              		.cfi_def_cfa_offset 4
 363              		@ sp needed
 364 003e 5DF804FB 		ldr	pc, [sp], #4
 365              	.L32:
 366 0042 00BF     		.align	2
 367              	.L31:
 368 0044 00000000 		.word	.LANCHOR2
 369 0048 00000000 		.word	.LANCHOR5
 370 004c 08000000 		.word	.LC1
ARM GAS  /tmp/ccfUz9ou.s 			page 29


 371 0050 00000000 		.word	prvTimerTask
 372              		.cfi_endproc
 373              	.LFE5:
 375              		.section	.text.xTimerCreate,"ax",%progbits
 376              		.align	2
 377              		.global	xTimerCreate
 378              		.thumb
 379              		.thumb_func
 381              	xTimerCreate:
 382              	.LFB6:
 319:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 383              		.loc 1 319 0
 384              		.cfi_startproc
 385              		@ args = 4, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              	.LVL38:
 388 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 389              	.LCFI6:
 390              		.cfi_def_cfa_offset 24
 391              		.cfi_offset 4, -24
 392              		.cfi_offset 5, -20
 393              		.cfi_offset 6, -16
 394              		.cfi_offset 7, -12
 395              		.cfi_offset 8, -8
 396              		.cfi_offset 14, -4
 397 0004 82B0     		sub	sp, sp, #8
 398              	.LCFI7:
 399              		.cfi_def_cfa_offset 32
 400 0006 0546     		mov	r5, r0
 401 0008 0E46     		mov	r6, r1
 402 000a 1746     		mov	r7, r2
 403 000c 9846     		mov	r8, r3
 322:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 404              		.loc 1 322 0
 405 000e 2820     		movs	r0, #40
 406              	.LVL39:
 407 0010 FFF7FEFF 		bl	pvPortMalloc
 408              	.LVL40:
 324:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 409              		.loc 1 324 0
 410 0014 0446     		mov	r4, r0
 411 0016 40B1     		cbz	r0, .L34
 326:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 412              		.loc 1 326 0
 413 0018 0190     		str	r0, [sp, #4]
 414 001a 089B     		ldr	r3, [sp, #32]
 415 001c 0093     		str	r3, [sp]
 416 001e 4346     		mov	r3, r8
 417 0020 3A46     		mov	r2, r7
 418 0022 3146     		mov	r1, r6
 419 0024 2846     		mov	r0, r5
 420              	.LVL41:
 421 0026 FFF7FEFF 		bl	prvInitialiseNewTimer
 422              	.LVL42:
 423              	.L34:
 339:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 424              		.loc 1 339 0
ARM GAS  /tmp/ccfUz9ou.s 			page 30


 425 002a 2046     		mov	r0, r4
 426 002c 02B0     		add	sp, sp, #8
 427              	.LCFI8:
 428              		.cfi_def_cfa_offset 24
 429              		@ sp needed
 430 002e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 431              		.cfi_endproc
 432              	.LFE6:
 434 0032 00BF     		.section	.text.xTimerGenericCommand,"ax",%progbits
 435              		.align	2
 436              		.global	xTimerGenericCommand
 437              		.thumb
 438              		.thumb_func
 440              	xTimerGenericCommand:
 441              	.LFB8:
 418:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 442              		.loc 1 418 0
 443              		.cfi_startproc
 444              		@ args = 4, pretend = 0, frame = 16
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              	.LVL43:
 422:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 447              		.loc 1 422 0
 448 0000 40B9     		cbnz	r0, .L37
 449              	.LBB34:
 450              	.LBB35:
 451              		.loc 2 237 0
 452              		.syntax unified
 453              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 454 0002 4FF05003 			mov r3, #80												
 455 0006 83F31188 		msr basepri, r3											
 456 000a BFF36F8F 		isb														
 457 000e BFF34F8F 		dsb														
 458              	
 459              	@ 0 "" 2
 460              	.LVL44:
 461              		.thumb
 462              		.syntax unified
 463              	.L38:
 464 0012 FEE7     		b	.L38
 465              	.LVL45:
 466              	.L37:
 467              	.LBE35:
 468              	.LBE34:
 418:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 469              		.loc 1 418 0
 470 0014 30B5     		push	{r4, r5, lr}
 471              	.LCFI9:
 472              		.cfi_def_cfa_offset 12
 473              		.cfi_offset 4, -12
 474              		.cfi_offset 5, -8
 475              		.cfi_offset 14, -4
 476 0016 85B0     		sub	sp, sp, #20
 477              	.LCFI10:
 478              		.cfi_def_cfa_offset 32
 479 0018 1546     		mov	r5, r2
 480 001a 0446     		mov	r4, r0
ARM GAS  /tmp/ccfUz9ou.s 			page 31


 426:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 481              		.loc 1 426 0
 482 001c 124A     		ldr	r2, .L44
 483              	.LVL46:
 484 001e 1068     		ldr	r0, [r2]
 485              	.LVL47:
 486 0020 F0B1     		cbz	r0, .L42
 487 0022 1A46     		mov	r2, r3
 429:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 488              		.loc 1 429 0
 489 0024 0191     		str	r1, [sp, #4]
 430:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 490              		.loc 1 430 0
 491 0026 0295     		str	r5, [sp, #8]
 431:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 492              		.loc 1 431 0
 493 0028 0394     		str	r4, [sp, #12]
 433:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 494              		.loc 1 433 0
 495 002a 0529     		cmp	r1, #5
 496 002c 13DC     		bgt	.L40
 497              	.LVL48:
 435:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 498              		.loc 1 435 0
 499 002e FFF7FEFF 		bl	xTaskGetSchedulerState
 500              	.LVL49:
 501 0032 0228     		cmp	r0, #2
 502 0034 07D1     		bne	.L41
 437:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 503              		.loc 1 437 0
 504 0036 0023     		movs	r3, #0
 505 0038 089A     		ldr	r2, [sp, #32]
 506 003a 01A9     		add	r1, sp, #4
 507 003c 0A48     		ldr	r0, .L44
 508 003e 0068     		ldr	r0, [r0]
 509 0040 FFF7FEFF 		bl	xQueueGenericSend
 510              	.LVL50:
 511 0044 0DE0     		b	.L39
 512              	.LVL51:
 513              	.L41:
 441:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 514              		.loc 1 441 0
 515 0046 0023     		movs	r3, #0
 516 0048 1A46     		mov	r2, r3
 517 004a 01A9     		add	r1, sp, #4
 518 004c 0648     		ldr	r0, .L44
 519 004e 0068     		ldr	r0, [r0]
 520 0050 FFF7FEFF 		bl	xQueueGenericSend
 521              	.LVL52:
 522 0054 05E0     		b	.L39
 523              	.LVL53:
 524              	.L40:
 446:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 525              		.loc 1 446 0
 526 0056 0023     		movs	r3, #0
 527 0058 01A9     		add	r1, sp, #4
 528              	.LVL54:
ARM GAS  /tmp/ccfUz9ou.s 			page 32


 529 005a FFF7FEFF 		bl	xQueueGenericSendFromISR
 530              	.LVL55:
 531 005e 00E0     		b	.L39
 532              	.LVL56:
 533              	.L42:
 419:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 534              		.loc 1 419 0
 535 0060 0020     		movs	r0, #0
 536              	.LVL57:
 537              	.L39:
 457:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 538              		.loc 1 457 0
 539 0062 05B0     		add	sp, sp, #20
 540              	.LCFI11:
 541              		.cfi_def_cfa_offset 12
 542              		@ sp needed
 543 0064 30BD     		pop	{r4, r5, pc}
 544              	.LVL58:
 545              	.L45:
 546 0066 00BF     		.align	2
 547              	.L44:
 548 0068 00000000 		.word	.LANCHOR2
 549              		.cfi_endproc
 550              	.LFE8:
 552              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 553              		.align	2
 554              		.thumb
 555              		.thumb_func
 557              	prvSwitchTimerLists:
 558              	.LFB20:
 872:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 559              		.loc 1 872 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563 0000 70B5     		push	{r4, r5, r6, lr}
 564              	.LCFI12:
 565              		.cfi_def_cfa_offset 16
 566              		.cfi_offset 4, -16
 567              		.cfi_offset 5, -12
 568              		.cfi_offset 6, -8
 569              		.cfi_offset 14, -4
 570 0002 82B0     		sub	sp, sp, #8
 571              	.LCFI13:
 572              		.cfi_def_cfa_offset 24
 882:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 573              		.loc 1 882 0
 574 0004 29E0     		b	.L48
 575              	.L52:
 884:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 576              		.loc 1 884 0
 577 0006 DB68     		ldr	r3, [r3, #12]
 578 0008 1E68     		ldr	r6, [r3]
 579              	.LVL59:
 887:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 580              		.loc 1 887 0
 581 000a DC68     		ldr	r4, [r3, #12]
ARM GAS  /tmp/ccfUz9ou.s 			page 33


 582              	.LVL60:
 888:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 583              		.loc 1 888 0
 584 000c 251D     		adds	r5, r4, #4
 585 000e 2846     		mov	r0, r5
 586 0010 FFF7FEFF 		bl	uxListRemove
 587              	.LVL61:
 894:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 588              		.loc 1 894 0
 589 0014 636A     		ldr	r3, [r4, #36]
 590 0016 2046     		mov	r0, r4
 591 0018 9847     		blx	r3
 592              	.LVL62:
 896:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 593              		.loc 1 896 0
 594 001a E369     		ldr	r3, [r4, #28]
 595 001c 012B     		cmp	r3, #1
 596 001e 1CD1     		bne	.L48
 904:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 597              		.loc 1 904 0
 598 0020 A369     		ldr	r3, [r4, #24]
 599 0022 3344     		add	r3, r3, r6
 600              	.LVL63:
 905:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 601              		.loc 1 905 0
 602 0024 9E42     		cmp	r6, r3
 603 0026 07D2     		bcs	.L49
 907:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 604              		.loc 1 907 0
 605 0028 6360     		str	r3, [r4, #4]
 908:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 606              		.loc 1 908 0
 607 002a 2461     		str	r4, [r4, #16]
 909:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 608              		.loc 1 909 0
 609 002c 2946     		mov	r1, r5
 610 002e 114B     		ldr	r3, .L54
 611              	.LVL64:
 612 0030 1868     		ldr	r0, [r3]
 613 0032 FFF7FEFF 		bl	vListInsert
 614              	.LVL65:
 615 0036 10E0     		b	.L48
 616              	.LVL66:
 617              	.L49:
 913:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 618              		.loc 1 913 0
 619 0038 0021     		movs	r1, #0
 620 003a 0091     		str	r1, [sp]
 621 003c 0B46     		mov	r3, r1
 622              	.LVL67:
 623 003e 3246     		mov	r2, r6
 624 0040 2046     		mov	r0, r4
 625 0042 FFF7FEFF 		bl	xTimerGenericCommand
 626              	.LVL68:
 914:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 627              		.loc 1 914 0
 628 0046 40B9     		cbnz	r0, .L48
ARM GAS  /tmp/ccfUz9ou.s 			page 34


 629              	.LBB36:
 630              	.LBB37:
 631              		.loc 2 237 0
 632              		.syntax unified
 633              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 634 0048 4FF05003 			mov r3, #80												
 635 004c 83F31188 		msr basepri, r3											
 636 0050 BFF36F8F 		isb														
 637 0054 BFF34F8F 		dsb														
 638              	
 639              	@ 0 "" 2
 640              	.LVL69:
 641              		.thumb
 642              		.syntax unified
 643              	.L51:
 644 0058 FEE7     		b	.L51
 645              	.LVL70:
 646              	.L48:
 647              	.LBE37:
 648              	.LBE36:
 882:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 649              		.loc 1 882 0
 650 005a 064B     		ldr	r3, .L54
 651 005c 1B68     		ldr	r3, [r3]
 652 005e 1A68     		ldr	r2, [r3]
 653 0060 002A     		cmp	r2, #0
 654 0062 D0D1     		bne	.L52
 655              	.LVL71:
 925:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 656              		.loc 1 925 0
 657 0064 044A     		ldr	r2, .L54+4
 658 0066 1068     		ldr	r0, [r2]
 659 0068 0249     		ldr	r1, .L54
 660 006a 0860     		str	r0, [r1]
 926:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 661              		.loc 1 926 0
 662 006c 1360     		str	r3, [r2]
 927:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 663              		.loc 1 927 0
 664 006e 02B0     		add	sp, sp, #8
 665              	.LCFI14:
 666              		.cfi_def_cfa_offset 16
 667              		@ sp needed
 668 0070 70BD     		pop	{r4, r5, r6, pc}
 669              	.L55:
 670 0072 00BF     		.align	2
 671              	.L54:
 672 0074 00000000 		.word	.LANCHOR0
 673 0078 00000000 		.word	.LANCHOR1
 674              		.cfi_endproc
 675              	.LFE20:
 677              		.section	.text.prvSampleTimeNow,"ax",%progbits
 678              		.align	2
 679              		.thumb
 680              		.thumb_func
 682              	prvSampleTimeNow:
 683              	.LFB17:
ARM GAS  /tmp/ccfUz9ou.s 			page 35


 661:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 684              		.loc 1 661 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              	.LVL72:
 689 0000 38B5     		push	{r3, r4, r5, lr}
 690              	.LCFI15:
 691              		.cfi_def_cfa_offset 16
 692              		.cfi_offset 3, -16
 693              		.cfi_offset 4, -12
 694              		.cfi_offset 5, -8
 695              		.cfi_offset 14, -4
 696 0002 0546     		mov	r5, r0
 665:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 697              		.loc 1 665 0
 698 0004 FFF7FEFF 		bl	xTaskGetTickCount
 699              	.LVL73:
 700 0008 0446     		mov	r4, r0
 701              	.LVL74:
 667:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 702              		.loc 1 667 0
 703 000a 074B     		ldr	r3, .L60
 704 000c 1B68     		ldr	r3, [r3]
 705 000e 9842     		cmp	r0, r3
 706 0010 04D2     		bcs	.L57
 669:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 707              		.loc 1 669 0
 708 0012 FFF7FEFF 		bl	prvSwitchTimerLists
 709              	.LVL75:
 670:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 710              		.loc 1 670 0
 711 0016 0123     		movs	r3, #1
 712 0018 2B60     		str	r3, [r5]
 713 001a 01E0     		b	.L58
 714              	.LVL76:
 715              	.L57:
 674:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 716              		.loc 1 674 0
 717 001c 0023     		movs	r3, #0
 718 001e 2B60     		str	r3, [r5]
 719              	.LVL77:
 720              	.L58:
 677:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 721              		.loc 1 677 0
 722 0020 014B     		ldr	r3, .L60
 723 0022 1C60     		str	r4, [r3]
 680:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 724              		.loc 1 680 0
 725 0024 2046     		mov	r0, r4
 726 0026 38BD     		pop	{r3, r4, r5, pc}
 727              	.LVL78:
 728              	.L61:
 729              		.align	2
 730              	.L60:
 731 0028 00000000 		.word	.LANCHOR6
 732              		.cfi_endproc
ARM GAS  /tmp/ccfUz9ou.s 			page 36


 733              	.LFE17:
 735              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 736              		.align	2
 737              		.thumb
 738              		.thumb_func
 740              	prvProcessExpiredTimer:
 741              	.LFB13:
 499:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 742              		.loc 1 499 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              	.LVL79:
 747 0000 70B5     		push	{r4, r5, r6, lr}
 748              	.LCFI16:
 749              		.cfi_def_cfa_offset 16
 750              		.cfi_offset 4, -16
 751              		.cfi_offset 5, -12
 752              		.cfi_offset 6, -8
 753              		.cfi_offset 14, -4
 754 0002 82B0     		sub	sp, sp, #8
 755              	.LCFI17:
 756              		.cfi_def_cfa_offset 24
 757 0004 0546     		mov	r5, r0
 758 0006 0E46     		mov	r6, r1
 501:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 759              		.loc 1 501 0
 760 0008 134B     		ldr	r3, .L66
 761 000a 1B68     		ldr	r3, [r3]
 762 000c DB68     		ldr	r3, [r3, #12]
 763 000e DC68     		ldr	r4, [r3, #12]
 764              	.LVL80:
 505:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 765              		.loc 1 505 0
 766 0010 201D     		adds	r0, r4, #4
 767              	.LVL81:
 768 0012 FFF7FEFF 		bl	uxListRemove
 769              	.LVL82:
 510:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 770              		.loc 1 510 0
 771 0016 E369     		ldr	r3, [r4, #28]
 772 0018 012B     		cmp	r3, #1
 773 001a 18D1     		bne	.L63
 515:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 774              		.loc 1 515 0
 775 001c A169     		ldr	r1, [r4, #24]
 776 001e 2B46     		mov	r3, r5
 777 0020 3246     		mov	r2, r6
 778 0022 2944     		add	r1, r1, r5
 779 0024 2046     		mov	r0, r4
 780 0026 FFF7FEFF 		bl	prvInsertTimerInActiveList
 781              	.LVL83:
 782 002a 80B1     		cbz	r0, .L63
 519:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 783              		.loc 1 519 0
 784 002c 0021     		movs	r1, #0
 785 002e 0091     		str	r1, [sp]
ARM GAS  /tmp/ccfUz9ou.s 			page 37


 786 0030 0B46     		mov	r3, r1
 787 0032 2A46     		mov	r2, r5
 788 0034 2046     		mov	r0, r4
 789 0036 FFF7FEFF 		bl	xTimerGenericCommand
 790              	.LVL84:
 520:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 791              		.loc 1 520 0
 792 003a 40B9     		cbnz	r0, .L63
 793              	.LBB38:
 794              	.LBB39:
 795              		.loc 2 237 0
 796              		.syntax unified
 797              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 798 003c 4FF05003 			mov r3, #80												
 799 0040 83F31188 		msr basepri, r3											
 800 0044 BFF36F8F 		isb														
 801 0048 BFF34F8F 		dsb														
 802              	
 803              	@ 0 "" 2
 804              	.LVL85:
 805              		.thumb
 806              		.syntax unified
 807              	.L64:
 808 004c FEE7     		b	.L64
 809              	.LVL86:
 810              	.L63:
 811              	.LBE39:
 812              	.LBE38:
 534:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 813              		.loc 1 534 0
 814 004e 636A     		ldr	r3, [r4, #36]
 815 0050 2046     		mov	r0, r4
 816 0052 9847     		blx	r3
 817              	.LVL87:
 535:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 818              		.loc 1 535 0
 819 0054 02B0     		add	sp, sp, #8
 820              	.LCFI18:
 821              		.cfi_def_cfa_offset 16
 822              		@ sp needed
 823 0056 70BD     		pop	{r4, r5, r6, pc}
 824              	.LVL88:
 825              	.L67:
 826              		.align	2
 827              	.L66:
 828 0058 00000000 		.word	.LANCHOR0
 829              		.cfi_endproc
 830              	.LFE13:
 832              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 833              		.align	2
 834              		.thumb
 835              		.thumb_func
 837              	prvProcessTimerOrBlockTask:
 838              	.LFB15:
 575:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 839              		.loc 1 575 0
 840              		.cfi_startproc
ARM GAS  /tmp/ccfUz9ou.s 			page 38


 841              		@ args = 0, pretend = 0, frame = 8
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              	.LVL89:
 844 0000 70B5     		push	{r4, r5, r6, lr}
 845              	.LCFI19:
 846              		.cfi_def_cfa_offset 16
 847              		.cfi_offset 4, -16
 848              		.cfi_offset 5, -12
 849              		.cfi_offset 6, -8
 850              		.cfi_offset 14, -4
 851 0002 82B0     		sub	sp, sp, #8
 852              	.LCFI20:
 853              		.cfi_def_cfa_offset 24
 854 0004 0646     		mov	r6, r0
 855 0006 0C46     		mov	r4, r1
 579:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 856              		.loc 1 579 0
 857 0008 FFF7FEFF 		bl	vTaskSuspendAll
 858              	.LVL90:
 586:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 859              		.loc 1 586 0
 860 000c 01A8     		add	r0, sp, #4
 861 000e FFF7FEFF 		bl	prvSampleTimeNow
 862              	.LVL91:
 587:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 863              		.loc 1 587 0
 864 0012 019B     		ldr	r3, [sp, #4]
 865 0014 1BBB     		cbnz	r3, .L69
 866 0016 0546     		mov	r5, r0
 590:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 867              		.loc 1 590 0
 868 0018 44B9     		cbnz	r4, .L70
 590:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 869              		.loc 1 590 0 is_stmt 0 discriminator 1
 870 001a B042     		cmp	r0, r6
 871 001c 06D3     		bcc	.L70
 592:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 872              		.loc 1 592 0 is_stmt 1
 873 001e FFF7FEFF 		bl	xTaskResumeAll
 874              	.LVL92:
 593:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 875              		.loc 1 593 0
 876 0022 2946     		mov	r1, r5
 877 0024 3046     		mov	r0, r6
 878 0026 FFF7FEFF 		bl	prvProcessExpiredTimer
 879              	.LVL93:
 880 002a 1AE0     		b	.L68
 881              	.LVL94:
 882              	.L70:
 603:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 883              		.loc 1 603 0
 884 002c 2CB1     		cbz	r4, .L72
 607:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 885              		.loc 1 607 0
 886 002e 0E4B     		ldr	r3, .L74
 887 0030 1B68     		ldr	r3, [r3]
 888 0032 1C68     		ldr	r4, [r3]
ARM GAS  /tmp/ccfUz9ou.s 			page 39


 889              	.LVL95:
 890 0034 B4FA84F4 		clz	r4, r4
 891 0038 6409     		lsrs	r4, r4, #5
 892              	.LVL96:
 893              	.L72:
 610:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 894              		.loc 1 610 0
 895 003a 2246     		mov	r2, r4
 896 003c 711B     		subs	r1, r6, r5
 897 003e 0B4B     		ldr	r3, .L74+4
 898 0040 1868     		ldr	r0, [r3]
 899              	.LVL97:
 900 0042 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 901              	.LVL98:
 612:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 902              		.loc 1 612 0
 903 0046 FFF7FEFF 		bl	xTaskResumeAll
 904              	.LVL99:
 905 004a 50B9     		cbnz	r0, .L68
 618:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 906              		.loc 1 618 0
 907 004c 4FF08052 		mov	r2, #268435456
 908 0050 074B     		ldr	r3, .L74+8
 909 0052 1A60     		str	r2, [r3]
 910              		.syntax unified
 911              	@ 618 "Middlewares/Third_Party/FreeRTOS/Source/timers.c" 1
 912 0054 BFF34F8F 		dsb
 913              	@ 0 "" 2
 914              	@ 618 "Middlewares/Third_Party/FreeRTOS/Source/timers.c" 1
 915 0058 BFF36F8F 		isb
 916              	@ 0 "" 2
 917              		.thumb
 918              		.syntax unified
 919 005c 01E0     		b	.L68
 920              	.LVL100:
 921              	.L69:
 628:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 922              		.loc 1 628 0
 923 005e FFF7FEFF 		bl	xTaskResumeAll
 924              	.LVL101:
 925              	.L68:
 631:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 926              		.loc 1 631 0
 927 0062 02B0     		add	sp, sp, #8
 928              	.LCFI21:
 929              		.cfi_def_cfa_offset 16
 930              		@ sp needed
 931 0064 70BD     		pop	{r4, r5, r6, pc}
 932              	.LVL102:
 933              	.L75:
 934 0066 00BF     		.align	2
 935              	.L74:
 936 0068 00000000 		.word	.LANCHOR1
 937 006c 00000000 		.word	.LANCHOR2
 938 0070 04ED00E0 		.word	-536810236
 939              		.cfi_endproc
 940              	.LFE15:
ARM GAS  /tmp/ccfUz9ou.s 			page 40


 942              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 943              		.align	2
 944              		.thumb
 945              		.thumb_func
 947              	prvProcessReceivedCommands:
 948              	.LFB19:
 725:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 949              		.loc 1 725 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 16
 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953 0000 30B5     		push	{r4, r5, lr}
 954              	.LCFI22:
 955              		.cfi_def_cfa_offset 12
 956              		.cfi_offset 4, -12
 957              		.cfi_offset 5, -8
 958              		.cfi_offset 14, -4
 959 0002 87B0     		sub	sp, sp, #28
 960              	.LCFI23:
 961              		.cfi_def_cfa_offset 40
 731:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 962              		.loc 1 731 0
 963 0004 4DE0     		b	.L78
 964              	.L89:
 757:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 965              		.loc 1 757 0
 966 0006 039B     		ldr	r3, [sp, #12]
 967 0008 002B     		cmp	r3, #0
 968 000a 4ADB     		blt	.L78
 761:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 969              		.loc 1 761 0
 970 000c 059C     		ldr	r4, [sp, #20]
 971              	.LVL103:
 763:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 972              		.loc 1 763 0
 973 000e 6369     		ldr	r3, [r4, #20]
 974 0010 13B1     		cbz	r3, .L79
 766:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 975              		.loc 1 766 0
 976 0012 201D     		adds	r0, r4, #4
 977 0014 FFF7FEFF 		bl	uxListRemove
 978              	.LVL104:
 979              	.L79:
 781:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 980              		.loc 1 781 0
 981 0018 02A8     		add	r0, sp, #8
 982 001a FFF7FEFF 		bl	prvSampleTimeNow
 983              	.LVL105:
 783:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 984              		.loc 1 783 0
 985 001e 039B     		ldr	r3, [sp, #12]
 986 0020 092B     		cmp	r3, #9
 987 0022 3ED8     		bhi	.L78
 988 0024 DFE803F0 		tbb	[pc, r3]
 989              	.L82:
 990 0028 05       		.byte	(.L81-.L82)/2
 991 0029 05       		.byte	(.L81-.L82)/2
ARM GAS  /tmp/ccfUz9ou.s 			page 41


 992 002a 05       		.byte	(.L81-.L82)/2
 993 002b 3D       		.byte	(.L78-.L82)/2
 994 002c 27       		.byte	(.L83-.L82)/2
 995 002d 3A       		.byte	(.L84-.L82)/2
 996 002e 05       		.byte	(.L81-.L82)/2
 997 002f 05       		.byte	(.L81-.L82)/2
 998 0030 3D       		.byte	(.L78-.L82)/2
 999 0031 27       		.byte	(.L83-.L82)/2
 1000              		.p2align 1
 1001              	.L81:
 791:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 1002              		.loc 1 791 0
 1003 0032 0499     		ldr	r1, [sp, #16]
 1004 0034 A569     		ldr	r5, [r4, #24]
 1005 0036 0B46     		mov	r3, r1
 1006 0038 0246     		mov	r2, r0
 1007 003a 2944     		add	r1, r1, r5
 1008 003c 2046     		mov	r0, r4
 1009              	.LVL106:
 1010 003e FFF7FEFF 		bl	prvInsertTimerInActiveList
 1011              	.LVL107:
 1012 0042 70B3     		cbz	r0, .L78
 795:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1013              		.loc 1 795 0
 1014 0044 636A     		ldr	r3, [r4, #36]
 1015 0046 2046     		mov	r0, r4
 1016 0048 9847     		blx	r3
 1017              	.LVL108:
 798:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 1018              		.loc 1 798 0
 1019 004a E369     		ldr	r3, [r4, #28]
 1020 004c 012B     		cmp	r3, #1
 1021 004e 28D1     		bne	.L78
 800:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 1022              		.loc 1 800 0
 1023 0050 A269     		ldr	r2, [r4, #24]
 1024 0052 0021     		movs	r1, #0
 1025 0054 0091     		str	r1, [sp]
 1026 0056 0B46     		mov	r3, r1
 1027 0058 0498     		ldr	r0, [sp, #16]
 1028 005a 0244     		add	r2, r2, r0
 1029 005c 2046     		mov	r0, r4
 1030 005e FFF7FEFF 		bl	xTimerGenericCommand
 1031              	.LVL109:
 801:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 1032              		.loc 1 801 0
 1033 0062 F0B9     		cbnz	r0, .L78
 1034              	.LBB40:
 1035              	.LBB41:
 1036              		.loc 2 237 0
 1037              		.syntax unified
 1038              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1039 0064 4FF05003 			mov r3, #80												
 1040 0068 83F31188 		msr basepri, r3											
 1041 006c BFF36F8F 		isb														
 1042 0070 BFF34F8F 		dsb														
 1043              	
ARM GAS  /tmp/ccfUz9ou.s 			page 42


 1044              	@ 0 "" 2
 1045              	.LVL110:
 1046              		.thumb
 1047              		.syntax unified
 1048              	.L86:
 1049 0074 FEE7     		b	.L86
 1050              	.LVL111:
 1051              	.L83:
 1052              	.LBE41:
 1053              	.LBE40:
 823:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1054              		.loc 1 823 0
 1055 0076 0499     		ldr	r1, [sp, #16]
 1056 0078 A161     		str	r1, [r4, #24]
 824:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1057              		.loc 1 824 0
 1058 007a 41B9     		cbnz	r1, .L87
 1059              	.LBB42:
 1060              	.LBB43:
 1061              		.loc 2 237 0
 1062              		.syntax unified
 1063              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1064 007c 4FF05003 			mov r3, #80												
 1065 0080 83F31188 		msr basepri, r3											
 1066 0084 BFF36F8F 		isb														
 1067 0088 BFF34F8F 		dsb														
 1068              	
 1069              	@ 0 "" 2
 1070              	.LVL112:
 1071              		.thumb
 1072              		.syntax unified
 1073              	.L88:
 1074 008c FEE7     		b	.L88
 1075              	.L87:
 1076              	.LBE43:
 1077              	.LBE42:
 832:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 1078              		.loc 1 832 0
 1079 008e 0346     		mov	r3, r0
 1080 0090 0246     		mov	r2, r0
 1081 0092 0144     		add	r1, r1, r0
 1082 0094 2046     		mov	r0, r4
 1083              	.LVL113:
 1084 0096 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1085              	.LVL114:
 833:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1086              		.loc 1 833 0
 1087 009a 02E0     		b	.L78
 1088              	.LVL115:
 1089              	.L84:
 843:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 1090              		.loc 1 843 0
 1091 009c 2046     		mov	r0, r4
 1092              	.LVL116:
 1093 009e FFF7FEFF 		bl	vPortFree
 1094              	.LVL117:
 1095              	.L78:
ARM GAS  /tmp/ccfUz9ou.s 			page 43


 731:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 1096              		.loc 1 731 0
 1097 00a2 0023     		movs	r3, #0
 1098 00a4 1A46     		mov	r2, r3
 1099 00a6 03A9     		add	r1, sp, #12
 1100 00a8 0348     		ldr	r0, .L91
 1101 00aa 0068     		ldr	r0, [r0]
 1102 00ac FFF7FEFF 		bl	xQueueGenericReceive
 1103              	.LVL118:
 1104 00b0 0028     		cmp	r0, #0
 1105 00b2 A8D1     		bne	.L89
 868:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1106              		.loc 1 868 0
 1107 00b4 07B0     		add	sp, sp, #28
 1108              	.LCFI24:
 1109              		.cfi_def_cfa_offset 12
 1110              		@ sp needed
 1111 00b6 30BD     		pop	{r4, r5, pc}
 1112              	.L92:
 1113              		.align	2
 1114              	.L91:
 1115 00b8 00000000 		.word	.LANCHOR2
 1116              		.cfi_endproc
 1117              	.LFE19:
 1119              		.section	.text.prvTimerTask,"ax",%progbits
 1120              		.align	2
 1121              		.thumb
 1122              		.thumb_func
 1124              	prvTimerTask:
 1125              	.LFB14:
 539:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 1126              		.loc 1 539 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 8
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              	.LVL119:
 1131 0000 00B5     		push	{lr}
 1132              	.LCFI25:
 1133              		.cfi_def_cfa_offset 4
 1134              		.cfi_offset 14, -4
 1135 0002 83B0     		sub	sp, sp, #12
 1136              	.LCFI26:
 1137              		.cfi_def_cfa_offset 16
 1138              	.LVL120:
 1139              	.L94:
 562:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1140              		.loc 1 562 0 discriminator 1
 1141 0004 01A8     		add	r0, sp, #4
 1142 0006 FFF7FEFF 		bl	prvGetNextExpireTime
 1143              	.LVL121:
 566:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1144              		.loc 1 566 0 discriminator 1
 1145 000a 0199     		ldr	r1, [sp, #4]
 1146 000c FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 1147              	.LVL122:
 569:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 1148              		.loc 1 569 0 discriminator 1
ARM GAS  /tmp/ccfUz9ou.s 			page 44


 1149 0010 FFF7FEFF 		bl	prvProcessReceivedCommands
 1150              	.LVL123:
 1151 0014 F6E7     		b	.L94
 1152              		.cfi_endproc
 1153              	.LFE14:
 1155 0016 00BF     		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1156              		.align	2
 1157              		.global	xTimerGetTimerDaemonTaskHandle
 1158              		.thumb
 1159              		.thumb_func
 1161              	xTimerGetTimerDaemonTaskHandle:
 1162              	.LFB9:
 461:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1163              		.loc 1 461 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 0
 1166              		@ frame_needed = 0, uses_anonymous_args = 0
 1167              		@ link register save eliminated.
 464:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 1168              		.loc 1 464 0
 1169 0000 064B     		ldr	r3, .L99
 1170 0002 1868     		ldr	r0, [r3]
 1171 0004 40B9     		cbnz	r0, .L97
 1172              	.LBB44:
 1173              	.LBB45:
 1174              		.loc 2 237 0
 1175              		.syntax unified
 1176              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1177 0006 4FF05003 			mov r3, #80												
 1178 000a 83F31188 		msr basepri, r3											
 1179 000e BFF36F8F 		isb														
 1180 0012 BFF34F8F 		dsb														
 1181              	
 1182              	@ 0 "" 2
 1183              	.LVL124:
 1184              		.thumb
 1185              		.syntax unified
 1186              	.L98:
 1187 0016 FEE7     		b	.L98
 1188              	.L97:
 1189              	.LBE45:
 1190              	.LBE44:
 466:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1191              		.loc 1 466 0
 1192 0018 7047     		bx	lr
 1193              	.L100:
 1194 001a 00BF     		.align	2
 1195              	.L99:
 1196 001c 00000000 		.word	.LANCHOR5
 1197              		.cfi_endproc
 1198              	.LFE9:
 1200              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1201              		.align	2
 1202              		.global	xTimerGetPeriod
 1203              		.thumb
 1204              		.thumb_func
 1206              	xTimerGetPeriod:
ARM GAS  /tmp/ccfUz9ou.s 			page 45


 1207              	.LFB10:
 470:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1208              		.loc 1 470 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213              	.LVL125:
 473:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1214              		.loc 1 473 0
 1215 0000 40B9     		cbnz	r0, .L102
 1216              	.LBB46:
 1217              	.LBB47:
 1218              		.loc 2 237 0
 1219              		.syntax unified
 1220              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1221 0002 4FF05003 			mov r3, #80												
 1222 0006 83F31188 		msr basepri, r3											
 1223 000a BFF36F8F 		isb														
 1224 000e BFF34F8F 		dsb														
 1225              	
 1226              	@ 0 "" 2
 1227              	.LVL126:
 1228              		.thumb
 1229              		.syntax unified
 1230              	.L103:
 1231 0012 FEE7     		b	.L103
 1232              	.L102:
 1233              	.LBE47:
 1234              	.LBE46:
 475:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1235              		.loc 1 475 0
 1236 0014 8069     		ldr	r0, [r0, #24]
 1237              	.LVL127:
 1238 0016 7047     		bx	lr
 1239              		.cfi_endproc
 1240              	.LFE10:
 1242              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1243              		.align	2
 1244              		.global	xTimerGetExpiryTime
 1245              		.thumb
 1246              		.thumb_func
 1248              	xTimerGetExpiryTime:
 1249              	.LFB11:
 479:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 1250              		.loc 1 479 0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 0
 1253              		@ frame_needed = 0, uses_anonymous_args = 0
 1254              		@ link register save eliminated.
 1255              	.LVL128:
 483:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1256              		.loc 1 483 0
 1257 0000 40B9     		cbnz	r0, .L105
 1258              	.LBB48:
 1259              	.LBB49:
 1260              		.loc 2 237 0
ARM GAS  /tmp/ccfUz9ou.s 			page 46


 1261              		.syntax unified
 1262              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1263 0002 4FF05003 			mov r3, #80												
 1264 0006 83F31188 		msr basepri, r3											
 1265 000a BFF36F8F 		isb														
 1266 000e BFF34F8F 		dsb														
 1267              	
 1268              	@ 0 "" 2
 1269              	.LVL129:
 1270              		.thumb
 1271              		.syntax unified
 1272              	.L106:
 1273 0012 FEE7     		b	.L106
 1274              	.L105:
 1275              	.LVL130:
 1276              	.LBE49:
 1277              	.LBE48:
 486:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1278              		.loc 1 486 0
 1279 0014 4068     		ldr	r0, [r0, #4]
 1280              	.LVL131:
 1281 0016 7047     		bx	lr
 1282              		.cfi_endproc
 1283              	.LFE11:
 1285              		.section	.text.pcTimerGetName,"ax",%progbits
 1286              		.align	2
 1287              		.global	pcTimerGetName
 1288              		.thumb
 1289              		.thumb_func
 1291              	pcTimerGetName:
 1292              	.LFB12:
 490:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1293              		.loc 1 490 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298              	.LVL132:
 493:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1299              		.loc 1 493 0
 1300 0000 40B9     		cbnz	r0, .L108
 1301              	.LBB50:
 1302              	.LBB51:
 1303              		.loc 2 237 0
 1304              		.syntax unified
 1305              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1306 0002 4FF05003 			mov r3, #80												
 1307 0006 83F31188 		msr basepri, r3											
 1308 000a BFF36F8F 		isb														
 1309 000e BFF34F8F 		dsb														
 1310              	
 1311              	@ 0 "" 2
 1312              	.LVL133:
 1313              		.thumb
 1314              		.syntax unified
 1315              	.L109:
 1316 0012 FEE7     		b	.L109
ARM GAS  /tmp/ccfUz9ou.s 			page 47


 1317              	.L108:
 1318              	.LBE51:
 1319              	.LBE50:
 495:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1320              		.loc 1 495 0
 1321 0014 0068     		ldr	r0, [r0]
 1322              	.LVL134:
 1323 0016 7047     		bx	lr
 1324              		.cfi_endproc
 1325              	.LFE12:
 1327              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1328              		.align	2
 1329              		.global	xTimerIsTimerActive
 1330              		.thumb
 1331              		.thumb_func
 1333              	xTimerIsTimerActive:
 1334              	.LFB22:
 978:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 979:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 980:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 982:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 1335              		.loc 1 982 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              	.LVL135:
 983:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsInActiveList;
 984:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 985:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 986:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1340              		.loc 1 986 0
 1341 0000 40B9     		cbnz	r0, .L111
 1342              	.LBB52:
 1343              	.LBB53:
 1344              		.loc 2 237 0
 1345              		.syntax unified
 1346              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1347 0002 4FF05003 			mov r3, #80												
 1348 0006 83F31188 		msr basepri, r3											
 1349 000a BFF36F8F 		isb														
 1350 000e BFF34F8F 		dsb														
 1351              	
 1352              	@ 0 "" 2
 1353              	.LVL136:
 1354              		.thumb
 1355              		.syntax unified
 1356              	.L112:
 1357 0012 FEE7     		b	.L112
 1358              	.L111:
 1359              	.LBE53:
 1360              	.LBE52:
 982:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsInActiveList;
 1361              		.loc 1 982 0
 1362 0014 10B5     		push	{r4, lr}
 1363              	.LCFI27:
 1364              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccfUz9ou.s 			page 48


 1365              		.cfi_offset 4, -8
 1366              		.cfi_offset 14, -4
 1367 0016 0446     		mov	r4, r0
 987:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Is the timer in the list of active timers? */
 989:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1368              		.loc 1 989 0
 1369 0018 FFF7FEFF 		bl	vPortEnterCritical
 1370              	.LVL137:
 990:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 991:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 992:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 993:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 994:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1371              		.loc 1 994 0
 1372 001c 6469     		ldr	r4, [r4, #20]
 1373              	.LVL138:
 1374 001e 0034     		adds	r4, r4, #0
 1375 0020 18BF     		it	ne
 1376 0022 0124     		movne	r4, #1
 1377              	.LVL139:
 995:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 996:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1378              		.loc 1 996 0
 1379 0024 FFF7FEFF 		bl	vPortExitCritical
 1380              	.LVL140:
 997:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 998:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimerIsInActiveList;
 999:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1381              		.loc 1 999 0
 1382 0028 2046     		mov	r0, r4
 1383 002a 10BD     		pop	{r4, pc}
 1384              		.cfi_endproc
 1385              	.LFE22:
 1387              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1388              		.align	2
 1389              		.global	pvTimerGetTimerID
 1390              		.thumb
 1391              		.thumb_func
 1393              	pvTimerGetTimerID:
 1394              	.LFB23:
1000:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1001:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1002:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1003:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 1395              		.loc 1 1003 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 1399              	.LVL141:
1004:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1005:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** void *pvReturn;
1006:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1400              		.loc 1 1007 0
 1401 0000 40B9     		cbnz	r0, .L115
 1402              	.LBB54:
ARM GAS  /tmp/ccfUz9ou.s 			page 49


 1403              	.LBB55:
 1404              		.loc 2 237 0
 1405              		.syntax unified
 1406              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1407 0002 4FF05003 			mov r3, #80												
 1408 0006 83F31188 		msr basepri, r3											
 1409 000a BFF36F8F 		isb														
 1410 000e BFF34F8F 		dsb														
 1411              	
 1412              	@ 0 "" 2
 1413              	.LVL142:
 1414              		.thumb
 1415              		.syntax unified
 1416              	.L116:
 1417 0012 FEE7     		b	.L116
 1418              	.L115:
 1419              	.LBE55:
 1420              	.LBE54:
1003:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1421              		.loc 1 1003 0
 1422 0014 10B5     		push	{r4, lr}
 1423              	.LCFI28:
 1424              		.cfi_def_cfa_offset 8
 1425              		.cfi_offset 4, -8
 1426              		.cfi_offset 14, -4
 1427 0016 0446     		mov	r4, r0
1008:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1009:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1428              		.loc 1 1009 0
 1429 0018 FFF7FEFF 		bl	vPortEnterCritical
 1430              	.LVL143:
1010:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
1011:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1431              		.loc 1 1011 0
 1432 001c 246A     		ldr	r4, [r4, #32]
 1433              	.LVL144:
1012:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
1013:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1434              		.loc 1 1013 0
 1435 001e FFF7FEFF 		bl	vPortExitCritical
 1436              	.LVL145:
1014:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1015:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pvReturn;
1016:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 1437              		.loc 1 1016 0
 1438 0022 2046     		mov	r0, r4
 1439 0024 10BD     		pop	{r4, pc}
 1440              		.cfi_endproc
 1441              	.LFE23:
 1443 0026 00BF     		.section	.text.vTimerSetTimerID,"ax",%progbits
 1444              		.align	2
 1445              		.global	vTimerSetTimerID
 1446              		.thumb
 1447              		.thumb_func
 1449              	vTimerSetTimerID:
 1450              	.LFB24:
1017:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccfUz9ou.s 			page 50


1018:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1019:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1020:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 1451              		.loc 1 1020 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455              	.LVL146:
 1456 0000 38B5     		push	{r3, r4, r5, lr}
 1457              	.LCFI29:
 1458              		.cfi_def_cfa_offset 16
 1459              		.cfi_offset 3, -16
 1460              		.cfi_offset 4, -12
 1461              		.cfi_offset 5, -8
 1462              		.cfi_offset 14, -4
 1463              	.LVL147:
1021:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1022:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1023:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1464              		.loc 1 1023 0
 1465 0002 40B9     		cbnz	r0, .L119
 1466              	.LBB56:
 1467              	.LBB57:
 1468              		.loc 2 237 0
 1469              		.syntax unified
 1470              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1471 0004 4FF05003 			mov r3, #80												
 1472 0008 83F31188 		msr basepri, r3											
 1473 000c BFF36F8F 		isb														
 1474 0010 BFF34F8F 		dsb														
 1475              	
 1476              	@ 0 "" 2
 1477              	.LVL148:
 1478              		.thumb
 1479              		.syntax unified
 1480              	.L120:
 1481 0014 FEE7     		b	.L120
 1482              	.L119:
 1483 0016 0446     		mov	r4, r0
 1484 0018 0D46     		mov	r5, r1
 1485              	.LBE57:
 1486              	.LBE56:
1024:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1025:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1487              		.loc 1 1025 0
 1488 001a FFF7FEFF 		bl	vPortEnterCritical
 1489              	.LVL149:
1026:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1490              		.loc 1 1027 0
 1491 001e 2562     		str	r5, [r4, #32]
1028:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
1029:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1492              		.loc 1 1029 0
 1493 0020 FFF7FEFF 		bl	vPortExitCritical
 1494              	.LVL150:
 1495 0024 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccfUz9ou.s 			page 51


 1496              		.cfi_endproc
 1497              	.LFE24:
 1499 0026 00BF     		.section	.bss.pxCurrentTimerList,"aw",%nobits
 1500              		.align	2
 1501              		.set	.LANCHOR0,. + 0
 1504              	pxCurrentTimerList:
 1505 0000 00000000 		.space	4
 1506              		.section	.bss.xActiveTimerList1,"aw",%nobits
 1507              		.align	2
 1508              		.set	.LANCHOR3,. + 0
 1511              	xActiveTimerList1:
 1512 0000 00000000 		.space	20
 1512      00000000 
 1512      00000000 
 1512      00000000 
 1512      00000000 
 1513              		.section	.bss.xActiveTimerList2,"aw",%nobits
 1514              		.align	2
 1515              		.set	.LANCHOR4,. + 0
 1518              	xActiveTimerList2:
 1519 0000 00000000 		.space	20
 1519      00000000 
 1519      00000000 
 1519      00000000 
 1519      00000000 
 1520              		.section	.bss.xLastTime.5430,"aw",%nobits
 1521              		.align	2
 1522              		.set	.LANCHOR6,. + 0
 1525              	xLastTime.5430:
 1526 0000 00000000 		.space	4
 1527              		.section	.rodata.str1.4,"aMS",%progbits,1
 1528              		.align	2
 1529              	.LC0:
 1530 0000 546D7251 		.ascii	"TmrQ\000"
 1530      00
 1531 0005 000000   		.space	3
 1532              	.LC1:
 1533 0008 546D7220 		.ascii	"Tmr Svc\000"
 1533      53766300 
 1534              		.section	.bss.xTimerQueue,"aw",%nobits
 1535              		.align	2
 1536              		.set	.LANCHOR2,. + 0
 1539              	xTimerQueue:
 1540 0000 00000000 		.space	4
 1541              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 1542              		.align	2
 1543              		.set	.LANCHOR1,. + 0
 1546              	pxOverflowTimerList:
 1547 0000 00000000 		.space	4
 1548              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 1549              		.align	2
 1550              		.set	.LANCHOR5,. + 0
 1553              	xTimerTaskHandle:
 1554 0000 00000000 		.space	4
 1555              		.text
 1556              	.Letext0:
 1557              		.file 3 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/ccfUz9ou.s 			page 52


 1558              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1559              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1560              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1561              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1562              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 1563              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccfUz9ou.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timers.c
     /tmp/ccfUz9ou.s:20     .text.prvGetNextExpireTime:0000000000000000 $t
     /tmp/ccfUz9ou.s:24     .text.prvGetNextExpireTime:0000000000000000 prvGetNextExpireTime
     /tmp/ccfUz9ou.s:57     .text.prvGetNextExpireTime:000000000000001c $d
     /tmp/ccfUz9ou.s:62     .text.prvInsertTimerInActiveList:0000000000000000 $t
     /tmp/ccfUz9ou.s:66     .text.prvInsertTimerInActiveList:0000000000000000 prvInsertTimerInActiveList
     /tmp/ccfUz9ou.s:142    .text.prvInsertTimerInActiveList:0000000000000040 $d
     /tmp/ccfUz9ou.s:148    .text.prvCheckForValidListAndQueue:0000000000000000 $t
     /tmp/ccfUz9ou.s:152    .text.prvCheckForValidListAndQueue:0000000000000000 prvCheckForValidListAndQueue
     /tmp/ccfUz9ou.s:210    .text.prvCheckForValidListAndQueue:0000000000000040 $d
     /tmp/ccfUz9ou.s:220    .text.prvInitialiseNewTimer:0000000000000000 $t
     /tmp/ccfUz9ou.s:224    .text.prvInitialiseNewTimer:0000000000000000 prvInitialiseNewTimer
     /tmp/ccfUz9ou.s:294    .text.xTimerCreateTimerTask:0000000000000000 $t
     /tmp/ccfUz9ou.s:299    .text.xTimerCreateTimerTask:0000000000000000 xTimerCreateTimerTask
     /tmp/ccfUz9ou.s:368    .text.xTimerCreateTimerTask:0000000000000044 $d
     /tmp/ccfUz9ou.s:1124   .text.prvTimerTask:0000000000000000 prvTimerTask
     /tmp/ccfUz9ou.s:376    .text.xTimerCreate:0000000000000000 $t
     /tmp/ccfUz9ou.s:381    .text.xTimerCreate:0000000000000000 xTimerCreate
     /tmp/ccfUz9ou.s:435    .text.xTimerGenericCommand:0000000000000000 $t
     /tmp/ccfUz9ou.s:440    .text.xTimerGenericCommand:0000000000000000 xTimerGenericCommand
     /tmp/ccfUz9ou.s:548    .text.xTimerGenericCommand:0000000000000068 $d
     /tmp/ccfUz9ou.s:553    .text.prvSwitchTimerLists:0000000000000000 $t
     /tmp/ccfUz9ou.s:557    .text.prvSwitchTimerLists:0000000000000000 prvSwitchTimerLists
     /tmp/ccfUz9ou.s:672    .text.prvSwitchTimerLists:0000000000000074 $d
     /tmp/ccfUz9ou.s:678    .text.prvSampleTimeNow:0000000000000000 $t
     /tmp/ccfUz9ou.s:682    .text.prvSampleTimeNow:0000000000000000 prvSampleTimeNow
     /tmp/ccfUz9ou.s:731    .text.prvSampleTimeNow:0000000000000028 $d
     /tmp/ccfUz9ou.s:736    .text.prvProcessExpiredTimer:0000000000000000 $t
     /tmp/ccfUz9ou.s:740    .text.prvProcessExpiredTimer:0000000000000000 prvProcessExpiredTimer
     /tmp/ccfUz9ou.s:828    .text.prvProcessExpiredTimer:0000000000000058 $d
     /tmp/ccfUz9ou.s:833    .text.prvProcessTimerOrBlockTask:0000000000000000 $t
     /tmp/ccfUz9ou.s:837    .text.prvProcessTimerOrBlockTask:0000000000000000 prvProcessTimerOrBlockTask
     /tmp/ccfUz9ou.s:936    .text.prvProcessTimerOrBlockTask:0000000000000068 $d
     /tmp/ccfUz9ou.s:943    .text.prvProcessReceivedCommands:0000000000000000 $t
     /tmp/ccfUz9ou.s:947    .text.prvProcessReceivedCommands:0000000000000000 prvProcessReceivedCommands
     /tmp/ccfUz9ou.s:990    .text.prvProcessReceivedCommands:0000000000000028 $d
     /tmp/ccfUz9ou.s:1000   .text.prvProcessReceivedCommands:0000000000000032 $t
     /tmp/ccfUz9ou.s:1115   .text.prvProcessReceivedCommands:00000000000000b8 $d
     /tmp/ccfUz9ou.s:1120   .text.prvTimerTask:0000000000000000 $t
     /tmp/ccfUz9ou.s:1156   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $t
     /tmp/ccfUz9ou.s:1161   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 xTimerGetTimerDaemonTaskHandle
     /tmp/ccfUz9ou.s:1196   .text.xTimerGetTimerDaemonTaskHandle:000000000000001c $d
     /tmp/ccfUz9ou.s:1201   .text.xTimerGetPeriod:0000000000000000 $t
     /tmp/ccfUz9ou.s:1206   .text.xTimerGetPeriod:0000000000000000 xTimerGetPeriod
     /tmp/ccfUz9ou.s:1243   .text.xTimerGetExpiryTime:0000000000000000 $t
     /tmp/ccfUz9ou.s:1248   .text.xTimerGetExpiryTime:0000000000000000 xTimerGetExpiryTime
     /tmp/ccfUz9ou.s:1286   .text.pcTimerGetName:0000000000000000 $t
     /tmp/ccfUz9ou.s:1291   .text.pcTimerGetName:0000000000000000 pcTimerGetName
     /tmp/ccfUz9ou.s:1328   .text.xTimerIsTimerActive:0000000000000000 $t
     /tmp/ccfUz9ou.s:1333   .text.xTimerIsTimerActive:0000000000000000 xTimerIsTimerActive
     /tmp/ccfUz9ou.s:1388   .text.pvTimerGetTimerID:0000000000000000 $t
     /tmp/ccfUz9ou.s:1393   .text.pvTimerGetTimerID:0000000000000000 pvTimerGetTimerID
     /tmp/ccfUz9ou.s:1444   .text.vTimerSetTimerID:0000000000000000 $t
     /tmp/ccfUz9ou.s:1449   .text.vTimerSetTimerID:0000000000000000 vTimerSetTimerID
     /tmp/ccfUz9ou.s:1500   .bss.pxCurrentTimerList:0000000000000000 $d
     /tmp/ccfUz9ou.s:1504   .bss.pxCurrentTimerList:0000000000000000 pxCurrentTimerList
ARM GAS  /tmp/ccfUz9ou.s 			page 54


     /tmp/ccfUz9ou.s:1507   .bss.xActiveTimerList1:0000000000000000 $d
     /tmp/ccfUz9ou.s:1511   .bss.xActiveTimerList1:0000000000000000 xActiveTimerList1
     /tmp/ccfUz9ou.s:1514   .bss.xActiveTimerList2:0000000000000000 $d
     /tmp/ccfUz9ou.s:1518   .bss.xActiveTimerList2:0000000000000000 xActiveTimerList2
     /tmp/ccfUz9ou.s:1521   .bss.xLastTime.5430:0000000000000000 $d
     /tmp/ccfUz9ou.s:1525   .bss.xLastTime.5430:0000000000000000 xLastTime.5430
     /tmp/ccfUz9ou.s:1528   .rodata.str1.4:0000000000000000 $d
     /tmp/ccfUz9ou.s:1535   .bss.xTimerQueue:0000000000000000 $d
     /tmp/ccfUz9ou.s:1539   .bss.xTimerQueue:0000000000000000 xTimerQueue
     /tmp/ccfUz9ou.s:1542   .bss.pxOverflowTimerList:0000000000000000 $d
     /tmp/ccfUz9ou.s:1546   .bss.pxOverflowTimerList:0000000000000000 pxOverflowTimerList
     /tmp/ccfUz9ou.s:1549   .bss.xTimerTaskHandle:0000000000000000 $d
     /tmp/ccfUz9ou.s:1553   .bss.xTimerTaskHandle:0000000000000000 xTimerTaskHandle
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vListInsert
vPortEnterCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vPortExitCritical
vListInitialiseItem
xTaskCreate
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
vPortFree
xQueueGenericReceive
